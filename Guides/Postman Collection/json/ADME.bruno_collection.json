{
  "name": "ADME (M25)",
  "version": "1",
  "items": [
    {
      "type": "folder",
      "name": "CRS Catalog",
      "filename": "CRS Catalog",
      "seq": 1,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "CRS Catalog",
          "seq": 1
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "v2",
          "filename": "v2",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v2",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "crs",
              "filename": "crs",
              "seq": 6,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "crs",
                  "seq": 6
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get all CRSes",
                  "filename": "Get all CRSes.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/crs?offset=0&limit=100&mode=persistableReference",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get all the CRSes (any sub-type) defined in the catalog.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get one CRS",
                  "filename": "Get one CRS.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/crs?mode=persistableReference",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"crsessenceJson\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"name\": \"string\",\n    \"type\": \"string\",\n    \"ver\": \"string\"\n  },\n  \"essence\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"name\": \"string\",\n    \"type\": \"string\",\n    \"ver\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get one CRS (any sub-type) given its essence",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "area",
              "filename": "area",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "area",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get Areas of Use",
                  "filename": "Get Areas of Use.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/area?offset=0&limit=100&mode=persistableReference",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get Area of Use records - returning named bounding box definitions in latitude and longitude.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get one Area of Use",
                  "filename": "Get one Area of Use.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/area?mode=persistableReference",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"essence\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"boundBox\": {\n      \"latitudeLower\": 8520.907497419477,\n      \"latitudeUpper\": 5535.009984962795,\n      \"longitudeLeft\": 1112.1194633657105,\n      \"longitudeRight\": 4969.444777554325\n    },\n    \"name\": \"string\",\n    \"type\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get one Area of Use record by essence - returning a named bounding box definition in latitude and longitude.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "compoundcrs",
              "filename": "compoundcrs",
              "seq": 4,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "compoundcrs",
                  "seq": 4
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get all CompoundCRSes",
                  "filename": "Get all CompoundCRSes.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/compoundcrs?offset=0&limit=100&mode=persistableReference",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get all the CompoundCRSes defined in the catalog",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get One CompoundCRSes",
                  "filename": "Get One CompoundCRSes.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/compoundcrs?mode=persistableReference",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"essence\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"horizontalCRS\": {\n      \"authorityCode\": {\n        \"authority\": \"string\",\n        \"code\": \"string\"\n      },\n      \"type\": \"string\"\n    },\n    \"horzEarlyBoundCRS\": {\n      \"authCode\": {\n        \"authority\": \"string\",\n        \"code\": \"string\"\n      },\n      \"compoundCT\": {\n        \"authCode\": {\n          \"authority\": \"string\",\n          \"code\": \"string\"\n        },\n        \"cts\": [\n          {\n            \"authorityCode\": {\n              \"authority\": \"string\",\n              \"code\": \"string\"\n            },\n            \"engineVersion\": \"string\",\n            \"name\": \"string\",\n            \"type\": \"string\"\n          },\n          {\n            \"authorityCode\": {\n              \"authority\": \"string\",\n              \"code\": \"string\"\n            },\n            \"engineVersion\": \"string\",\n            \"name\": \"string\",\n            \"type\": \"string\"\n          }\n        ],\n        \"name\": \"string\",\n        \"policy\": \"string\",\n        \"type\": \"string\",\n        \"ver\": \"string\"\n      },\n      \"lateBoundCRS\": {\n        \"authorityCode\": {\n          \"authority\": \"string\",\n          \"code\": \"string\"\n        },\n        \"engineVersion\": \"string\",\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"wellKnownText\": \"string\"\n      },\n      \"name\": \"string\",\n      \"singleCT\": {\n        \"authCode\": {\n          \"authority\": \"string\",\n          \"code\": \"string\"\n        },\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"ver\": \"string\",\n        \"wkt\": \"string\"\n      },\n      \"type\": \"string\",\n      \"ver\": \"string\"\n    },\n    \"horzLateBoundCRS\": {\n      \"authCode\": {\n        \"authority\": \"string\",\n        \"code\": \"string\"\n      },\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"ver\": \"string\",\n      \"wkt\": \"string\"\n    },\n    \"name\": \"string\",\n    \"type\": \"string\",\n    \"ver\": \"string\",\n    \"vertEarlyBoundCRS\": {\n      \"authCode\": {\n        \"authority\": \"string\",\n        \"code\": \"string\"\n      },\n      \"compoundCT\": {\n        \"authCode\": {\n          \"authority\": \"string\",\n          \"code\": \"string\"\n        },\n        \"cts\": [\n          {\n            \"authorityCode\": {\n              \"authority\": \"string\",\n              \"code\": \"string\"\n            },\n            \"engineVersion\": \"string\",\n            \"name\": \"string\",\n            \"type\": \"string\"\n          },\n          {\n            \"authorityCode\": {\n              \"authority\": \"string\",\n              \"code\": \"string\"\n            },\n            \"engineVersion\": \"string\",\n            \"name\": \"string\",\n            \"type\": \"string\"\n          }\n        ],\n        \"name\": \"string\",\n        \"policy\": \"string\",\n        \"type\": \"string\",\n        \"ver\": \"string\"\n      },\n      \"lateBoundCRS\": {\n        \"authorityCode\": {\n          \"authority\": \"string\",\n          \"code\": \"string\"\n        },\n        \"engineVersion\": \"string\",\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"wellKnownText\": \"string\"\n      },\n      \"name\": \"string\",\n      \"singleCT\": {\n        \"authCode\": {\n          \"authority\": \"string\",\n          \"code\": \"string\"\n        },\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"ver\": \"string\",\n        \"wkt\": \"string\"\n      },\n      \"type\": \"string\",\n      \"ver\": \"string\"\n    },\n    \"vertLateBoundCRS\": {\n      \"authCode\": {\n        \"authority\": \"string\",\n        \"code\": \"string\"\n      },\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"ver\": \"string\",\n      \"wkt\": \"string\"\n    },\n    \"verticalCRS\": {\n      \"authorityCode\": {\n        \"authority\": \"string\",\n        \"code\": \"string\"\n      },\n      \"type\": \"string\"\n    }\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get one the CompoundCRS given its essence.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "earlyboundcrs",
              "filename": "earlyboundcrs",
              "seq": 8,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "earlyboundcrs",
                  "seq": 8
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get all EarlyBoundCRSes",
                  "filename": "Get all EarlyBoundCRSes.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/earlyboundcrs?offset=0&limit=100&mode=persistableReference",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get all the EarlyBoundCRSes defined in the catalog.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get all EarlyBoundCRSes_1",
                  "filename": "Get all EarlyBoundCRSes_1.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/earlyboundcrs?mode=persistableReference",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"essence\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"compoundCT\": {\n      \"authCode\": {\n        \"authority\": \"string\",\n        \"code\": \"string\"\n      },\n      \"cts\": [\n        {\n          \"authorityCode\": {\n            \"authority\": \"string\",\n            \"code\": \"string\"\n          },\n          \"engineVersion\": \"string\",\n          \"name\": \"string\",\n          \"type\": \"string\"\n        },\n        {\n          \"authorityCode\": {\n            \"authority\": \"string\",\n            \"code\": \"string\"\n          },\n          \"engineVersion\": \"string\",\n          \"name\": \"string\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"string\",\n      \"policy\": \"string\",\n      \"type\": \"string\",\n      \"ver\": \"string\"\n    },\n    \"lateBoundCRS\": {\n      \"authorityCode\": {\n        \"authority\": \"string\",\n        \"code\": \"string\"\n      },\n      \"engineVersion\": \"string\",\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"wellKnownText\": \"string\"\n    },\n    \"name\": \"string\",\n    \"singleCT\": {\n      \"authCode\": {\n        \"authority\": \"string\",\n        \"code\": \"string\"\n      },\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"ver\": \"string\",\n      \"wkt\": \"string\"\n    },\n    \"type\": \"string\",\n    \"ver\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get all the EarlyBoundCRSes defined in the catalog.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "compoundct",
              "filename": "compoundct",
              "seq": 5,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "compoundct",
                  "seq": 5
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get all CompoundCTs",
                  "filename": "Get all CompoundCTs.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/compoundct?offset=0&limit=100&mode=persistableReference",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get all the CompoundCTs defined in the catalog.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get One CompoundCTs",
                  "filename": "Get One CompoundCTs.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/compoundct?mode=persistableReference",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"essence\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"cts\": [\n      {\n        \"authorityCode\": {\n          \"authority\": \"string\",\n          \"code\": \"string\"\n        },\n        \"engineVersion\": \"string\",\n        \"name\": \"string\",\n        \"type\": \"string\"\n      },\n      {\n        \"authorityCode\": {\n          \"authority\": \"string\",\n          \"code\": \"string\"\n        },\n        \"engineVersion\": \"string\",\n        \"name\": \"string\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"string\",\n    \"policy\": \"string\",\n    \"type\": \"string\",\n    \"ver\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get one CompoundCT by its essence.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "info",
              "filename": "info",
              "seq": 9,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "info",
                  "seq": 9
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "info",
                  "filename": "info.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/info",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "singlect",
              "filename": "singlect",
              "seq": 12,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "singlect",
                  "seq": 12
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get all SingleCTs",
                  "filename": "Get all SingleCTs.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/singlect?offset=0&limit=100&mode=persistableReference",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get all the SingleCTs defined in the catalog.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get one SingleCT",
                  "filename": "Get one SingleCT.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/singlect?mode=persistableReference",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"essence\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"name\": \"string\",\n    \"type\": \"string\",\n    \"ver\": \"string\",\n    \"wkt\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get one SingleCT given its essence.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "ct",
              "filename": "ct",
              "seq": 7,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "ct",
                  "seq": 7
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get all Cartographic Transformations",
                  "filename": "Get all Cartographic Transformations.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/ct?offset=0&limit=100&mode=persistableReference",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get all cartographic transformations declared in the catalog.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get one Cartographic Transformation",
                  "filename": "Get one Cartographic Transformation.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/ct?mode=persistableReference",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"ctessenceJson\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"name\": \"string\",\n    \"type\": \"string\",\n    \"ver\": \"string\"\n  },\n  \"essence\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"name\": \"string\",\n    \"type\": \"string\",\n    \"ver\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get one cartographic transformation given its essence.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "search",
              "filename": "search",
              "seq": 11,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "search",
                  "seq": 11
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "area",
                  "filename": "area",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "area",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Search Areas of Use",
                      "filename": "Search Areas of Use.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/search/area?longitudeLeft=-180&latitudeLower=-90&longitudeRight=180&latitudeUpper=90&offset=0&limit=100&mode=persistableReference",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "longitudeLeft",
                            "value": "-180",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "latitudeLower",
                            "value": "-90",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "longitudeRight",
                            "value": "180",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "latitudeUpper",
                            "value": "90",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "mode",
                            "value": "persistableReference",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"query\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Search Area of Use records by keywords and/or geographic area - returning named bounding box definitions in latitude and longitude. Geographical constraints are passed (optionally) as parameters via the query URL, search keywords are passed via the request body. Query syntax follows Lucene style, default operator for multiple expressions is AND. The following keywords are supported: ''name:'', ''description:'', ''authority:'', ''code:'', ''deprecationState:'', ''remarks:'' (deprecationState remarks), ''lastModified:''. Example ''name:*America*''.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "crs",
                  "filename": "crs",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "crs",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Search CRSes",
                      "filename": "Search CRSes.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/search/crs?longitudeLeft=-180&latitudeLower=-90&longitudeRight=180&latitudeUpper=90&offset=0&limit=100&mode=persistableReference",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "longitudeLeft",
                            "value": "-180",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "latitudeLower",
                            "value": "-90",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "longitudeRight",
                            "value": "180",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "latitudeUpper",
                            "value": "90",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "mode",
                            "value": "persistableReference",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"query\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Search CRS records (any sub-type) by keywords and/or geographic area. Geographical constraints are passed (optionally) as parameters via the query URL, search keywords are passed via the request body. Query syntax follows Lucene style, default operator for multiple expressions is AND. The following keywords are supported: ''name:'', ''description:'', ''type:'', ''authority:'', ''code:'', ''deprecationState:'', ''remarks:'', ''lastModified:'', ''source:'', ''wellKnownText:'', ''crsType:'', ''baseCRS.authority:'', ''baseCRS.code:'', ''horizontalCRS.authority:'', ''horizontalCRS.code:'', ''verticalCRS.authority:'', ''verticalCRS.code:'', ''lateBoundCRS.authority:'', ''lateBoundCRS.code:'', ''ct.authority:'', ''ct.code:'', ''transformationReady:''. followed by a value. Example: ''transformationReady:true''.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "ct",
                  "filename": "ct",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "ct",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Search Cartographic Transformations",
                      "filename": "Search Cartographic Transformations.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/search/ct?longitudeLeft=-180&latitudeLower=-90&longitudeRight=180&latitudeUpper=90&offset=0&limit=100&mode=persistableReference",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "longitudeLeft",
                            "value": "-180",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "latitudeLower",
                            "value": "-90",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "longitudeRight",
                            "value": "180",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "latitudeUpper",
                            "value": "90",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "mode",
                            "value": "persistableReference",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"query\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Search cartographic transform records (any sub-type) by keywords and/or geographic area. Geographical constraints are passed (optionally) as parameters via the query URL, search keywords are passed via the request body. Query syntax follows Lucene style, default operator for multiple expressions is AND. The following keywords are supported: ''name:'',''description:'', ''type:'', ''authority:'', ''code:'', ''deprecationState:'', ''remarks:'', ''lastModified:'', ''source:'', ''wellKnownText:'', ''fromCRS.authority:'', ''fromCRS.code:'', ''toCRS.authority:'', toCRS.code:'', ''policy:''. followed by a value. Example: ''fromCRS.code:4267''.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "catalog",
              "filename": "catalog",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "catalog",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get the Catalog summary (without lists)",
                  "filename": "Get the Catalog summary (without lists).bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/catalog",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get the catalog structure with populated number of items per list but empty lists ('lateBoundCRSes',...). It is expected that the lists are individually populated on demand via the specific methods ('CRSV2GetLateBoundCRSes',...).",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "attributes",
                  "filename": "attributes",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "attributes",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Catalog Name and Update Dates",
                      "filename": "Get Catalog Name and Update Dates.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/catalog/attributes",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get the catalog name and last update date",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "lateboundcrs",
              "filename": "lateboundcrs",
              "seq": 10,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "lateboundcrs",
                  "seq": 10
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get all LateBoundCRSes",
                  "filename": "Get all LateBoundCRSes.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/lateboundcrs?offset=0&limit=100&mode=persistableReference",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get all the LateBoundCRSes defined in the catalog.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get one LateBoundCRS",
                  "filename": "Get one LateBoundCRS.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/lateboundcrs?mode=persistableReference",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "mode",
                        "value": "persistableReference",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"essence\": {\n    \"authCode\": {\n      \"authority\": \"string\",\n      \"code\": \"string\"\n    },\n    \"name\": \"string\",\n    \"type\": \"string\",\n    \"ver\": \"string\",\n    \"wkt\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get one LateBoundCRS given its persistable reference string or essence structure.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "_ah",
              "filename": "_ah",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "_ah",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "readiness_check",
                  "filename": "readiness_check",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "readiness_check",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Readiness Check endpoint",
                      "filename": "Readiness Check endpoint.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/_ah/readiness_check",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "For deployment available public `/readiness_check` endpoint, which provides `CRS Catalog Service is ready` message.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "liveness_check",
                  "filename": "liveness_check",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "liveness_check",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Liveness Check endpoint",
                      "filename": "Liveness Check endpoint.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/_ah/liveness_check",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "For deployment available public `/liveness_check` endpoint, which provides `CRS Catalog Service is alive` message.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "_ah",
          "filename": "_ah",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "_ah",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "readiness_check",
              "filename": "readiness_check",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "readiness_check",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Readiness Check endpoint",
                  "filename": "Readiness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/readiness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/readiness_check` endpoint, which provides `CRS Catalog Service is ready` message.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "liveness_check",
              "filename": "liveness_check",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "liveness_check",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Liveness Check endpoint",
                  "filename": "Liveness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/liveness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/liveness_check` endpoint, which provides `CRS Catalog Service is alive` message.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "v3",
          "filename": "v3",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v3",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "info",
              "filename": "info",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "info",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "info",
                  "filename": "info.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/info",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/info` endpoint, which provides build and git related information..",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "points-in-aou",
              "filename": "points-in-aou",
              "seq": 4,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "points-in-aou",
                  "seq": 4
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Coordinate Transformations",
                  "filename": "Coordinate Transformations.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/points-in-aou",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"dataId\": \"string\",\n  \"limit\": 2722,\n  \"offset\": 6267,\n  \"points\": [\n    {\n      \"latitude\": -76.72507013543253,\n      \"longitude\": 3512.261988403049\n    },\n    {\n      \"latitude\": 88.49678479875064,\n      \"longitude\": 6434.137003594652\n    }\n  ],\n  \"recordId\": \"string\",\n  \"returnedFields\": [\n    \"string\",\n    \"string\"\n  ]\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Coordinate Transformations",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "coordinate-reference-system",
              "filename": "coordinate-reference-system",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "coordinate-reference-system",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Coordinate Reference Systems",
                  "filename": "Coordinate Reference Systems.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/coordinate-reference-system?recordId=string&dataId=string",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "recordId",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "dataId",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Coordinate Reference Systems",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Coordinate Transformations",
                  "filename": "Coordinate Transformations.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/coordinate-reference-system",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"baseCRS\": {\n    \"id\": \"string\",\n    \"name\": \"string\"\n  },\n  \"code\": \"string\",\n  \"codeSpace\": \"string\",\n  \"coordinateReferenceSystemType\": \"string\",\n  \"datum\": {\n    \"code\": \"string\",\n    \"codeSpace\": \"string\",\n    \"name\": \"string\"\n  },\n  \"extent\": \"string\",\n  \"horizontalAxisUnitId\": \"string\",\n  \"id\": \"string\",\n  \"includeDeprecated\": true,\n  \"kind\": \"string\",\n  \"latitude\": 1360.8684162942275,\n  \"limit\": 4829,\n  \"longitude\": 7015.6136824505975,\n  \"name\": \"string\",\n  \"offset\": 5443,\n  \"persistableReferenceSearch\": \"string\",\n  \"returnAllFields\": false,\n  \"returnBoundGeographic2DAndWgs84\": false,\n  \"returnBoundProjectedAndProjectedBasedOnWgs84\": true,\n  \"returnedFields\": [\n    \"string\",\n    \"string\"\n  ],\n  \"verticalAxisUnitId\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Coordinate Transformations",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "coordinate-transformation",
              "filename": "coordinate-transformation",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "coordinate-transformation",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Coordinate Transformations",
                  "filename": "Coordinate Transformations.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/coordinate-transformation?recordId=string&dataId=string",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "recordId",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "dataId",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Coordinate Transformations",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Coordinate Transformations_1",
                  "filename": "Coordinate Transformations_1.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/coordinate-transformation",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"code\": \"string\",\n  \"codeSpace\": \"string\",\n  \"id\": \"string\",\n  \"includeDeprecated\": false,\n  \"kind\": \"string\",\n  \"latitude\": 4562.8393100708645,\n  \"limit\": 7835,\n  \"longitude\": 2317.0927296155173,\n  \"name\": \"string\",\n  \"offset\": 3904,\n  \"returnAllFields\": false,\n  \"returnedFields\": [\n    \"string\",\n    \"string\"\n  ],\n  \"sourceCRS\": \"string\",\n  \"targetCRS\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Coordinate Transformations",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "CRS Conversion",
      "filename": "CRS Conversion",
      "seq": 2,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "CRS Conversion",
          "seq": 2
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "v2",
          "filename": "v2",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v2",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "_ah",
              "filename": "_ah",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "_ah",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "readiness_check",
                  "filename": "readiness_check",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "readiness_check",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Readiness Check endpoint",
                      "filename": "Readiness Check endpoint.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/_ah/readiness_check",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "For deployment available public `/readiness_check` endpoint, which provides `CRS Conversion Service is ready` message.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "liveness_check",
                  "filename": "liveness_check",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "liveness_check",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Liveness Check endpoint",
                      "filename": "Liveness Check endpoint.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/_ah/liveness_check",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "For deployment available public `/liveness_check` endpoint, which provides `CRS Conversion Service is alive` message.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "convertTrajectory",
              "filename": "convertTrajectory",
              "seq": 4,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convertTrajectory",
                  "seq": 4
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Convert trajectory stations",
                  "filename": "Convert trajectory stations.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/convertTrajectory",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"azimuthReference\": \"TRUE_NORTH\",\n  \"inputStations\": \"string\",\n  \"method\": \"AzimuthalEquidistant\",\n  \"trajectoryCRS\": \"{\",\n  \"unitZ\": \"{\",\n  \"inputKind\": \"MD_Inclination_Azimuth\",\n  \"interpolate\": true,\n  \"referencePoint\": {\n    \"x\": -61.04340628871454,\n    \"y\": 10.673103179456877,\n    \"z\": 0\n  },\n  \"unitXY\": \"{\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Convert a list of trajectory stations, given the unit and spatial context and a reference point in 3D where MD==0. \n + Note: To get WGS 84 output the trajectoryCRS needs to be a BoundCRS (unless it is WGS 84 based)",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "convertGeoJson",
              "filename": "convertGeoJson",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convertGeoJson",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Convert a GeoJSON or AnyCrsGeoJson structure",
                  "filename": "Convert a GeoJSON or AnyCrsGeoJson structure.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/convertGeoJson",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"featureCollection\": {\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"string\",\n          \"bbox\": [\n            6344.951907849261,\n            7877.534915760474\n          ],\n          \"geoJsonVariantInternal\": \"GEO_JSON\",\n          \"coordinates\": [\n            [\n              [\n                [\n                  195.05686724237026,\n                  4780.796583858495\n                ],\n                [\n                  4851.0216816570055,\n                  4491.596271246857\n                ]\n              ],\n              [\n                [\n                  4492.527587839112,\n                  5418.331044409816\n                ],\n                [\n                  4698.939477368867,\n                  7459.8694638849165\n                ]\n              ]\n            ],\n            [\n              [\n                [\n                  5248.948622824664,\n                  1352.4190440379768\n                ],\n                [\n                  7317.918348254553,\n                  83.77106793280187\n                ]\n              ],\n              [\n                [\n                  72.12012379132271,\n                  9515.802446113788\n                ],\n                [\n                  2809.039445458905,\n                  2964.6824812950513\n                ]\n              ]\n            ]\n          ]\n        },\n        \"type\": \"string\",\n        \"bbox\": [\n          4008.0787587685663,\n          9067.298052411383\n        ],\n        \"geoJsonVariantInternal\": \"GEO_JSON\",\n        \"properties\": {}\n      },\n      {\n        \"geometry\": {\n          \"type\": \"string\",\n          \"bbox\": [\n            657.2118814847239,\n            516.6056506931993\n          ],\n          \"geoJsonVariantInternal\": \"ANY_CRS_GEO_JSON\",\n          \"coordinates\": [\n            [\n              [\n                9988.611963358882,\n                9768.487340617801\n              ],\n              [\n                8838.738394656724,\n                9581.767135213244\n              ]\n            ],\n            [\n              [\n                8820.660090994868,\n                2386.232807515091\n              ],\n              [\n                5849.663571087816,\n                3964.376396881519\n              ]\n            ]\n          ]\n        },\n        \"type\": \"string\",\n        \"bbox\": [\n          5545.526070588652,\n          96.86313560793525\n        ],\n        \"geoJsonVariantInternal\": \"GEO_JSON\",\n        \"properties\": {}\n      }\n    ],\n    \"type\": \"string\",\n    \"CoordinateReferenceSystemID\": \"string\",\n    \"VerticalUnitID\": \"string\",\n    \"bbox\": [\n      9226.983954082469,\n      406.7685582568437\n    ],\n    \"geoJsonVariantInternal\": \"ANY_CRS_GEO_JSON\",\n    \"persistableReferenceCrs\": \"string\",\n    \"persistableReferenceUnitZ\": \"string\",\n    \"properties\": {}\n  },\n  \"toCRS\": \"{\",\n  \"toUnitZ\": \"{\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Convert a GeoJSON or AnyCrsGeoJson structure to a specified target CRS. GeoJSON is declared - by definition - to be in the context of WGS 84.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "info",
              "filename": "info",
              "seq": 5,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "info",
                  "seq": 5
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "info",
                  "filename": "info.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/info",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "convert",
              "filename": "convert",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convert",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Convert a list of points",
                  "filename": "Convert a list of points.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/convert",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"fromCRS\": \"{\",\n  \"points\": [\n    {\n      \"x\": -61.04340628871454,\n      \"y\": 10.673103179456877,\n      \"z\": 0\n    }\n  ],\n  \"toCRS\": \"{\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Convert a list of points",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "v3",
          "filename": "v3",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v3",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "convertBinGrid",
              "filename": "convertBinGrid",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convertBinGrid",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "CRS Convert service is an OSDU platform standard method for QC and conversion of Bin Grids, associated in particular with ingested seismic volumes, that describe the `real world` (Easting, Northing) of bin grid centers at (inline, crossline) local coordin",
                  "filename": "CRS Convert service is an OSDU platform standard method for QC and conversion of Bin Grids, associated in particular with ingested seismic volumes, that describe the `real world` (Easting, Northing) of bin grid centers at (inline, crossline) local coo.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/convertBinGrid",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"inBinGrid\": {\n    \"ABCDBinGridSpatialLocation\": {\n      \"AppliedOperations\": [\n        \"string\",\n        \"string\"\n      ],\n      \"AsIngestedCoordinates\": {\n        \"CoordinateReferenceSystemID\": \"string\",\n        \"features\": [\n          {\n            \"geometry\": {\n              \"coordinates\": [\n                4308.257447808489,\n                74.14577269090339\n              ],\n              \"type\": \"string\"\n            },\n            \"properties\": {\n              \"Kind\": \"string\",\n              \"PointProperties\": [\n                {\n                  \"Crossline\": 2707,\n                  \"Inline\": 8281,\n                  \"Label\": \"string\"\n                },\n                {\n                  \"Crossline\": 5708,\n                  \"Inline\": 6127,\n                  \"Label\": \"string\"\n                }\n              ]\n            },\n            \"type\": \"string\"\n          },\n          {\n            \"geometry\": {\n              \"coordinates\": [\n                4060.345371511702,\n                6694.877729458083\n              ],\n              \"type\": \"string\"\n            },\n            \"properties\": {\n              \"Kind\": \"string\",\n              \"PointProperties\": [\n                {\n                  \"Crossline\": 7566,\n                  \"Inline\": 1142,\n                  \"Label\": \"string\"\n                },\n                {\n                  \"Crossline\": 9921,\n                  \"Inline\": 7532,\n                  \"Label\": \"string\"\n                }\n              ]\n            },\n            \"type\": \"string\"\n          }\n        ],\n        \"persistableReferenceCrs\": \"string\",\n        \"type\": \"string\"\n      },\n      \"CoordinateQualityCheckDateTime\": \"string\",\n      \"CoordinateQualityCheckPerformedBy\": \"string\",\n      \"CoordinateQualityCheckRemarks\": [\n        \"string\",\n        \"string\"\n      ],\n      \"QualitativeSpatialAccuracyTypeID\": \"string\",\n      \"QuantitativeAccuracyBandID\": \"string\",\n      \"SpatialGeometryTypeID\": \"string\",\n      \"SpatialLocationCoordinatesDate\": \"string\",\n      \"SpatialParameterTypeID\": \"string\",\n      \"Wgs84Coordinates\": {\n        \"features\": [\n          {\n            \"geometry\": {\n              \"coordinates\": [\n                7507.032899162312,\n                5981.107530165447\n              ],\n              \"type\": \"string\"\n            },\n            \"properties\": {\n              \"Kind\": \"string\",\n              \"PointProperties\": [\n                {\n                  \"Crossline\": 1971,\n                  \"Inline\": 3831,\n                  \"Label\": \"string\"\n                },\n                {\n                  \"Crossline\": 2772,\n                  \"Inline\": 2367,\n                  \"Label\": \"string\"\n                }\n              ]\n            },\n            \"type\": \"string\"\n          },\n          {\n            \"geometry\": {\n              \"coordinates\": [\n                931.4159763490892,\n                4099.249809947125\n              ],\n              \"type\": \"string\"\n            },\n            \"properties\": {\n              \"Kind\": \"string\",\n              \"PointProperties\": [\n                {\n                  \"Crossline\": 3183,\n                  \"Inline\": 2614,\n                  \"Label\": \"string\"\n                },\n                {\n                  \"Crossline\": 9668,\n                  \"Inline\": 3641,\n                  \"Label\": \"string\"\n                }\n              ]\n            },\n            \"type\": \"string\"\n          }\n        ],\n        \"type\": \"string\"\n      }\n    },\n    \"BinGridDefinitionMethodTypeID\": \"string\",\n    \"BinGridName\": \"string\",\n    \"BinGridTypeID\": \"string\",\n    \"CoveragePercent\": 6636.927908988823,\n    \"P6BinGridOriginEasting\": 671.4767552542489,\n    \"P6BinGridOriginI\": 5458.387686942856,\n    \"P6BinGridOriginJ\": 4223.173620020722,\n    \"P6BinGridOriginNorthing\": 7080.181618806632,\n    \"P6BinNodeIncrementOnIaxis\": 9559,\n    \"P6BinNodeIncrementOnJaxis\": 6597,\n    \"P6BinWidthOnIaxis\": 5218.946805982584,\n    \"P6BinWidthOnJaxis\": 1762.9341481257943,\n    \"P6MapGridBearingOfBinGridJaxis\": 96.11277168163012,\n    \"P6ScaleFactorOfBinGrid\": 7533.220551951558,\n    \"P6TransformationMethod\": 987,\n    \"SourceBinGridAppID\": \"string\",\n    \"SourceBinGridID\": 5776\n  },\n  \"toCRS\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "QC check of the `squareness` of a Bin Grid defined using 4 corner points.\n + Coordinate conversion of a Bin Grid to a new CRS and `square it up` (if target CRS is same as original CRS then conversion is omitted, and the squareness test is done in the original CRS).\n + Calculate derived P6 parameters from the input 4 corners.\n + Calculate WGS 84 coordinates at the corners\n + Returns converted Bin Grid and a QC of squareness of the bin grid",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "convertTrajectory",
              "filename": "convertTrajectory",
              "seq": 5,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convertTrajectory",
                  "seq": 5
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Convert trajectory stations",
                  "filename": "Convert trajectory stations.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/convertTrajectory",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"azimuthReference\": \"TRUE_NORTH\",\n  \"inputStations\": \"string\",\n  \"method\": \"AzimuthalEquidistant\",\n  \"trajectoryCRS\": \"{\",\n  \"unitZ\": \"{\",\n  \"inputKind\": \"MD_Inclination_Azimuth\",\n  \"interpolate\": true,\n  \"referencePoint\": {\n    \"x\": -61.04340628871454,\n    \"y\": 10.673103179456877,\n    \"z\": 0\n  },\n  \"unitXY\": \"{\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Convert a list of trajectory stations, given the unit and spatial context and a reference point in 3D where MD==0. \n + Note: To get WGS 84 output the trajectoryCRS needs to be a BoundCRS (unless it is WGS 84 based)",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "convertGeoJson",
              "filename": "convertGeoJson",
              "seq": 4,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convertGeoJson",
                  "seq": 4
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Convert a GeoJSON or AnyCrsGeoJson structure",
                  "filename": "Convert a GeoJSON or AnyCrsGeoJson structure.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/convertGeoJson",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"featureCollection\": {\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"string\",\n          \"bbox\": [\n            6344.951907849261,\n            7877.534915760474\n          ],\n          \"geoJsonVariantInternal\": \"GEO_JSON\",\n          \"coordinates\": [\n            [\n              [\n                [\n                  195.05686724237026,\n                  4780.796583858495\n                ],\n                [\n                  4851.0216816570055,\n                  4491.596271246857\n                ]\n              ],\n              [\n                [\n                  4492.527587839112,\n                  5418.331044409816\n                ],\n                [\n                  4698.939477368867,\n                  7459.8694638849165\n                ]\n              ]\n            ],\n            [\n              [\n                [\n                  5248.948622824664,\n                  1352.4190440379768\n                ],\n                [\n                  7317.918348254553,\n                  83.77106793280187\n                ]\n              ],\n              [\n                [\n                  72.12012379132271,\n                  9515.802446113788\n                ],\n                [\n                  2809.039445458905,\n                  2964.6824812950513\n                ]\n              ]\n            ]\n          ]\n        },\n        \"type\": \"string\",\n        \"bbox\": [\n          4008.0787587685663,\n          9067.298052411383\n        ],\n        \"geoJsonVariantInternal\": \"GEO_JSON\",\n        \"properties\": {}\n      },\n      {\n        \"geometry\": {\n          \"type\": \"string\",\n          \"bbox\": [\n            657.2118814847239,\n            516.6056506931993\n          ],\n          \"geoJsonVariantInternal\": \"ANY_CRS_GEO_JSON\",\n          \"coordinates\": [\n            [\n              [\n                9988.611963358882,\n                9768.487340617801\n              ],\n              [\n                8838.738394656724,\n                9581.767135213244\n              ]\n            ],\n            [\n              [\n                8820.660090994868,\n                2386.232807515091\n              ],\n              [\n                5849.663571087816,\n                3964.376396881519\n              ]\n            ]\n          ]\n        },\n        \"type\": \"string\",\n        \"bbox\": [\n          5545.526070588652,\n          96.86313560793525\n        ],\n        \"geoJsonVariantInternal\": \"GEO_JSON\",\n        \"properties\": {}\n      }\n    ],\n    \"type\": \"string\",\n    \"CoordinateReferenceSystemID\": \"string\",\n    \"VerticalUnitID\": \"string\",\n    \"bbox\": [\n      9226.983954082469,\n      406.7685582568437\n    ],\n    \"geoJsonVariantInternal\": \"ANY_CRS_GEO_JSON\",\n    \"persistableReferenceCrs\": \"string\",\n    \"persistableReferenceUnitZ\": \"string\",\n    \"properties\": {}\n  },\n  \"toCRS\": \"{\",\n  \"toUnitZ\": \"{\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Convert a GeoJSON or AnyCrsGeoJson structure to a specified target CRS. GeoJSON is declared - by definition - to be in the context of WGS 84.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "convert",
              "filename": "convert",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convert",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Convert a list of points",
                  "filename": "Convert a list of points.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/convert",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"fromCRS\": \"{\",\n  \"points\": [\n    {\n      \"x\": -61.04340628871454,\n      \"y\": 10.673103179456877,\n      \"z\": 0\n    }\n  ],\n  \"toCRS\": \"{\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Convert a list of points",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "_ah",
              "filename": "_ah",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "_ah",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "liveness_check",
                  "filename": "liveness_check",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "liveness_check",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Liveness Check endpoint",
                      "filename": "Liveness Check endpoint.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/_ah/liveness_check",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "For deployment available public `/liveness_check` endpoint, which provides `CRS Conversion Service is alive` message.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "readiness_check",
                  "filename": "readiness_check",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "readiness_check",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Readiness Check endpoint",
                      "filename": "Readiness Check endpoint.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/_ah/readiness_check",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "For deployment available public `/readiness_check` endpoint, which provides `CRS Conversion Service is ready` message.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "info",
              "filename": "info",
              "seq": 6,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "info",
                  "seq": 6
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "info",
                  "filename": "info.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/info",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "v4",
          "filename": "v4",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v4",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "convertTrajectory",
              "filename": "convertTrajectory",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convertTrajectory",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Convert trajectory stations",
                  "filename": "Convert trajectory stations.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v4/convertTrajectory",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"inputStations\": [\n    {\n      \"azimuth\": 355,\n      \"dx\": 55.9,\n      \"dy\": -145.3,\n      \"dz\": 1965.6,\n      \"inclination\": 15,\n      \"md\": 2563.56\n    },\n    {\n      \"azimuth\": 355,\n      \"dx\": 55.9,\n      \"dy\": -145.3,\n      \"dz\": 1965.6,\n      \"inclination\": 15,\n      \"md\": 2563.56\n    }\n  ],\n  \"method\": \"AzimuthalEquidistant\",\n  \"trajectoryCRS\": \"{\",\n  \"unitZ\": \"{\",\n  \"MD_i\": {\n    \"md_i\": [\n      1060.174064986612,\n      8550.79294417732\n    ],\n    \"md_interval\": 1\n  },\n  \"azimuthReference\": \"TRUE_NORTH\",\n  \"inputKind\": \"MD_Inclination_Azimuth\",\n  \"interpolate\": false,\n  \"referencePoint\": {\n    \"x\": -61.04340628871454,\n    \"y\": 10.673103179456877,\n    \"z\": 0\n  },\n  \"unitMD\": \"string\",\n  \"unitXY\": \"{\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Convert a list of trajectory stations, given the unit and spatial context and a reference point in 3D where MD==0",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "convert",
              "filename": "convert",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convert",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Convert a list of points",
                  "filename": "Convert a list of points.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v4/convert",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"fromCRS\": \"{\",\n  \"points\": [\n    {\n      \"x\": -61.04340628871454,\n      \"y\": 10.673103179456877,\n      \"z\": 0\n    }\n  ],\n  \"toCRS\": \"{\",\n  \"transformation\": \"{\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Convert a list of points",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "convertGeoJson",
              "filename": "convertGeoJson",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "convertGeoJson",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Convert a GeoJSON or AnyCrsGeoJson structure",
                  "filename": "Convert a GeoJSON or AnyCrsGeoJson structure.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v4/convertGeoJson",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"featureCollection\": {\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"string\",\n          \"bbox\": [\n            7886.365914882945,\n            7416.972924104684\n          ],\n          \"geoJsonVariantInternal\": \"ANY_CRS_GEO_JSON\",\n          \"coordinates\": [\n            [\n              [\n                2717.1427406921257,\n                2197.2709947844005\n              ],\n              [\n                8119.865118342873,\n                999.0366201092804\n              ]\n            ],\n            [\n              [\n                5268.595326137882,\n                2628.1749761797523\n              ],\n              [\n                5062.688746125852,\n                3765.7503700967723\n              ]\n            ]\n          ]\n        },\n        \"type\": \"string\",\n        \"bbox\": [\n          952.7321070566741,\n          3231.559068340933\n        ],\n        \"geoJsonVariantInternal\": \"ANY_CRS_GEO_JSON\",\n        \"properties\": {}\n      },\n      {\n        \"geometry\": {\n          \"type\": \"string\",\n          \"bbox\": [\n            150.32200921803573,\n            2969.871954871003\n          ],\n          \"geoJsonVariantInternal\": \"ANY_CRS_GEO_JSON\",\n          \"coordinates\": [\n            [\n              [\n                6372.0979451842995,\n                7947.883611534915\n              ],\n              [\n                6131.513657963418,\n                7261.812362172712\n              ]\n            ],\n            [\n              [\n                988.2973091316427,\n                1043.3614328121864\n              ],\n              [\n                6661.18710720272,\n                3729.6911116299348\n              ]\n            ]\n          ]\n        },\n        \"type\": \"string\",\n        \"bbox\": [\n          3672.208860693228,\n          4100.7556876807985\n        ],\n        \"geoJsonVariantInternal\": \"GEO_JSON\",\n        \"properties\": {}\n      }\n    ],\n    \"type\": \"string\",\n    \"CoordinateReferenceSystemID\": \"string\",\n    \"VerticalUnitID\": \"string\",\n    \"bbox\": [\n      723.1164654192768,\n      7087.085755979907\n    ],\n    \"geoJsonVariantInternal\": \"GEO_JSON\",\n    \"persistableReferenceCrs\": \"string\",\n    \"persistableReferenceUnitZ\": \"string\",\n    \"properties\": {}\n  },\n  \"toCRS\": \"{\",\n  \"toUnitZ\": \"{\",\n  \"transformation\": \"osdu:reference-data--CoordinateTransformation:EPSG::15851:\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Convert a GeoJSON or AnyCrsGeoJson structure to a specified target CRS. GeoJSON is declared - by definition - to be in the context of WGS 84.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "_ah",
          "filename": "_ah",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "_ah",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "liveness_check",
              "filename": "liveness_check",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "liveness_check",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Liveness Check endpoint",
                  "filename": "Liveness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/liveness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/liveness_check` endpoint, which provides `CRS Conversion Service is alive` message.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "readiness_check",
              "filename": "readiness_check",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "readiness_check",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Readiness Check endpoint",
                  "filename": "Readiness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/readiness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/readiness_check` endpoint, which provides `CRS Conversion Service is ready` message.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Entitlements",
      "filename": "Entitlements",
      "seq": 5,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Entitlements",
          "seq": 5
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "groups",
          "filename": "groups",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "groups",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Create Group",
              "filename": "Create Group.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/groups",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"name\": \"cW0yJ9DCMq7p.4I8_0Mw03wXPR0x7{Ho7\",\n  \"description\": \";QCzqR!d,EckP:.LgkSJem!zSevK.!Xkb\\\"acjW4f0Dyr;Y7nlAwNH7oU/Ln#a%BJpzwUIv@!\\\"DfF:&UJ.XUFg2PxcTHHBsRLv1bkXh3Bck:VyyCO.JvFroK1YaK\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Create Group",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "List Groups",
              "filename": "List Groups.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/groups?roleRequired=false",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "on-behalf-of",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "roleRequired",
                    "value": "false",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "List Groups",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "{group_email}",
              "filename": "{group_email}",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{group_email}",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "members",
                  "filename": "members",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "members",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Add Member",
                      "filename": "Add Member.bru",
                      "seq": 3,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/groups/:group_email/members",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "group_email",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"role\": \"MEMBER\",\n  \"email\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Add Member",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{member_email}",
                      "filename": "{member_email}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{member_email}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete Member",
                          "filename": "Delete Member.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/groups/:group_email/members/:member_email",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "*/*",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "group_email",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              },
                              {
                                "name": "member_email",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Delete Member",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "http",
                      "name": "List Group Members",
                      "filename": "List Group Members.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/groups/:group_email/members?role=MEMBER&includeType=false",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "role",
                            "value": "MEMBER",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "includeType",
                            "value": "false",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "group_email",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "List Group Members",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "http",
                  "name": "Update Group",
                  "filename": "Update Group.bru",
                  "seq": 4,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/groups/:group_email",
                    "method": "PATCH",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "group_email",
                        "value": "string",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "[\n  {\n    \"op\": \"string\",\n    \"path\": \"string\",\n    \"value\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  {\n    \"op\": \"string\",\n    \"path\": \"string\",\n    \"value\": [\n      \"string\",\n      \"string\"\n    ]\n  }\n]",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Update Group",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "membersCount",
                  "filename": "membersCount",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "membersCount",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Count Members of a group",
                      "filename": "Count Members of a group.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/groups/:group_email/membersCount?role=MEMBER",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "role",
                            "value": "MEMBER",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "group_email",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Count Members of a group",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "http",
                  "name": "Delete Group",
                  "filename": "Delete Group.bru",
                  "seq": 3,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/groups/:group_email",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "group_email",
                        "value": "string",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Delete Group",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "all",
              "filename": "all",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "all",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "List All Partition Groups",
                  "filename": "List All Partition Groups.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/groups/all?type=NONE&cursor=string&limit=100",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "type",
                        "value": "NONE",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "cursor",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "List All Partition Groups",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "members",
          "filename": "members",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "members",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "{member_email}",
              "filename": "{member_email}",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{member_email}",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Delete Member",
                  "filename": "Delete Member.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/members/:member_email",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "member_email",
                        "value": "string",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Delete Member",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "groups",
                  "filename": "groups",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "groups",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "List Group On Behalf Of",
                      "filename": "List Group On Behalf Of.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/members/:member_email/groups?type=NONE&appid=string&roleRequired=false",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "type",
                            "value": "NONE",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "appid",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "roleRequired",
                            "value": "false",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "member_email",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "List Group On Behalf Of",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "tenant-provisioning",
          "filename": "tenant-provisioning",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "tenant-provisioning",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Initiate Tenant",
              "filename": "Initiate Tenant.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/tenant-provisioning",
                "method": "DELETE",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Initiate Tenant",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Initiate Tenant_1",
              "filename": "Initiate Tenant_1.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/tenant-provisioning",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"aliasMappings\": [\n    {\n      \"aliasId\": \"string\",\n      \"userId\": \"string\"\n    },\n    {\n      \"aliasId\": \"string\",\n      \"userId\": \"string\"\n    }\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Initiate Tenant",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "_ah",
          "filename": "_ah",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "_ah",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "readiness_check",
              "filename": "readiness_check",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "readiness_check",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Readiness Check endpoint",
                  "filename": "Readiness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/readiness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/readiness_check` endpoint.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "liveness_check",
              "filename": "liveness_check",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "liveness_check",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Liveness Check endpoint",
                  "filename": "Liveness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/liveness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/liveness_check` endpoint.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Dataset",
      "filename": "Dataset",
      "seq": 3,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Dataset",
          "seq": 3
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "getDatasetRegistry",
          "filename": "getDatasetRegistry",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "getDatasetRegistry",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Get Dataset Registries",
              "filename": "Get Dataset Registries.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/getDatasetRegistry",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"datasetRegistryIds\": [\n    \"string\"\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Get Dataset Registries. \n**Required roles:  `service.storage.creator` or `service.storage.admin` or `service.storage.viewer`.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Get Dataset Registry",
              "filename": "Get Dataset Registry.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/getDatasetRegistry?id=opendes:dataset--File.Generic:8118591ee2",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "id",
                    "value": "opendes:dataset--File.Generic:8118591ee2",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Get Dataset Registry. \n**Required roles:  `service.storage.creator` or `service.storage.admin` or `service.storage.viewer`.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "storageInstructions",
          "filename": "storageInstructions",
          "seq": 8,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "storageInstructions",
              "seq": 8
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Generate storage instructions",
              "filename": "Generate storage instructions.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/storageInstructions?kindSubType=dataset--File.Generic&expiryTime=5M",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "kindSubType",
                    "value": "dataset--File.Generic",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "expiryTime",
                    "value": "5M",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Generate storage instructions (Eg - Signed URLs) for datasets. \nRequired roles: `service.dataset.editors`.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "metadataRecord",
          "filename": "metadataRecord",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "metadataRecord",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "{id}",
              "filename": "{id}",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{id}",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "softDelete",
                  "filename": "softDelete",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "softDelete",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Delete Metadata Record by Id",
                      "filename": "Delete Metadata Record by Id.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/metadataRecord/:id/softDelete",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "id",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Delete Metadata Record by Id. \n**Required roles: `service.storage.creator` or `service.storage.admin`.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "liveness_check",
          "filename": "liveness_check",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "liveness_check",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Liveness Check endpoint",
              "filename": "Liveness Check endpoint.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/liveness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/liveness_check` endpoint verifies the operational status of the Dataset Service.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "revokeURL",
          "filename": "revokeURL",
          "seq": 7,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "revokeURL",
              "seq": 7
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Revoke previously generated URLs for Dataset",
              "filename": "Revoke previously generated URLs for Dataset.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/revokeURL?kindSubType=dataset--File.Generic",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "kindSubType",
                    "value": "dataset--File.Generic",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"key_0\": \"string\",\n  \"key_1\": \"string\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Revoke previously generated URLs associated with a specific dataset kind subtype(Eg - dataset--File.Generic). \nRequired roles: `service.dataset.admin`.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "retrievalInstructions",
          "filename": "retrievalInstructions",
          "seq": 6,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "retrievalInstructions",
              "seq": 6
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Generate retrieval instructions - multiple datasets",
              "filename": "Generate retrieval instructions - multiple datasets.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/retrievalInstructions?expiryTime=5M",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "expiryTime",
                    "value": "5M",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"datasetRegistryIds\": [\n    \"string\"\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Generate retrieval instructions (Eg - Signed URLs) for multiple datasets. \nRequired roles: `service.dataset.viewers`.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Generate retrieval instructions",
              "filename": "Generate retrieval instructions.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/retrievalInstructions?id=opendes:dataset--File.Generic:8118591ee2&expiryTime=5M",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "id",
                    "value": "opendes:dataset--File.Generic:8118591ee2",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "expiryTime",
                    "value": "5M",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Generate retrieval instructions (Eg - Signed URLs) for single dataset. \nRequired roles: `service.dataset.viewers`.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "registerDataset",
          "filename": "registerDataset",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "registerDataset",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Create or Update Dataset Registry",
              "filename": "Create or Update Dataset Registry.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/registerDataset",
                "method": "PUT",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"datasetRegistries\": [\n    {\n      \"acl\": {\n        \"owners\": [\n          \"string\",\n          \"string\"\n        ],\n        \"viewers\": [\n          \"string\",\n          \"string\"\n        ]\n      },\n      \"data\": {\n        \"key_0\": {},\n        \"key_1\": {},\n        \"key_2\": {}\n      },\n      \"ancestry\": {\n        \"parents\": [\n          \"string\"\n        ]\n      },\n      \"createTime\": \"string\",\n      \"createUser\": \"string\",\n      \"id\": \"ZZG91.:3k0bV9H:Fw_kJt\",\n      \"kind\": \"string\",\n      \"legal\": {\n        \"otherRelevantDataCountries\": [\n          \"string\"\n        ],\n        \"legaltags\": [\n          \"string\"\n        ],\n        \"status\": \"compliant\"\n      },\n      \"meta\": [\n        {\n          \"key_0\": {},\n          \"key_1\": {}\n        },\n        {\n          \"key_0\": {},\n          \"key_1\": {},\n          \"key_2\": {}\n        }\n      ],\n      \"modifyTime\": \"string\",\n      \"modifyUser\": \"string\",\n      \"tags\": {\n        \"key_0\": \"string\"\n      },\n      \"version\": 9721\n    }\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Create or Update Dataset Registry. \n**Required roles: `service.storage.creator` or `service.storage.admin`.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Geospatial Consumption Zone",
      "filename": "Geospatial Consumption Zone",
      "seq": 7,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Geospatial Consumption Zone",
          "seq": 7
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "Authentication",
          "filename": "Authentication",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "docs": "Optional: Only use if `mode` is set to `basic` in the `koop-config.json` file or if `{AUTH_MODE}` environment variable is `basic`.",
            "meta": {
              "name": "Authentication",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Authenticate (GET)",
              "filename": "Authenticate (GET).bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/tokens?username=username&password=password",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "username",
                    "value": "username",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "password",
                    "value": "password",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "res": "var responseData = res.getBody();\nvar token = responseData.token;\nif (token) {\n    bru.setVar(\"GCZ_ACCESS_TOKEN\", token);\n}"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Authenticate (POST)",
              "filename": "Authenticate (POST).bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/tokens",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"username\": \"username\",\n    \"password\": \"password\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "res": "var responseData = res.getBody();\nvar token = responseData.token;\nif (token) {\n    bru.setVar(\"GCZ_ACCESS_TOKEN\", token);\n}"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Ambassador",
          "filename": "Ambassador",
          "seq": 11,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Ambassador",
              "seq": 11
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Generate application.yml",
              "filename": "Generate application.yml.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{AMBASSADOR_URL}}/generateAppYaml?useLatestVersionOnly=true",
                "method": "GET",
                "headers": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "enabled": true
                  },
                  {
                    "name": "data-partition-id",
                    "value": "opendes",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "useLatestVersionOnly",
                    "value": "true",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "res": "//Fixed syntax \ntest(\"Response status code is 401\", function () {\n  expect(res.getStatus()).to.equal(401);\n});\ntest(\"Response content type is XML\", function () {\n  expect(res.getHeader(\"Content-Type\")).to.include(\"text/xml\");\n});"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Get the number of records currently residing within the Ignite Cluster by-kind.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Generate koopConfig.json",
              "filename": "Generate koopConfig.json.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{AMBASSADOR_URL}}/generateKoopConfig?useLatestVersionOnly=true",
                "method": "GET",
                "headers": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "enabled": true
                  },
                  {
                    "name": "data-partition-id",
                    "value": "opendes",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "useLatestVersionOnly",
                    "value": "true",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "res": "//Fixed syntax \ntest(\"Response status code is 401\", function () {\n  expect(res.getStatus()).to.equal(401);\n});\ntest(\"Response content type is XML\", function () {\n  expect(res.getHeader(\"Content-Type\")).to.include(\"text/xml\");\n});"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Get the number of records currently residing within the Ignite Cluster by-kind.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "GET Cache Size",
              "filename": "GET Cache Size.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{AMBASSADOR_URL}}/cacheSize?kind=osdu:wks:master-data--Wellbore:1.0.0",
                "method": "GET",
                "headers": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "enabled": true
                  },
                  {
                    "name": "data-partition-id",
                    "value": "opendes",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "kind",
                    "value": "osdu:wks:master-data--Wellbore:1.0.0",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "kind",
                    "value": "osdu:wks:master-data--SeismicAcquisitionSurvey:1.0.0",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Get the number of records currently residing within the Ignite Cluster by-kind.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "GET Kind Info",
              "filename": "GET Kind Info.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{AMBASSADOR_URL}}/getAvailableKinds",
                "method": "GET",
                "headers": [
                  {
                    "name": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "enabled": true
                  },
                  {
                    "name": "data-partition-id",
                    "value": "opendes",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "res": "//Fixed syntax \ntest(\"Response status code is 401\", function () {\n  expect(res.getStatus()).to.equal(401);\n});\ntest(\"Response content type is XML\", function () {\n  expect(res.getHeader(\"Content-Type\")).to.include(\"text/xml\");\n});"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Get the number of records currently residing within the Ignite Cluster by-kind.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "GET Tranformer Config",
              "filename": "GET Tranformer Config.bru",
              "seq": 6,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "http://",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "UPDATE Cache",
              "filename": "UPDATE Cache.bru",
              "seq": 5,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{AMBASSADOR_URL}}/updateCache?kind=osdu:wks:master-data--Well:1.0.0",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "opendes",
                    "enabled": true
                  },
                  {
                    "name": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "kind",
                    "value": "osdu:wks:master-data--Well:1.0.0",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "kind",
                    "value": "osdu:wks:master-data--Wellbore:1.0.0",
                    "type": "query",
                    "enabled": false
                  },
                  {
                    "name": "kind",
                    "value": "osdu:wks:master-data--SeismicAcquisitionSurvey:1.0.0",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Manually perform an update of an Ignite Cache on demand. Simply provide the kind name in the query parameters.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Provider Metadata",
          "filename": "Provider Metadata",
          "seq": 10,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Provider Metadata",
              "seq": 10
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Get Layer Definitions",
              "filename": "Get Layer Definitions.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/FeatureServer/layers/info",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Get Service Definition",
              "filename": "Get Service Definition.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Seismic 2D LineStrings",
          "filename": "Seismic 2D LineStrings",
          "seq": 6,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Seismic 2D LineStrings",
              "seq": 6
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Seismic 2D LineStrings - attribute query examples",
              "filename": "Seismic 2D LineStrings - attribute query examples.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/4/query?where=Operator LIKE '%BP%'",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "where",
                    "value": "Operator LIKE '%BP%'",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Seismic 2D LineStrings",
              "filename": "Seismic 2D LineStrings.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/4/query",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Seismic 2D LiveTrace",
          "filename": "Seismic 2D LiveTrace",
          "seq": 7,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Seismic 2D LiveTrace",
              "seq": 7
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Seismic 2D LiveTrace - attribute query examples",
              "filename": "Seismic 2D LiveTrace - attribute query examples.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/11/query?where=id= 'opendes:work-product-component--SeismicTraceData:BOEM_2D_WTS88-170A'",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "where",
                    "value": "id= 'opendes:work-product-component--SeismicTraceData:BOEM_2D_WTS88-170A'",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Seismic 2D LiveTrace",
              "filename": "Seismic 2D LiveTrace.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/11/query",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Wellbore Points",
          "filename": "Wellbore Points",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Wellbore Points",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Wellbore Points - attribute query examples",
              "filename": "Wellbore Points - attribute query examples.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/2/query?where=FacilityName='8685'",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "where",
                    "value": "FacilityName='8685'",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "where",
                    "value": "VerticalMeasurement < 500",
                    "type": "query",
                    "enabled": false
                  },
                  {
                    "name": "where",
                    "value": "FacilityName LIKE '%7'",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Wellbore Points - geometry query examples",
              "filename": "Wellbore Points - geometry query examples.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/2/query?geometry=POLYGON((3.2418251037597683 52.35673181910107,3.903408050537109 51.53192110488337,5.53487777709961 52.5782276438581,3.8986015319824214 52.58730209092738,3.2418251037597683 52.35673181910107))&geometryType=wkt",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "geometry",
                    "value": "POLYGON((3.2418251037597683 52.35673181910107,3.903408050537109 51.53192110488337,5.53487777709961 52.5782276438581,3.8986015319824214 52.58730209092738,3.2418251037597683 52.35673181910107))",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "geometryType",
                    "value": "wkt",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Wellbore Points - other request parameters",
              "filename": "Wellbore Points - other request parameters.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/2/query",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "resultRecordCount",
                    "value": "25",
                    "type": "query",
                    "enabled": false
                  },
                  {
                    "name": "returnCountOnly",
                    "value": "true",
                    "type": "query",
                    "enabled": false
                  },
                  {
                    "name": "resultOffset",
                    "value": "10",
                    "type": "query",
                    "enabled": false
                  },
                  {
                    "name": "f",
                    "value": "geojson",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Wellbore Points",
              "filename": "Wellbore Points.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/2/query",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "WellLog Curve",
          "filename": "WellLog Curve",
          "seq": 9,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "WellLog Curve",
              "seq": 9
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Welllog Curve",
              "filename": "Welllog Curve.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/13/query",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Sesimic 3D Live Trace",
          "filename": "Sesimic 3D Live Trace",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Sesimic 3D Live Trace",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Seismic 3D Live Trace - attribute query example",
              "filename": "Seismic 3D Live Trace - attribute query example.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/7/query?where=Name='OSDU_SEGY'",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "where",
                    "value": "Name='OSDU_SEGY'",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Seismic 3D Live Trace",
              "filename": "Seismic 3D Live Trace.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/7/query",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Wellmore Marker",
          "filename": "Wellmore Marker",
          "seq": 8,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Wellmore Marker",
              "seq": 8
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Wellbore Marker",
              "filename": "Wellbore Marker.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/12/query",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Well Points",
          "filename": "Well Points",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Well Points",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Well Points - attribute query examples",
              "filename": "Well Points - attribute query examples.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/1/query?where=FacilityName='SZW-203'",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "where",
                    "value": "FacilityName='SZW-203'",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "where",
                    "value": "Source='TNO'",
                    "type": "query",
                    "enabled": false
                  },
                  {
                    "name": "where",
                    "value": "FacilityName LIKE 'SZW%'",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Well Points - geometry query examples",
              "filename": "Well Points - geometry query examples.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/1/query?geometry=POLYGON((3.2418251037597683 52.35673181910107,3.903408050537109 51.53192110488337,5.53487777709961 52.5782276438581,3.8986015319824214 52.58730209092738,3.2418251037597683 52.35673181910107))&geometryType=wkt",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "geometry",
                    "value": "POLYGON((3.2418251037597683 52.35673181910107,3.903408050537109 51.53192110488337,5.53487777709961 52.5782276438581,3.8986015319824214 52.58730209092738,3.2418251037597683 52.35673181910107))",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "geometryType",
                    "value": "wkt",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Well Points - other request parameters",
              "filename": "Well Points - other request parameters.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/1/query",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "resultRecordCount",
                    "value": "25",
                    "type": "query",
                    "enabled": false
                  },
                  {
                    "name": "returnCountOnly",
                    "value": "true",
                    "type": "query",
                    "enabled": false
                  },
                  {
                    "name": "resultOffset",
                    "value": "10",
                    "type": "query",
                    "enabled": false
                  },
                  {
                    "name": "f",
                    "value": "geojson",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Well Points",
              "filename": "Well Points.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/1/query?f=geoJSON",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "f",
                    "value": "geoJSON",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Seismic 3D Polygons",
          "filename": "Seismic 3D Polygons",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Seismic 3D Polygons",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Seismic 3D Polygons - attribute query examples",
              "filename": "Seismic 3D Polygons - attribute query examples.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/3/query?where=Operator = 'osdu:master-data--Organisation:NEO:'",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "where",
                    "value": "Operator = 'osdu:master-data--Organisation:NEO:'",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "where",
                    "value": "ContractorOrganisationID LIKE '%NAM%'",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Seismic 3D Polygons",
              "filename": "Seismic 3D Polygons.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{PROVIDER_URL}}/rest/services/gcz/FeatureServer/3/query",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "EDS DDMS",
      "filename": "EDS DDMS",
      "seq": 4,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "EDS DDMS",
          "seq": 4
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "info",
              "filename": "info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "health",
          "filename": "health",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "health",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "liveness_check",
              "filename": "liveness_check",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "liveness_check",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Liveness Check endpoint",
                  "filename": "Liveness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/health/liveness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/liveness_check` endpoint, which provides `External Data Sources Data Management Service is alive` message.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "readiness_check",
              "filename": "readiness_check",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "readiness_check",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Readiness Check endpoint",
                  "filename": "Readiness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/health/readiness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/readiness_check` endpoint, which provides `External Data Sources Data Management Service is ready` message.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "retrievalInstructions",
          "filename": "retrievalInstructions",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "retrievalInstructions",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Get Retrieval Instructions",
              "filename": "Get Retrieval Instructions.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/retrievalInstructions",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"datasetRegistryIds\": [\n    \"string\",\n    \"string\"\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "The API returns a list of external retrieval instructions from external dataset service/wrapper Allowed roles: service.eds.user.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Indexer",
      "filename": "Indexer",
      "seq": 8,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Indexer",
          "seq": 8
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "index",
          "filename": "index",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "index",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Delete Index for the given kind",
              "filename": "Delete Index for the given kind.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/index?kind=tenant1:public:well:1.0.2",
                "method": "DELETE",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "kind",
                    "value": "tenant1:public:well:1.0.2",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Delete Index for the given kind. Required roles: `users.datalake.ops`",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "reindex",
          "filename": "reindex",
          "seq": 6,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "reindex",
              "seq": 6
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Full Re-index by data partition",
              "filename": "Full Re-index by data partition.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/reindex?force_clean=false",
                "method": "PATCH",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "force_clean",
                    "value": "false",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "This API allows users to re-index an entire partition without re-ingesting the records via storage API.Required roles: `users.datalake.ops`",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Re-index given 'kind'",
              "filename": "Re-index given 'kind'.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/reindex?force_clean=false",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "force_clean",
                    "value": "false",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"cursor\": \"string\",\n  \"kind\": \"string\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "This API allows users to re-index a 'kind' without re-ingesting the records via storage API. Required roles: `service.search.admin`",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "records",
              "filename": "records",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "records",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Re-index given records",
                  "filename": "Re-index given records.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/reindex/records",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"recordIds\": [\n    \"string\"\n  ]\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "This API allows users to re-index the given records by providing record ids without re-ingesting the records via storage API. Required roles: `service.search.admin`",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "readiness_check",
          "filename": "readiness_check",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "readiness_check",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Readiness Check endpoint",
              "filename": "Readiness Check endpoint.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/readiness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/readiness_check` endpoint.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "liveness_check",
          "filename": "liveness_check",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "liveness_check",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Liveness Check endpoint",
              "filename": "Liveness Check endpoint.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/liveness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/liveness_check` endpoint.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "partitions",
          "filename": "partitions",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "partitions",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "provision",
              "filename": "provision",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "provision",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Provision partition",
                  "filename": "Provision partition.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/partitions/provision",
                    "method": "PUT",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Provision partition. Required roles: `users.datalake.ops`",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "File",
      "filename": "File",
      "seq": 6,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "File",
          "seq": 6
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "v2",
          "filename": "v2",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v2",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "readiness_check",
              "filename": "readiness_check",
              "seq": 4,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "readiness_check",
                  "seq": 4
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Readiness Check endpoint",
                  "filename": "Readiness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/readiness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/readiness_check` endpoint.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "files",
              "filename": "files",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "files",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "{id}",
                  "filename": "{id}",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{id}",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "downloadURL",
                      "filename": "downloadURL",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "downloadURL",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Gets a URL to download the file",
                          "filename": "Gets a URL to download the file.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v2/files/:id/downloadURL?expiryTime=5M",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "*/*",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "expiryTime",
                                "value": "5M",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Gets a URL for downloading the file associated with the unique `id`.By default, the download URL is valid for `1 Hour` and it is `7 Days` maximum.<p> **Required roles**: `service.file.viewers`. Users added to groups `users.datalake.viewers`,`users.datalake.editors`, `users.datalake.admins`, `users.datalake.ops` would be added to group `service.file.viewers` by default.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "metadata",
                      "filename": "metadata",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "metadata",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Deletes metadata record & file associated with that record for the given id",
                          "filename": "Deletes metadata record & file associated with that record for the given id.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v2/files/:id/metadata",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "*/*",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Deletes the File metadata record identified by the given id and file associated with that metadata record. <p> **Required roles**: `users.datalake.editors`  or `users.datalake.admins`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Gets metadata record for the given id",
                          "filename": "Gets metadata record for the given id.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v2/files/:id/metadata",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "*/*",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Gets the latest version of File metadata record identified by the given id. <p> **Required roles**: `service.file.editors`. Users added to groups `users.datalake.editors`, `users.datalake.admins`, `users.datalake.ops` would be added to group `service.file.editors` by default.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "metadata",
                  "filename": "metadata",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "metadata",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Creates a metadata for a file",
                      "filename": "Creates a metadata for a file.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/files/metadata",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"acl\": {\n    \"owners\": [\n      \"string\",\n      \"string\"\n    ],\n    \"viewers\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  \"data\": {\n    \"DatasetProperties\": {\n      \"FileSourceInfo\": {\n        \"Checksum\": \"E32}\",\n        \"ChecksumAlgorithm\": \"string\",\n        \"EncodingFormatTypeID\": \"srn:<namespace>:reference-data\\\\/EncodingFormatType:A&R{w8)[p:886012\",\n        \"FileSize\": \"string\",\n        \"FileSource\": \"string\",\n        \"Name\": \"string\",\n        \"PreloadFileCreateDate\": \"string\",\n        \"PreloadFileCreateUser\": \"string\",\n        \"PreloadFileModifyDate\": \"string\",\n        \"PreloadFileModifyUser\": \"string\",\n        \"PreloadFilePath\": \"string\"\n      }\n    },\n    \"Checksum\": \"232}\",\n    \"Description\": \"string\",\n    \"EncodingFormatTypeID\": \"srn:<namespace>:reference-data\\\\/EncodingFormatType:4:413613546\",\n    \"Endian\": \"BIG\",\n    \"ExistenceKind\": \"string\",\n    \"ExtensionProperties\": {\n      \"key_0\": {},\n      \"key_1\": {},\n      \"key_2\": {},\n      \"key_3\": {}\n    },\n    \"Name\": \"string\",\n    \"ResourceCurationStatus\": \"string\",\n    \"ResourceHomeRegionID\": \"string\",\n    \"ResourceHostRegionIDs\": [\n      \"string\",\n      \"string\"\n    ],\n    \"ResourceLifecycleStatus\": \"string\",\n    \"ResourceSecurityClassification\": \"string\",\n    \"SchemaFormatTypeID\": \"srn:<namespace>:reference-data\\\\/SchemaFormatType:&9J;~MnFx{Y:60411823\",\n    \"Source\": \"string\",\n    \"TotalSize\": \"815\"\n  },\n  \"kind\": \"osdu:wks:dataset--File.Generic:1.0.0\",\n  \"legal\": {\n    \"legaltags\": [\n      \"string\"\n    ],\n    \"otherRelevantDataCountries\": [\n      \"string\"\n    ],\n    \"status\": \"compliant\"\n  },\n  \"ancestry\": {\n    \"parents\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  \"id\": \"string\",\n  \"meta\": [\n    {\n      \"key_0\": {}\n    },\n    {\n      \"key_0\": {},\n      \"key_1\": {},\n      \"key_2\": {},\n      \"key_3\": {}\n    }\n  ],\n  \"tags\": {\n    \"key_0\": \"string\",\n    \"key_1\": \"string\"\n  }\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via `FileSource` provided in the request body. <p> If `FileSource` attribute is missing in the request body or there is no file present, then the request fails with an error. </p><p> When metadata is successfully updated in the system, it returns the `Id` of the file metadata record. </p><p> **Required roles**: `service.file.editors`. Users added to groups `users.datalake.editors`, `users.datalake.admins`, `users.datalake.ops` would be added to group `service.file.editors` by default.</p>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "uploadURL",
                  "filename": "uploadURL",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "uploadURL",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get a location in Landing Zone to upload a file.",
                      "filename": "Get a location in Landing Zone to upload a file.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/files/uploadURL?expiryTime=5M",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "expiryTime",
                            "value": "5M",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Gets a temporary signed URL to upload a file (Service does not upload the file by itself, User needs to use this URL to upload the file). The generated URL is time bound and by default expires by `1 Hour` and it is `7 Days` maximum. <p> User will receive a FileSource in the response.This is the relative path where the uploaded file will persist. Once the file is uploaded, FileSource can then be used to post metadata of the file.</p> <p> **Required roles**: `service.file.editors`. Users added to groups `users.datalake.editors`, `users.datalake.admins`, `users.datalake.ops` would be added to group `service.file.editors` by default.</p>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "liveness_check",
              "filename": "liveness_check",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "liveness_check",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Liveness Check endpoint",
                  "filename": "Liveness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/liveness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/liveness_check` endpoint.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "info",
              "filename": "info",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "info",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Version info",
                  "filename": "Version info.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/info",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Partition",
      "filename": "Partition",
      "seq": 11,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Partition",
          "seq": 11
        }
      },
      "items": [
        {
          "type": "http",
          "name": "Liveness Check endpoint",
          "filename": "Liveness Check endpoint.bru",
          "seq": 2,
          "settings": {
            "encodeUrl": true
          },
          "tags": [],
          "request": {
            "url": "{{baseUrl}}/liveness_check",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "*/*",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "For deployment available public `/liveness_check` endpoint.",
            "auth": {
              "mode": "inherit"
            }
          }
        },
        {
          "type": "http",
          "name": "Version info",
          "filename": "Version info.bru",
          "seq": 3,
          "settings": {
            "encodeUrl": true
          },
          "tags": [],
          "request": {
            "url": "{{baseUrl}}/info",
            "method": "GET",
            "headers": [
              {
                "name": "Accept",
                "value": "application/json",
                "enabled": true
              }
            ],
            "params": [],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
            "auth": {
              "mode": "inherit"
            }
          }
        },
        {
          "type": "folder",
          "name": "partitions",
          "filename": "partitions",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "partitions",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Get Partition Info",
              "filename": "Get Partition Info.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/partitions/:partitionId",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "partitionId",
                    "value": "string",
                    "type": "path",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Get all properties and their values for a given data partition id",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "List all Partitions",
              "filename": "List all Partitions.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/partitions",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Returns all existing data partitions",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Notification",
      "filename": "Notification",
      "seq": 10,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Notification",
          "seq": 10
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "_ah",
          "filename": "_ah",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "_ah",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "warmup",
              "filename": "warmup",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "warmup",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Liveness Check endpoint",
                  "filename": "Liveness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/warmup",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/_ah` endpoint.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "push-handlers",
          "filename": "push-handlers",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "push-handlers",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "records-changed",
              "filename": "records-changed",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "records-changed",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Record Changed",
                  "filename": "Record Changed.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/push-handlers/records-changed",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Record Changed. Required Roles: `users.datalake.ops` or `notification.pubsub`",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Legal",
      "filename": "Legal",
      "seq": 9,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Legal",
          "seq": 9
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "jobs",
          "filename": "jobs",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "jobs",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "updateLegalTagStatus",
              "filename": "updateLegalTagStatus",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "updateLegalTagStatus",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Check LegalTag Compliance Job Status",
                  "filename": "Check LegalTag Compliance Job Status.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/jobs/updateLegalTagStatus",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "To check LegalTag Compliance Job Status.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "legaltags",
          "filename": "legaltags",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "legaltags",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Creates the LegalTag for the given `name`.",
              "filename": "Creates the LegalTag for the given `name`.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/legaltags",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"description\": \"string\",\n  \"name\": \"OSDU-Private-EHCData\",\n  \"properties\": {\n    \"contractId\": \"string\",\n    \"countryOfOrigin\": [\n      \"string\",\n      \"string\"\n    ],\n    \"dataType\": \"string\",\n    \"expirationDate\": \"1958-03-29T20:40:52.754Z\",\n    \"exportClassification\": \"string\",\n    \"extensionProperties\": {\n      \"key_0\": {},\n      \"key_1\": {},\n      \"key_2\": {}\n    },\n    \"originator\": \"string\",\n    \"personalData\": \"string\",\n    \"securityClassification\": \"string\"\n  }\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "This allows for the creation of your LegalTag. There can only be 1 LegalTag per `name`. A LegalTag must be created before you can start ingesting data for that name.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Gets all LegalTags.",
              "filename": "Gets all LegalTags.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/legaltags?valid=true",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "valid",
                    "value": "true",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "This allows for the retrieval of all LegalTags.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Updates the LegalTag for the given `name`.",
              "filename": "Updates the LegalTag for the given `name`.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/legaltags",
                "method": "PUT",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"contractId\": \"No Contract Related\",\n  \"description\": \"string\",\n  \"expirationDate\": \"2015-05-22T00:20:27.857Z\",\n  \"extensionProperties\": {\n    \"key_0\": {},\n    \"key_1\": {}\n  },\n  \"name\": \"OSDU-Private-EHCData\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "This allows to update certain properties of your LegalTag using the `name` associated with it.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "{name}",
              "filename": "{name}",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{name}",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Deletes a LegalTag for the given `name`.",
                  "filename": "Deletes a LegalTag for the given `name`.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/legaltags/:name",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "name",
                        "value": "OSDU-Private-USA-EHC",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "This allows for the deletion of your LegalTag with the given `name`. This makes the given legaltags data invalid.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Gets a LegalTag for the given `name`.",
                  "filename": "Gets a LegalTag for the given `name`.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/legaltags/:name",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "name",
                        "value": "OSDU-Private-USA-EHC",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "This allows for the retrieval of your LegalTag using the `name` associated with it.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "legaltags:query",
          "filename": "legaltags-query",
          "seq": 7,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "legaltags:query",
              "seq": 7
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Retrieves the legaltags which matches query criteria or none if there is no match.",
              "filename": "Retrieves the legaltags which matches query criteria or none if there is no match.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/legaltags:query?valid=true",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "valid",
                    "value": "true",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"queryList\": [\n    \"string\",\n    \"string\"\n  ],\n  \"limit\": 5383,\n  \"operatorList\": [\n    \"string\",\n    \"string\"\n  ],\n  \"sortBy\": \"string\",\n  \"sortOrder\": \"string\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "This allows query for specific attributes of legaltags including the attributes of extensionproperties. See [https://osdu.pages.opengroup.org/platform/security-and-compliance/legal/api/#legal-query](https://osdu.pages.opengroup.org/platform/security-and-compliance/legal/api/#legal-query) for more details.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "_ah",
          "filename": "_ah",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "_ah",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "readiness_check",
              "filename": "readiness_check",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "readiness_check",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Readiness Check endpoint",
                  "filename": "Readiness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/readiness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/readiness_check` endpoint, which provides `Legal service is ready` message.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "liveness_check",
              "filename": "liveness_check",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "liveness_check",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Liveness Check endpoint",
                  "filename": "Liveness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/liveness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/liveness_check` endpoint, which provides `Legal service is alive` message.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "legaltags:batchRetrieve",
          "filename": "legaltags-batchRetrieve",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "legaltags:batchRetrieve",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Retrieves the LegalTags for the given `names`.",
              "filename": "Retrieves the LegalTags for the given `names`.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/legaltags:batchRetrieve",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"names\": [\n    \"string\"\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "This allows for the retrieval of your LegalTags using the `name` associated with it. A maximum of 25 can be retrieved at once.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "legaltags:properties",
          "filename": "legaltags-properties",
          "seq": 6,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "legaltags:properties",
              "seq": 6
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Gets LegalTag property values.",
              "filename": "Gets LegalTag property values.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/legaltags:properties",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "This allows for the retrieval of allowed values for LegalTag properties.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "legaltags:validate",
          "filename": "legaltags-validate",
          "seq": 8,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "legaltags:validate",
              "seq": 8
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Retrieves the invalid LegalTag names with reasons for the given `names`.",
              "filename": "Retrieves the invalid LegalTag names with reasons for the given `names`.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/legaltags:validate",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"names\": [\n    \"string\"\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Rock & Fluid Sample DDMS",
      "filename": "Rock & Fluid Sample DDMS",
      "seq": 15,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Rock & Fluid Sample DDMS",
          "seq": 15
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "metrics",
          "filename": "metrics",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "metrics",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Metrics",
              "filename": "Metrics.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/metrics",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Endpoint that serves Prometheus metrics.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "api",
          "filename": "api",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "api",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "rafs-ddms",
              "filename": "rafs-ddms",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "rafs-ddms",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "info",
                  "filename": "info",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "info",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Info",
                      "filename": "Get Info.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/api/rafs-ddms/info",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get application info.\n\n:return: application info\n:rtype: InfoResponse",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "v2",
                  "filename": "v2",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "v2",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "samplesanalysis",
                      "filename": "samplesanalysis",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "samplesanalysis",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Post Records",
                          "filename": "Post Records.bru",
                          "seq": 5,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis",
                            "method": "POST",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "opendes",
                                "enabled": true
                              },
                              {
                                "name": "Content-Type",
                                "value": "application/json",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "json",
                              "json": "[\n  {\n    \"id\": \"namespace:work-product-component--SamplesAnalysis:SamplesAnalysisExample\",\n    \"kind\": \"osdu:wks:work-product-component--SamplesAnalysis:1.0.0\",\n    \"acl\": {\n      \"viewers\": [\n        \"someone@company.com\"\n      ],\n      \"owners\": [\n        \"someone@company.com\"\n      ]\n    },\n    \"legal\": {\n      \"legaltags\": [\n        \"Example legaltags\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"tags\": {\n      \"NameOfKey\": \"String value\"\n    },\n    \"data\": {\n      \"SampleIDs\": [\n        \"namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11:\"\n      ],\n      \"ReportSampleIdentifiers\": [\n        \"88Y\"\n      ],\n      \"AnalysisDate\": \"2022-12-16\",\n      \"LaboratoryIDs\": [\n        \"namespace:master-data--Organisation:TBD_Lab_1:\"\n      ],\n      \"LaboratoryNames\": [\n        \"TestLab\"\n      ],\n      \"LaboratoryAnalysts\": [\n        \"Analyst Contact 1\"\n      ],\n      \"Remarks\": [\n        {\n          \"Remark\": \"Test was successfully conducted\",\n          \"RemarkSequenceNumber\": 1,\n          \"RemarkSource\": \"Lab\",\n          \"RemarkDate\": \"2023-10-23\"\n        }\n      ],\n      \"DateAnalyzed\": \"2022-12-01\",\n      \"DatePublished\": \"2022-12-16\",\n      \"ParentSamplesAnalysesReports\": [\n        {\n          \"ParentSamplesAnalysesReportID\": \"namespace:work-product-component--SamplesAnalysesReport:SamplesAnalysesReport:\"\n        }\n      ],\n      \"SampleAnalysisTypeIDs\": [\n        \"namespace:reference-data--SampleAnalysisType:CapillaryPressure.Centrifuge:\"\n      ],\n      \"SamplesAnalysisCategoryTagIDs\": [\n        \"namespace:reference-data--SamplesAnalysisCategoryTag:GreenCompany.SCAL:\"\n      ],\n      \"DDMSDatasets\": []\n    }\n  }\n]",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Create or update `SamplesAnalysis` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "{analysistype}",
                          "filename": "{analysistype}",
                          "seq": 3,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{analysistype}",
                              "seq": 3
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "data",
                              "filename": "data",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "data",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "schema",
                                  "filename": "schema",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "schema",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Get Content Schema",
                                      "filename": "Get Content Schema.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/:analysistype/data/schema",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "opendes",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "analysistype",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Get the (`content schema`) for a given `{analysistype}`. <br><br>                Use the `Accept` request header to specify content schema version                     (example header `Accept: application/json;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "{analysis_type}",
                          "filename": "{analysis_type}",
                          "seq": 4,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{analysis_type}",
                              "seq": 4
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "search",
                              "filename": "search",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "search",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "data",
                                  "filename": "data",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "data",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Get Search Data",
                                      "filename": "Get Search Data.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/:analysis_type/search/data?columns_filter=PropertyX,PropertyY,PropertyZ&rows_filter=PropertyX[.PropertyXFieldA],gt,4000&columns_aggregation=PropertyX[.PropertyXFieldA],avg&page_limit=100&offset=100",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "opendes",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "columns_filter",
                                            "value": "PropertyX,PropertyY,PropertyZ",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "rows_filter",
                                            "value": "PropertyX[.PropertyXFieldA],gt,4000",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "columns_aggregation",
                                            "value": "PropertyX[.PropertyXFieldA],avg",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "page_limit",
                                            "value": "100",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "offset",
                                            "value": "100",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "analysis_type",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Get the (`queried`) bulk data from every `{analysis_type}` found in search service. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response. <br><br>            Use `offset`, `page_limit` query parameters to control response data size.                 The `page_limit` and `total_size (found in response)` refers to the number of parquet files read.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "type": "http",
                                  "name": "Get Search",
                                  "filename": "Get Search.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/:analysis_type/search?columns_filter=PropertyX,PropertyY,PropertyZ&rows_filter=PropertyX[.PropertyXFieldA],gt,4000&columns_aggregation=PropertyX[.PropertyXFieldA],avg&page_limit=1000&offset=100",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "opendes",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "columns_filter",
                                        "value": "PropertyX,PropertyY,PropertyZ",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "rows_filter",
                                        "value": "PropertyX[.PropertyXFieldA],gt,4000",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "columns_aggregation",
                                        "value": "PropertyX[.PropertyXFieldA],avg",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "page_limit",
                                        "value": "1000",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "offset",
                                        "value": "100",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "analysis_type",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Get the (`samples analysis`) ids list that comply with `{query}` for given`{analysis_type}`. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response. <br><br>             Use `offset`, `page_limit` query parameters to control response data size.                 The `page_limit` and `total_size (found in response)` refers to the number of parquet files read.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "{record_id}",
                          "filename": "{record_id}",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{record_id}",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "data",
                              "filename": "data",
                              "seq": 2,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "data",
                                  "seq": 2
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "{analysis_type}",
                                  "filename": "{analysis_type}",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "{analysis_type}",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Post Data V2",
                                      "filename": "Post Data V2.bru",
                                      "seq": 2,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/:record_id/data/:analysis_type",
                                        "method": "POST",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "opendes",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Content-Type",
                                            "value": "application/json",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "record_id",
                                            "value": "mvll7qmyZAd:work-product-component--SamplesAnalysis:oc2q8fQTUad",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "analysis_type",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "json",
                                          "json": "{\n  \"columns\": [\n    \"SamplesAnalysisID\",\n    \"TestMethod\",\n    \"SalinityTestResults\",\n    \"SalinityTestSteps\"\n  ],\n  \"index\": [\n    0\n  ],\n  \"data\": [\n    [\n      \"namespace:work-product-component--SamplesAnalysis:multiple_salinity_example:\",\n      \"TestMethod\",\n      [\n        {\n          \"SampleID\": \"namespace:master-data--Sample:test_id:\",\n          \"BQv\": {\n            \"Value\": 3.5,\n            \"UnitOfMeasure\": \"namespace:reference-data--UnitOfMeasure:%25:\"\n          },\n          \"Qv\": {\n            \"Value\": 3.5,\n            \"UnitOfMeasure\": \"namespace:reference-data--UnitOfMeasure:%25:\"\n          }\n        },\n        {\n          \"SampleID\": \"namespace:master-data--Sample:test_id:\",\n          \"BQv\": {\n            \"Value\": 4.5,\n            \"UnitOfMeasure\": \"namespace:reference-data--UnitOfMeasure:%25:\"\n          },\n          \"Qv\": {\n            \"Value\": 4.5,\n            \"UnitOfMeasure\": \"namespace:reference-data--UnitOfMeasure:%25:\"\n          }\n        }\n      ],\n      [\n        {\n          \"BrineSalinity\": {\n            \"Value\": 3.5,\n            \"UnitOfMeasure\": \"namespace:reference-data--UnitOfMeasure:%25:\"\n          },\n          \"BrineConductivity\": {\n            \"Value\": 3.5,\n            \"UnitOfMeasure\": \"namespace:reference-data--UnitOfMeasure:%25:\"\n          },\n          \"CoreConductivity\": {\n            \"Value\": 3.5,\n            \"UnitOfMeasure\": \"namespace:reference-data--UnitOfMeasure:%25:\"\n          }\n        }\n      ]\n    ]\n  ]\n}",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Upload the bulk data for a given `{analysis_type}` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    },
                                    {
                                      "type": "folder",
                                      "name": "{content_id}",
                                      "filename": "{content_id}",
                                      "seq": 1,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "{content_id}",
                                          "seq": 1
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Get Data V2",
                                          "filename": "Get Data V2.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/:record_id/data/:analysis_type/:content_id?columns_filter=PropertyX,PropertyY,PropertyZ&rows_filter=PropertyX[.PropertyXFieldA],gt,4000&columns_aggregation=PropertyX[.PropertyXFieldA],avg",
                                            "method": "GET",
                                            "headers": [
                                              {
                                                "name": "data-partition-id",
                                                "value": "opendes",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "columns_filter",
                                                "value": "PropertyX,PropertyY,PropertyZ",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "rows_filter",
                                                "value": "PropertyX[.PropertyXFieldA],gt,4000",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "columns_aggregation",
                                                "value": "PropertyX[.PropertyXFieldA],avg",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "record_id",
                                                "value": "mvll7qmyZAd:work-product-component--SamplesAnalysis:oc2q8fQTUad",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "analysis_type",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "content_id",
                                                "value": "qmqobazjge:dataset--FileRGeneric:nTiGExYW",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "Get the (`latest version`) bulk data for a given `{analysis_type}` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "http",
                              "name": "Get Record",
                              "filename": "Get Record.bru",
                              "seq": 3,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/:record_id",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "opendes",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "mvll7qmyZAd:work-product-component--SamplesAnalysis:oc2q8fQTUad",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Get the latest version of `SamplesAnalysis` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Soft Delete Record",
                              "filename": "Soft Delete Record.bru",
                              "seq": 4,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/:record_id",
                                "method": "DELETE",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "opendes",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "mvll7qmyZAd:work-product-component--SamplesAnalysis:oc2q8fQTUad",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Delete the `SamplesAnalysis` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "versions",
                              "filename": "versions",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "versions",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get Record Versions",
                                  "filename": "Get Record Versions.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/:record_id/versions",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "opendes",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "mvll7qmyZAd:work-product-component--SamplesAnalysis:oc2q8fQTUad",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Get a list of `SamplesAnalysis` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "folder",
                                  "name": "{version}",
                                  "filename": "{version}",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "{version}",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Get Record Specific Version",
                                      "filename": "Get Record Specific Version.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/:record_id/versions/:version",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "opendes",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "record_id",
                                            "value": "mvll7qmyZAd:work-product-component--SamplesAnalysis:oc2q8fQTUad",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "version",
                                            "value": "2727",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Get the given version of `SamplesAnalysis` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "analysistypes",
                          "filename": "analysistypes",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "analysistypes",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get Types",
                              "filename": "Get Types.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysis/analysistypes",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "opendes",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Get available types.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "samplesanalysesreport",
                      "filename": "samplesanalysesreport",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "samplesanalysesreport",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Post Records",
                          "filename": "Post Records.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysesreport",
                            "method": "POST",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "opendes",
                                "enabled": true
                              },
                              {
                                "name": "Content-Type",
                                "value": "application/json",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "json",
                              "json": "[\n  {\n    \"id\": \"namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8\",\n    \"kind\": \"schema_authority:wks:work-product-component--SamplesAnalysesReport:1.0.0\",\n    \"version\": 15620,\n    \"acl\": {\n      \"owners\": [\n        \"someone@company.com\"\n      ],\n      \"viewers\": [\n        \"someone@company.com\"\n      ]\n    },\n    \"legal\": {\n      \"legaltags\": [\n        \"Example legaltags\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"tags\": {\n      \"NameOfKey\": \"String value\"\n    },\n    \"createTime\": \"2020-12-16T11:46:20.163Z\",\n    \"createUser\": \"some-user@some-company-cloud.com\",\n    \"modifyTime\": \"2020-12-16T11:52:24.477Z\",\n    \"modifyUser\": \"some-user@some-company-cloud.com\",\n    \"DocumentTypeID\": \"namespace:reference-data--DocumentType:SampleAnalysisReport:\",\n    \"NumberOfPages\": \"45\",\n    \"SubTitle\": \"Advanced Core Analysis Study\",\n    \"DocumentSubject\": \"SCAL Results Report (Final)\",\n    \"DatePublished\": \"10-06-2021\",\n    \"DateModified\": \"10-06-2021\",\n    \"DocumentLanguage\": \"English\",\n    \"SampleIDs\": [\n      \"namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10\",\n      \"namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11\"\n    ],\n    \"ReportSampleIdentifiers\": [\n      \"45H\",\n      \"49H\"\n    ],\n    \"SampleAnalysisTypeIDs\": [\n      \"CapillaryPressureGasOil.CentrifugeDrainageGasOil\"\n    ],\n    \"SampleAnalysisCategoryTagIDs\": [\n      \"SCAL\",\n      \"CapPressure\"\n    ],\n    \"Remarks\": [\n      {\n        \"Remark\": \"Test was successfully conducted\",\n        \"RemarkID\": \"1\",\n        \"RemarkSource\": \"Lab Manager\"\n      }\n    ]\n  }\n]",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Create or update `SamplesAnalysesReport` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "{record_id}",
                          "filename": "{record_id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{record_id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get Record",
                              "filename": "Get Record.bru",
                              "seq": 3,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysesreport/:record_id",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "opendes",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "Q_R_X6r6-WQ:work-product-component--SamplesAnalysesReport:a6A2VoQERKf",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Get the latest version of `SamplesAnalysesReport` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Soft Delete Record",
                              "filename": "Soft Delete Record.bru",
                              "seq": 4,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysesreport/:record_id",
                                "method": "DELETE",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "opendes",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "Q_R_X6r6-WQ:work-product-component--SamplesAnalysesReport:a6A2VoQERKf",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Delete the `SamplesAnalysesReport` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "source",
                              "filename": "source",
                              "seq": 2,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "source",
                                  "seq": 2
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get Source Data",
                                  "filename": "Get Source Data.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysesreport/:record_id/source?version=string",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "opendes",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "version",
                                        "value": "string",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "record_id",
                                        "value": "Q_R_X6r6-WQ:work-product-component--SamplesAnalysesReport:a6A2VoQERKf",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "versions",
                              "filename": "versions",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "versions",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get Record Versions",
                                  "filename": "Get Record Versions.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysesreport/:record_id/versions",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "opendes",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "Q_R_X6r6-WQ:work-product-component--SamplesAnalysesReport:a6A2VoQERKf",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Get a list of `SamplesAnalysesReport` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "folder",
                                  "name": "{version}",
                                  "filename": "{version}",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "{version}",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Get Record Specific Version",
                                      "filename": "Get Record Specific Version.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/api/rafs-ddms/v2/samplesanalysesreport/:record_id/versions/:version",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "opendes",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "record_id",
                                            "value": "Q_R_X6r6-WQ:work-product-component--SamplesAnalysesReport:a6A2VoQERKf",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "version",
                                            "value": "2727",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Get the given version of `SamplesAnalysesReport` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "masterdata",
                      "filename": "masterdata",
                      "seq": 3,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "masterdata",
                          "seq": 3
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Post Records",
                          "filename": "Post Records.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/api/rafs-ddms/v2/masterdata",
                            "method": "POST",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "opendes",
                                "enabled": true
                              },
                              {
                                "name": "Content-Type",
                                "value": "application/json",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "json",
                              "json": "{\n  \"id\": \"namespace:master-data--Sample:Sample_200\",\n  \"kind\": \"osdu:wks:master-data--Sample:2.0.0\",\n  \"acl\": {\n    \"owners\": [\n      \"someone@company.com\"\n    ],\n    \"viewers\": [\n      \"someone@company.com\"\n    ]\n  },\n  \"legal\": {\n    \"legaltags\": [\n      \"Example legaltags\"\n    ],\n    \"otherRelevantDataCountries\": [\n      \"US\"\n    ],\n    \"status\": \"compliant\"\n  },\n  \"tags\": {\n    \"NameOfKey\": \"String value\"\n  },\n  \"ancestry\": {\n    \"parents\": []\n  },\n  \"meta\": [],\n  \"data\": {\n    \"ResourceHomeRegionID\": \"namespace:reference-data--OSDURegion:AWSEastUSA:\",\n    \"ResourceHostRegionIDs\": [\n      \"namespace:reference-data--OSDURegion:AWSEastUSA:\"\n    ],\n    \"ResourceCurationStatus\": \"namespace:reference-data--ResourceCurationStatus:Created:\",\n    \"ResourceLifecycleStatus\": \"namespace:reference-data--ResourceLifecycleStatus:Loading:\",\n    \"ResourceSecurityClassification\": \"namespace:reference-data--ResourceSecurityClassification:Public:\",\n    \"Source\": \"Example Data Source\",\n    \"ExistenceKind\": \"namespace:reference-data--ExistenceKind:Prototype:\",\n    \"NameAliases\": [\n      {\n        \"AliasName\": \"Example AliasName\",\n        \"AliasNameTypeID\": \"namespace:reference-data--AliasNameType:RegulatoryIdentifier:\",\n        \"DefinitionOrganisationID\": \"namespace:master-data--Organisation:SomeUniqueOrganisationID:\",\n        \"EffectiveDateTime\": \"2020-02-13T09:13:15.55Z\",\n        \"TerminationDateTime\": \"2020-02-13T09:13:15.55Z\"\n      }\n    ],\n    \"GeoContexts\": [\n      {\n        \"GeoPoliticalEntityID\": \"namespace:master-data--GeoPoliticalEntity:SomeUniqueGeoPoliticalEntityID:\",\n        \"GeoTypeID\": \"namespace:reference-data--GeoPoliticalEntityType:Area:\"\n      },\n      {\n        \"BasinID\": \"namespace:master-data--Basin:SomeUniqueBasinID:\",\n        \"GeoTypeID\": \"namespace:reference-data--BasinType:ArcWrenchOceanContinent:\"\n      },\n      {\n        \"FieldID\": \"namespace:master-data--Field:SomeUniqueFieldID:\",\n        \"GeoTypeID\": \"Field\"\n      },\n      {\n        \"PlayID\": \"namespace:master-data--Play:SomeUniquePlayID:\",\n        \"GeoTypeID\": \"namespace:reference-data--PlayType:CarbonCaptureAndStorage:\"\n      },\n      {\n        \"ProspectID\": \"namespace:master-data--Prospect:SomeUniqueProspectID:\",\n        \"GeoTypeID\": \"namespace:reference-data--ProspectType:Structural.Anticline:\"\n      }\n    ],\n    \"SpatialLocation\": {\n      \"SpatialLocationCoordinatesDate\": \"2020-02-13T09:13:15.55Z\",\n      \"QuantitativeAccuracyBandID\": \"namespace:reference-data--QuantitativeAccuracyBand:Length.LessThan1m:\",\n      \"QualitativeSpatialAccuracyTypeID\": \"namespace:reference-data--QualitativeSpatialAccuracyType:Assumed:\",\n      \"CoordinateQualityCheckPerformedBy\": \"Example CoordinateQualityCheckPerformedBy\",\n      \"CoordinateQualityCheckDateTime\": \"2020-02-13T09:13:15.55Z\",\n      \"CoordinateQualityCheckRemarks\": [\n        \"Example CoordinateQualityCheckRemarks\"\n      ],\n      \"AsIngestedCoordinates\": {\n        \"type\": \"AnyCrsFeatureCollection\",\n        \"CoordinateReferenceSystemID\": \"namespace:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n        \"VerticalCoordinateReferenceSystemID\": \"namespace:reference-data--CoordinateReferenceSystem:Vertical:EPSG::5714:\",\n        \"VerticalUnitID\": \"namespace:reference-data--UnitOfMeasure:m:\",\n        \"persistableReferenceCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"OSDU\\\",\\\"code\\\":\\\"32021079\\\"},\\\"lateBoundCRS\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"32021\\\"},\\\"name\\\":\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"PROJCS[\\\\\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Lambert_Conformal_Conic\\\\\\\"],PARAMETER[\\\\\\\"False_Easting\\\\\\\",2000000.0],PARAMETER[\\\\\\\"False_Northing\\\\\\\",0.0],PARAMETER[\\\\\\\"Central_Meridian\\\\\\\",-100.5],PARAMETER[\\\\\\\"Standard_Parallel_1\\\\\\\",46.18333333333333],PARAMETER[\\\\\\\"Standard_Parallel_2\\\\\\\",47.48333333333333],PARAMETER[\\\\\\\"Latitude_Of_Origin\\\\\\\",45.66666666666666],UNIT[\\\\\\\"Foot_US\\\\\\\",0.3048006096012192],AUTHORITY[\\\\\\\"EPSG\\\\\\\",32021]]\\\"},\\\"name\\\":\\\"NAD27 * OGP-Usa Conus / North Dakota CS27 South zone [32021,15851]\\\",\\\"singleCT\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"15851\\\"},\\\"name\\\":\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",\\\"type\\\":\\\"ST\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"GEOGTRAN[\\\\\\\"NAD_1927_To_WGS_1984_79_CONUS\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],GEOGCS[\\\\\\\"GCS_WGS_1984\\\\\\\",DATUM[\\\\\\\"D_WGS_1984\\\\\\\",SPHEROID[\\\\\\\"WGS_1984\\\\\\\",6378137.0,298.257223563]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],METHOD[\\\\\\\"NADCON\\\\\\\"],PARAMETER[\\\\\\\"Dataset_conus\\\\\\\",0.0],OPERATIONACCURACY[5.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",15851]]\\\"},\\\"type\\\":\\\"EBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\"}\",\n        \"persistableReferenceVerticalCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"5714\\\"},\\\"name\\\":\\\"MSL_Height\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"VERTCS[\\\\\\\"MSL_Height\\\\\\\",VDATUM[\\\\\\\"Mean_Sea_Level\\\\\\\"],PARAMETER[\\\\\\\"Vertical_Shift\\\\\\\",0.0],PARAMETER[\\\\\\\"Direction\\\\\\\",1.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",5714]]\\\"}\",\n        \"persistableReferenceUnitZ\": \"{\\\"scaleOffset\\\":{\\\"scale\\\":1.0,\\\"offset\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"Length\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"USO\\\"}\",\n        \"features\": [\n          {\n            \"type\": \"AnyCrsFeature\",\n            \"properties\": {},\n            \"geometry\": {\n              \"type\": \"AnyCrsPoint\",\n              \"coordinates\": [\n                12345.6,\n                12345.6\n              ],\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ]\n            },\n            \"bbox\": [\n              12345.6,\n              12345.6,\n              12345.6,\n              12345.6\n            ]\n          }\n        ],\n        \"bbox\": [\n          12345.6,\n          12345.6,\n          12345.6,\n          12345.6\n        ]\n      },\n      \"Wgs84Coordinates\": {\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                12345.6,\n                12345.6\n              ],\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ]\n            },\n            \"bbox\": [\n              12345.6,\n              12345.6,\n              12345.6,\n              12345.6\n            ]\n          }\n        ],\n        \"bbox\": [\n          12345.6,\n          12345.6,\n          12345.6,\n          12345.6\n        ]\n      },\n      \"AppliedOperations\": [\n        \"conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted\",\n        \"transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed\"\n      ],\n      \"SpatialParameterTypeID\": \"namespace:reference-data--SpatialParameterType:Outline:\",\n      \"SpatialGeometryTypeID\": \"namespace:reference-data--SpatialGeometryType:Point:\"\n    },\n    \"VersionCreationReason\": \"Example VersionCreationReason\",\n    \"TechnicalAssuranceTypeID\": \"namespace:reference-data--TechnicalAssuranceType:Certified:\",\n    \"TechnicalAssurances\": [\n      {\n        \"TechnicalAssuranceTypeID\": \"namespace:reference-data--TechnicalAssuranceType:Trusted:\",\n        \"Reviewers\": [\n          {\n            \"RoleTypeID\": \"namespace:reference-data--ContactRoleType:AccountOwner:\",\n            \"DataGovernanceRoleTypeID\": \"namespace:reference-data--DataGovernanceRoleType:SME:\",\n            \"WorkflowPersonaTypeID\": \"namespace:reference-data--WorkflowPersonaType:SeismicProcessor:\",\n            \"OrganisationID\": \"namespace:master-data--Organisation:SomeUniqueOrganisationID:\",\n            \"Name\": \"John Smith\"\n          }\n        ],\n        \"AcceptableUsage\": [\n          {\n            \"WorkflowUsageTypeID\": \"namespace:reference-data--WorkflowUsageType:SeismicProcessing:\",\n            \"WorkflowPersonaTypeID\": \"namespace:reference-data--WorkflowPersonaType:SeismicProcessor:\",\n            \"DataQualityRuleSetID\": \"namespace:reference-data--DataQualityRuleSet:SeismicProcessingQCRuleSet:\",\n            \"DataQualityID\": \"namespace:work-product-component--DataQuality:6a433d16-07c8-4f4d-9ddc-5608e2ec4234:1562066077849221\",\n            \"ValueChainStatusTypeID\": \"namespace:reference-data--ValueChainStatusType:Exploration:\"\n          }\n        ],\n        \"UnacceptableUsage\": [\n          {\n            \"WorkflowUsageTypeID\": \"namespace:reference-data--WorkflowUsageType:SeismicInterpretation:\",\n            \"WorkflowPersonaTypeID\": \"namespace:reference-data--WorkflowPersonaType:SeismicInterpreter:\",\n            \"DataQualityRuleSetID\": \"namespace:reference-data--DataQualityRuleSet:SeismicInterpretationQCRuleSet:\",\n            \"DataQualityID\": \"namespace:work-product-component--DataQuality:d79bf97c-ff7c-4b82-89b5-c88520c15017:1562066009929332\",\n            \"ValueChainStatusTypeID\": \"namespace:reference-data--ValueChainStatusType:FieldDevelopment:\"\n          }\n        ],\n        \"EffectiveDate\": \"2020-02-13\",\n        \"Comment\": \"This is free form text from reviewer, e.g. restrictions on use\"\n      }\n    ],\n    \"SampleIdentifier\": \"sample1A\",\n    \"SampleName\": \"sampleA\",\n    \"SampleOriginTypeID\": \"namespace:reference-data--SampleOriginType:Synthetic:\",\n    \"SampleTypeID\": \"namespace:reference-data--SampleType:Fluid:\",\n    \"SampleDisposalInstructionID\": \"namespace:work-product-component--Document:0e6a8fdb-0a0a-56db-955a-c62204c42cb0:\",\n    \"SampleAcquisition\": {\n      \"SampleAcquisitionJobID\": \"namespace:master-data--SampleAcquisitionJob:dr23383830303032991154:\",\n      \"SampleAcquisitionDetail\": {\n        \"VerticalMeasurement\": {\n          \"EffectiveDateTime\": \"2020-02-13T09:13:15.55Z\",\n          \"VerticalMeasurement\": 12345.6,\n          \"TerminationDateTime\": \"2020-02-13T09:13:15.55Z\",\n          \"VerticalMeasurementTypeID\": \"namespace:reference-data--VerticalMeasurementType:ArbitraryPoint:\",\n          \"VerticalMeasurementPathID\": \"namespace:reference-data--VerticalMeasurementPath:MD:\",\n          \"VerticalMeasurementSourceID\": \"namespace:reference-data--VerticalMeasurementSource:DRL:\",\n          \"WellboreTVDTrajectoryID\": \"namespace:work-product-component--WellboreTrajectory:WellboreTrajectory-911bb71f-06ab-4deb-8e68-b8c9229dc76b:\",\n          \"VerticalMeasurementUnitOfMeasureID\": \"namespace:reference-data--UnitOfMeasure:m:\",\n          \"VerticalCRSID\": \"namespace:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n          \"VerticalReferenceID\": \"Example VerticalReferenceID\",\n          \"VerticalReferenceEntityID\": \"namespace:master-data--Rig:SomeUniqueRigID:\",\n          \"VerticalMeasurementDescription\": \"Example VerticalMeasurementDescription\"\n        },\n        \"TopDepth\": 10000,\n        \"BaseDepth\": 20000,\n        \"ToolKind\": \"Wireline Formation Tester\",\n        \"RunNumber\": \"22\",\n        \"WellboreID\": \"namespace:master-data--Wellbore:cz2334t678900d53844-4:\",\n        \"WellheadOperatingCondition\": {\n          \"Pressure\": 1,\n          \"Temperature\": 15\n        },\n        \"ContributingWellboreOpeningIDs\": [\n          \"namespace:master-data--WellboreOpening:SomeUniqueWellboreOpeningID:\"\n        ],\n        \"SeparatorOperatingCondition\": {\n          \"Pressure\": 1,\n          \"Temperature\": 15\n        },\n        \"SamplingPoint\": {\n          \"SamplingPointTypeID\": \"namespace:reference-data--SamplingPointType:FlowPort:\",\n          \"SamplingPointName\": \"VALVE:1723RR-01\"\n        },\n        \"CorrectedOilRate\": 12345.6,\n        \"CorrectedGasRate\": 12345.6,\n        \"CorrectedWaterRate\": 12345.6,\n        \"MeasuredOilRate\": 12345.6,\n        \"MeasuredGasRate\": 12345.6,\n        \"MeasuredWaterRate\": 12345.6,\n        \"FormationCondition\": {\n          \"Pressure\": 120,\n          \"Temperature\": 60\n        },\n        \"CorrectionRemarks\": {\n          \"RemarkSequenceNumber\": 1,\n          \"Remark\": \"Example Remark\",\n          \"RemarkSource\": \"Example Remark Source\",\n          \"RemarkDate\": \"2020-02-13\"\n        },\n        \"SampleCarrierSlotName\": \"Example Sample Carrier Slot Name\",\n        \"ToolSectionName\": \"Example Tool Section Name\",\n        \"SampleContainerCushionPressure\": 12345.6,\n        \"GrossFluidKindID\": \"namespace:reference-data--WellProductType:Gas:\",\n        \"FacilityEquipmentOperatingCondition\": {\n          \"Pressure\": 1,\n          \"Temperature\": 15\n        },\n        \"SiteID\": \"namespace:master-data--GenericSite:SomeUniqueGenericSiteID:\",\n        \"SampleRecoveredLengthActual\": 12345.6,\n        \"PreservationTypeID\": \"namespace:reference-data--CorePreservationType:ClingWrap:\",\n        \"SampleRecoveredLengthPlanned\": 12345.6,\n        \"AcquisitionCondition\": {\n          \"Pressure\": 120,\n          \"Temperature\": 60\n        },\n        \"AcquisitionGOR\": 340,\n        \"MudBaseTypeID\": \"namespace:reference-data--MudBaseType:Brine:\",\n        \"MudTracerTypeID\": \"namespace:reference-data--MudTracerType:SomeUniqueMudTracerTypeID:\"\n      },\n      \"SampleAcquisitionTypeID\": \"namespace:reference-data--SampleAcquisitionType:DownholeSampleAcquisition:\",\n      \"SampleAcquisitionContainerID\": \"namespace:master-data--SampleContainer:dr23383830303032991154:\",\n      \"AcquisitionStartDate\": \"2023-01-01T12:00:00Z\",\n      \"AcquisitionEndDate\": \"2023-01-01T12:00:00Z\",\n      \"Remarks\": [\n        {\n          \"RemarkSequenceNumber\": 1,\n          \"Remark\": \"Example Remark\",\n          \"RemarkSource\": \"Example Remark Source\",\n          \"RemarkDate\": \"2020-02-13\"\n        }\n      ],\n      \"CollectionServiceCompanyID\": \"namespace:master-data--Organisation:fg67383830303032991126:\",\n      \"HandlingServiceCompanyID\": \"namespace:master-data--Organisation:fg67383830303032991126:\"\n    },\n    \"Remarks\": [\n      {\n        \"Remark\": \"Shaker not functioning properly.\",\n        \"RemarkSource\": \"Mud Logger\"\n      }\n    ],\n    \"RecombinationSpecification\": {\n      \"RecombinationCondition\": {\n        \"Pressure\": 120,\n        \"Temperature\": 60\n      },\n      \"RecombinationGasOilRatio\": {\n        \"GasOilRatio\": 34567,\n        \"VolumeReferenceConditionGas\": {\n          \"Pressure\": 14.7,\n          \"Temperature\": 60\n        },\n        \"VolumeReferenceConditionOil\": {\n          \"Pressure\": 200,\n          \"Temperature\": 69\n        }\n      },\n      \"RecombinationSaturationPressure\": 120,\n      \"TargetSampleComposition\": [\n        {\n          \"SampleCompositionComponentID\": \"namespace:reference-data--SampleCompositionComponent:ETHANE:\",\n          \"MassFraction\": 0.2,\n          \"MoleFraction\": 0.1\n        },\n        {\n          \"SampleCompositionComponentID\": \"namespace:reference-data--SampleCompositionComponent:PENTANE:\",\n          \"MassFraction\": 0.4,\n          \"MoleFraction\": 0.4\n        },\n        {\n          \"SampleCompositionComponentID\": \"namespace:reference-data--SampleCompositionComponent:PENTANEPLUS:\",\n          \"MassFraction\": 0.4,\n          \"MoleFraction\": 0.5\n        }\n      ],\n      \"Remarks\": [\n        {\n          \"Remark\": \"Shaker not functioning properly.\",\n          \"RemarkSource\": \"Mud Logger\"\n        }\n      ],\n      \"RecombinedSampleFraction\": [\n        {\n          \"SampleCompositionComponentID\": \"namespace:reference-data--SampleCompositionComponent:1%25202%25204%2520TRIMETHYLBENZENE:\",\n          \"VolumeFraction\": 0.2,\n          \"MassFraction\": 0.03,\n          \"MoleFraction\": 0.5\n        }\n      ]\n    },\n    \"ParentSampleIDs\": [\n      \"namespace:master-data--Sample:b7d3735f-b720-5db2-88c9-771d396d8a4e:\",\n      \"namespace:master-data--Sample:c7d3735f-b720-5db2-88c9-771d396d8a4e:\"\n    ],\n    \"SamplePreparation\": [\n      {\n        \"SamplePreparationTypeID\": \"namespace:reference-data--SamplePreparationType:Crushed:\",\n        \"SamplePreparationMethodID\": \"namespace:reference-data--SamplePreparationMethod:WaterWash:\",\n        \"SamplePreparationCondition\": {\n          \"Pressure\": 1,\n          \"Temperature\": 15\n        },\n        \"SamplePreparationStartDate\": \"2020-02-13T09:13:15.55Z\",\n        \"SamplePreparationEndDate\": \"2020-02-13T09:13:15.55Z\",\n        \"Remarks\": [\n          {\n            \"RemarkSequenceNumber\": 1,\n            \"Remark\": \"Example Remark\",\n            \"RemarkSource\": \"Example Remark Source\",\n            \"RemarkDate\": \"2020-02-13\"\n          }\n        ]\n      }\n    ],\n    \"ExtensionProperties\": {}\n  }\n}",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Create or update `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--Sample:2.1.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "{record_id}",
                          "filename": "{record_id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{record_id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get Record",
                              "filename": "Get Record.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/api/rafs-ddms/v2/masterdata/:record_id",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "opendes",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "F3-r:master-data--SampleChainOfCustodyEvent:y4aV1R_EMf",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Get the latest version of `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--Sample:2.1.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Soft Delete Record",
                              "filename": "Soft Delete Record.bru",
                              "seq": 3,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/api/rafs-ddms/v2/masterdata/:record_id",
                                "method": "DELETE",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "opendes",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "F3-r:master-data--SampleChainOfCustodyEvent:y4aV1R_EMf",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Delete the `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--Sample:2.1.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "versions",
                              "filename": "versions",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "versions",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get Record Versions",
                                  "filename": "Get Record Versions.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/api/rafs-ddms/v2/masterdata/:record_id/versions",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "opendes",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "F3-r:master-data--SampleChainOfCustodyEvent:y4aV1R_EMf",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Get a list of `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--Sample:2.1.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "folder",
                                  "name": "{version}",
                                  "filename": "{version}",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "{version}",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Get Record Specific Version",
                                      "filename": "Get Record Specific Version.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/api/rafs-ddms/v2/masterdata/:record_id/versions/:version",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "opendes",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "record_id",
                                            "value": "F3-r:master-data--SampleChainOfCustodyEvent:y4aV1R_EMf",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "version",
                                            "value": "2727",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Get the given version of `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--Sample:2.1.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "dev",
                  "filename": "dev",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "dev",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "samplesanalysis",
                      "filename": "samplesanalysis",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "samplesanalysis",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{analysis_type}",
                          "filename": "{analysis_type}",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{analysis_type}",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "search",
                              "filename": "search",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "search",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "data",
                                  "filename": "data",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "data",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Get Search Data",
                                      "filename": "Get Search Data.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/api/rafs-ddms/dev/samplesanalysis/:analysis_type/search/data?columns_filter=[\"ColumnName1[.FieldName1]\", \"ColumnName2[.FieldName2]\"]&rows_filter={\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}&columns_aggregation=[\"ColumnName[.FieldName]\", \"function\"]&rows_multiple_filter={\"$and\": [{\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}, {\"$or\": [{\"PropertyY[.PropertyYFieldB]\": {\"$eq\": \"{Value}\"}}, {\"PropertyZ[.PropertyZFieldC]\": {\"$le\": \"{Value}\"}}]}]}&page_limit=100&offset=100&metadata=string",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "opendes",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "columns_filter",
                                            "value": "[\"ColumnName1[.FieldName1]\", \"ColumnName2[.FieldName2]\"]",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "rows_filter",
                                            "value": "{\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "columns_aggregation",
                                            "value": "[\"ColumnName[.FieldName]\", \"function\"]",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "rows_multiple_filter",
                                            "value": "{\"$and\": [{\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}, {\"$or\": [{\"PropertyY[.PropertyYFieldB]\": {\"$eq\": \"{Value}\"}}, {\"PropertyZ[.PropertyZFieldC]\": {\"$le\": \"{Value}\"}}]}]}",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "page_limit",
                                            "value": "100",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "offset",
                                            "value": "100",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "metadata",
                                            "value": "string",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "analysis_type",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Get the (`queried`) bulk data from every `{analysis_type}` found in search service. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response. <br><br>            Use `offset`, `page_limit` query parameters to control response data size.                 The `page_limit` and `total_size (found in response)` refers to the number of parquet files read.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "type": "http",
                                  "name": "Get Search",
                                  "filename": "Get Search.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/api/rafs-ddms/dev/samplesanalysis/:analysis_type/search?columns_filter=[\"ColumnName1[.FieldName1]\", \"ColumnName2[.FieldName2]\"]&rows_filter={\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}&columns_aggregation=[\"ColumnName[.FieldName]\", \"function\"]&rows_multiple_filter={\"$and\": [{\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}, {\"$or\": [{\"PropertyY[.PropertyYFieldB]\": {\"$eq\": \"{Value}\"}}, {\"PropertyZ[.PropertyZFieldC]\": {\"$le\": \"{Value}\"}}]}]}&page_limit=1000&offset=100&metadata=string",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "opendes",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "columns_filter",
                                        "value": "[\"ColumnName1[.FieldName1]\", \"ColumnName2[.FieldName2]\"]",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "rows_filter",
                                        "value": "{\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "columns_aggregation",
                                        "value": "[\"ColumnName[.FieldName]\", \"function\"]",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "rows_multiple_filter",
                                        "value": "{\"$and\": [{\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}, {\"$or\": [{\"PropertyY[.PropertyYFieldB]\": {\"$eq\": \"{Value}\"}}, {\"PropertyZ[.PropertyZFieldC]\": {\"$le\": \"{Value}\"}}]}]}",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "page_limit",
                                        "value": "1000",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "offset",
                                        "value": "100",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "metadata",
                                        "value": "string",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "analysis_type",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Get the (`samples analysis`) ids list that comply with `{query}` for given`{analysis_type}`. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response. <br><br>             Use `offset`, `page_limit` query parameters to control response data size.                 The `page_limit` and `total_size (found in response)` refers to the number of parquet files read.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "{record_id}",
                          "filename": "{record_id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{record_id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "data",
                              "filename": "data",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "data",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "{analysis_type}",
                                  "filename": "{analysis_type}",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "{analysis_type}",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Get Data Dev",
                                      "filename": "Get Data Dev.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/api/rafs-ddms/dev/samplesanalysis/:record_id/data/:analysis_type?columns_filter=[\"ColumnName1[.FieldName1]\", \"ColumnName2[.FieldName2]\"]&rows_filter={\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}&columns_aggregation=[\"ColumnName[.FieldName]\", \"function\"]&rows_multiple_filter={\"$and\": [{\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}, {\"$or\": [{\"PropertyY[.PropertyYFieldB]\": {\"$eq\": \"{Value}\"}}, {\"PropertyZ[.PropertyZFieldC]\": {\"$le\": \"{Value}\"}}]}]}",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "opendes",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "columns_filter",
                                            "value": "[\"ColumnName1[.FieldName1]\", \"ColumnName2[.FieldName2]\"]",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "rows_filter",
                                            "value": "{\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "columns_aggregation",
                                            "value": "[\"ColumnName[.FieldName]\", \"function\"]",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "rows_multiple_filter",
                                            "value": "{\"$and\": [{\"PropertyX[.PropertyXFieldA]\": {\"$gt\": \"{Value}\"}}, {\"$or\": [{\"PropertyY[.PropertyYFieldB]\": {\"$eq\": \"{Value}\"}}, {\"PropertyZ[.PropertyZFieldC]\": {\"$le\": \"{Value}\"}}]}]}",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "record_id",
                                            "value": "mvll7qmyZAd:work-product-component--SamplesAnalysis:oc2q8fQTUad",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "analysis_type",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Get the (`latest version`) bulk data for a given `{analysis_type}` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    },
                                    {
                                      "type": "http",
                                      "name": "Post Data Dev",
                                      "filename": "Post Data Dev.bru",
                                      "seq": 2,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/api/rafs-ddms/dev/samplesanalysis/:record_id/data/:analysis_type",
                                        "method": "POST",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "opendes",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "record_id",
                                            "value": "mvll7qmyZAd:work-product-component--SamplesAnalysis:oc2q8fQTUad",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "analysis_type",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Upload the bulk data for a given `{analysis_type}` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Search",
      "filename": "Search",
      "seq": 18,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Search",
          "seq": 18
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "query",
          "filename": "query",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "query",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Queries the index for the input request criteria.",
              "filename": "Queries the index for the input request criteria.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/query",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"kind\": {},\n  \"aggregateBy\": \"string\",\n  \"highlightedFields\": [\n    \"string\",\n    \"string\"\n  ],\n  \"limit\": 5193,\n  \"offset\": 9615,\n  \"query\": \"string\",\n  \"queryAsOwner\": false,\n  \"returnedFields\": [\n    \"string\",\n    \"string\"\n  ],\n  \"sort\": {\n    \"field\": [\n      \"string\",\n      \"string\"\n    ],\n    \"filter\": [\n      \"string\",\n      \"string\"\n    ],\n    \"order\": [\n      \"ASC\",\n      \"ASC\"\n    ]\n  },\n  \"spatialFilter\": {\n    \"byBoundingBox\": {\n      \"bottomRight\": {\n        \"latitude\": 20.35496729306314,\n        \"longitude\": 8035.2063695324305\n      },\n      \"topLeft\": {\n        \"latitude\": 0.68235147720398,\n        \"longitude\": 1342.7818032997252\n      }\n    },\n    \"byDistance\": {\n      \"point\": {\n        \"latitude\": 46.33006757526661,\n        \"longitude\": 298.3226500803371\n      },\n      \"distance\": 4711130488997400000\n    },\n    \"byGeoPolygon\": {\n      \"points\": [\n        {\n          \"latitude\": 81.9448928119318,\n          \"longitude\": 7108.30269876399\n        },\n        {\n          \"latitude\": 84.67525310871792,\n          \"longitude\": 6492.563726705086\n        }\n      ]\n    },\n    \"byIntersection\": {\n      \"polygons\": [\n        {\n          \"points\": [\n            {\n              \"latitude\": -89.82481827918717,\n              \"longitude\": 1413.012919892026\n            },\n            {\n              \"latitude\": -86.2264367965935,\n              \"longitude\": 7124.702963225018\n            }\n          ]\n        },\n        {\n          \"points\": [\n            {\n              \"latitude\": 69.07400250996898,\n              \"longitude\": 2995.315980072344\n            },\n            {\n              \"latitude\": -48.12359994937778,\n              \"longitude\": 6343.414927634279\n            }\n          ]\n        }\n      ]\n    },\n    \"byWithinPolygon\": {\n      \"points\": [\n        {\n          \"latitude\": -40.14093008754324,\n          \"longitude\": 7646.748580235325\n        },\n        {\n          \"latitude\": 21.154886719586116,\n          \"longitude\": 3585.677127225877\n        }\n      ]\n    },\n    \"field\": \"string\"\n  },\n  \"suggestPhrase\": \"string\",\n  \"trackTotalCount\": false\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. \n Required roles: `users.datalake.viewers` or  `users.datalake.editors` or `users.datalake.admins` or `users.datalake.ops`. In addition, users must be a member of data groups to access the data.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "readiness_check",
          "filename": "readiness_check",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "readiness_check",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Readiness Check endpoint",
              "filename": "Readiness Check endpoint.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/readiness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/readiness_check` endpoint.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "liveness_check",
          "filename": "liveness_check",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "liveness_check",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Liveness Check endpoint",
              "filename": "Liveness Check endpoint.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/liveness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "${healthCheckApi.livenessCheck.description}",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "query_with_cursor",
          "filename": "query_with_cursor",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "query_with_cursor",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Queries the index using cursor for the input request criteria.",
              "filename": "Queries the index using cursor for the input request criteria.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/query_with_cursor?search_after=false",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "search_after",
                    "value": "false",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"kind\": {},\n  \"cursor\": \"string\",\n  \"highlightedFields\": [\n    \"string\",\n    \"string\"\n  ],\n  \"limit\": 9300,\n  \"query\": \"string\",\n  \"queryAsOwner\": false,\n  \"returnedFields\": [\n    \"string\",\n    \"string\"\n  ],\n  \"sort\": {\n    \"field\": [\n      \"string\",\n      \"string\"\n    ],\n    \"filter\": [\n      \"string\",\n      \"string\"\n    ],\n    \"order\": [\n      \"ASC\",\n      \"ASC\"\n    ]\n  },\n  \"spatialFilter\": {\n    \"byBoundingBox\": {\n      \"bottomRight\": {\n        \"latitude\": -45.02090213793247,\n        \"longitude\": 373.00153764161513\n      },\n      \"topLeft\": {\n        \"latitude\": 35.49010310956493,\n        \"longitude\": 5882.581464012637\n      }\n    },\n    \"byDistance\": {\n      \"point\": {\n        \"latitude\": -86.39627540984132,\n        \"longitude\": 6822.619128064674\n      },\n      \"distance\": 5797880617966256000\n    },\n    \"byGeoPolygon\": {\n      \"points\": [\n        {\n          \"latitude\": 62.76960383025397,\n          \"longitude\": 4068.6313155560274\n        },\n        {\n          \"latitude\": -22.20002191459872,\n          \"longitude\": 8332.553175720419\n        }\n      ]\n    },\n    \"byIntersection\": {\n      \"polygons\": [\n        {\n          \"points\": [\n            {\n              \"latitude\": 1.129708574722514,\n              \"longitude\": 6020.399371783631\n            },\n            {\n              \"latitude\": -33.55205826656467,\n              \"longitude\": 7996.198302377076\n            }\n          ]\n        },\n        {\n          \"points\": [\n            {\n              \"latitude\": -73.76553795758497,\n              \"longitude\": 4309.749587836722\n            },\n            {\n              \"latitude\": 69.19481100196029,\n              \"longitude\": 9534.018992792\n            }\n          ]\n        }\n      ]\n    },\n    \"byWithinPolygon\": {\n      \"points\": [\n        {\n          \"latitude\": -34.129087624143466,\n          \"longitude\": 4115.29658492123\n        },\n        {\n          \"latitude\": 74.76101385056481,\n          \"longitude\": 410.661074717833\n        }\n      ]\n    },\n    \"field\": \"string\"\n  },\n  \"suggestPhrase\": \"string\",\n  \"trackTotalCount\": true\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. \nRequired roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins` or `users.datalake.ops`. In addition, users must be a member of data groups to access the data. \nIt can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "{cursor}",
              "filename": "{cursor}",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{cursor}",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "${searchApi.closePaginationQueryWithCursor.summary}",
                  "filename": "${searchApi.closePaginationQueryWithCursor.summary}.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/query_with_cursor/:cursor?search_after=false",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "search_after",
                        "value": "false",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "cursor",
                        "value": "string",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "${searchApi.closePaginationQueryWithCursor.description}",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Petrel DMS",
      "filename": "Petrel DMS",
      "seq": 12,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Petrel DMS",
          "seq": 12
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "v1",
          "filename": "v1",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v1",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "projects",
              "filename": "projects",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "projects",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "{projectId}",
                  "filename": "{projectId}",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{projectId}",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Deletes a specific project.",
                      "filename": "Deletes a specific project.bru",
                      "seq": 7,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/api/petreldms/v1/projects/:projectId",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "{{dataPartitionId}}",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "projectId",
                            "value": "<string>",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "[\n  \"<string>\",\n  \"<string>\"\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "download",
                      "filename": "download",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "download",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get download url of a specific project.",
                          "filename": "Get download url of a specific project.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/api/petreldms/v1/projects/:projectId/download",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "{{dataPartitionId}}",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "projectId",
                                "value": "<string>",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "http",
                      "name": "Gets a single project record.",
                      "filename": "Gets a single project record.bru",
                      "seq": 5,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/api/petreldms/v1/projects/:projectId?attribute=<string>",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "{{dataPartitionId}}",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "attribute",
                            "value": "<string>",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "projectId",
                            "value": "<string>",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "update",
                      "filename": "update",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "update",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Updates a specific project.",
                          "filename": "Updates a specific project.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/api/petreldms/v1/projects/:projectId/update",
                            "method": "PUT",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "{{dataPartitionId}}",
                                "enabled": true
                              },
                              {
                                "name": "Content-Type",
                                "value": "application/json",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "projectId",
                                "value": "<string>",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "json",
                              "json": "{\n  \"records\": [\n    {\n      \"acl\": {\n        \"owners\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"viewers\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"createTime\": \"\",\n      \"createUser\": \"\",\n      \"data\": null,\n      \"id\": \"\",\n      \"kind\": \"\",\n      \"legal\": {\n        \"legaltags\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"otherRelevantDataCountries\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"modifyTime\": \"\",\n      \"modifyUser\": \"\",\n      \"version\": \"\"\n    },\n    {\n      \"acl\": {\n        \"owners\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"viewers\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"createTime\": \"\",\n      \"createUser\": \"\",\n      \"data\": null,\n      \"id\": \"\",\n      \"kind\": \"\",\n      \"legal\": {\n        \"legaltags\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"otherRelevantDataCountries\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"modifyTime\": \"\",\n      \"modifyUser\": \"\",\n      \"version\": \"\"\n    }\n  ],\n  \"signedUrl\": \"<string>\"\n}",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "http",
                      "name": "Updates a specific project properties.",
                      "filename": "Updates a specific project properties.bru",
                      "seq": 6,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/api/petreldms/v1/projects/:projectId",
                        "method": "PATCH",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "{{dataPartitionId}}",
                            "enabled": true
                          },
                          {
                            "name": "data-partition-id",
                            "value": "{{dataPartitionId}}",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "projectId",
                            "value": "<string>",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"fields\": [\n    {\n      \"name\": \"<string>\",\n      \"value\": {\n        \"nullable\": true\n      }\n    },\n    {\n      \"name\": \"<string>\",\n      \"value\": {\n        \"nullable\": true\n      }\n    }\n  ],\n  \"id\": \"<string>\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "upload",
                      "filename": "upload",
                      "seq": 3,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "upload",
                          "seq": 3
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Uploads a specific project.",
                          "filename": "Uploads a specific project.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/api/petreldms/v1/projects/:projectId/upload",
                            "method": "POST",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "{{dataPartitionId}}",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "projectId",
                                "value": "<string>",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "versions",
                      "filename": "versions",
                      "seq": 4,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "versions",
                          "seq": 4
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{versionId}",
                          "filename": "{versionId}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{versionId}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Gets a single version record of a project.",
                              "filename": "Gets a single version record of a project.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/api/petreldms/v1/projects/:projectId/versions/:versionId?attribute=<string>",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "{{dataPartitionId}}",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "attribute",
                                    "value": "<string>",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "projectId",
                                    "value": "<string>",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "versionId",
                                    "value": "<string>",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Schema",
      "filename": "Schema",
      "seq": 16,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Schema",
          "seq": 16
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "liveness_check",
          "filename": "liveness_check",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "liveness_check",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Liveness Check endpoint",
              "filename": "Liveness Check endpoint.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/liveness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/liveness_check` endpoint verifies the operational status of the Schema Service.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "schemas",
          "filename": "schemas",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "schemas",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "system",
              "filename": "system",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "system",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Creates/Updates a schema in development status",
                  "filename": "Creates-Updates a schema in development status.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/schemas/system",
                    "method": "PUT",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"schema\": {},\n  \"schemaInfo\": {\n    \"schemaIdentity\": {\n      \"authority\": \"osdu\",\n      \"entityType\": \"wellbore\",\n      \"schemaVersionMajor\": 1,\n      \"schemaVersionMinor\": 1,\n      \"schemaVersionPatch\": 0,\n      \"source\": \"wks\",\n      \"id\": \"osdu:wks:wellbore:1.0.0\"\n    },\n    \"status\": \"PUBLISHED\",\n    \"createdBy\": \"user@opendes.com\",\n    \"dateCreated\": \"2019-05-23T11:16:03Z\",\n    \"scope\": \"INTERNAL\",\n    \"supersededBy\": {\n      \"authority\": \"osdu\",\n      \"entityType\": \"wellbore\",\n      \"schemaVersionMajor\": 1,\n      \"schemaVersionMinor\": 1,\n      \"schemaVersionPatch\": 0,\n      \"source\": \"wks\",\n      \"id\": \"osdu:wks:wellbore:1.0.0\"\n    }\n  }\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Creates a new schema or updates an already existing schema with status `DEVELOPMENT` in the schema repository. If a user tries to create a schema with status other than `DEVELOPMENT`, API will not throw an exception. <p>The update of schema without `DEVELOPMENT` status would cause error. Any schema instance with the same schemaIdentity is replaced. A schema state can also be changed from `DEVELOPMENT` to `PUBLISHED` or `OBSOLETE` while updating schema content or by providing the same schema content.</p> <p>**Note:** The schema may refer to other schema definitions in `DEVELOPMENT` state. If those schemas are updated themselves, it is the developer's responsibility to PUT the dependent schemas again to update the schema. Scope for a schema will be SHARED for all the schemas created using this API.</p><p>Service principal authorization is required to call thi API.</p>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "schema",
          "filename": "schema",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "schema",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Adds a schema to the schema repository.",
              "filename": "Adds a schema to the schema repository.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/schema",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"schema\": {},\n  \"schemaInfo\": {\n    \"schemaIdentity\": {\n      \"authority\": \"osdu\",\n      \"entityType\": \"wellbore\",\n      \"schemaVersionMajor\": 1,\n      \"schemaVersionMinor\": 1,\n      \"schemaVersionPatch\": 0,\n      \"source\": \"wks\",\n      \"id\": \"osdu:wks:wellbore:1.0.0\"\n    },\n    \"status\": \"PUBLISHED\",\n    \"createdBy\": \"user@opendes.com\",\n    \"dateCreated\": \"2019-05-23T11:16:03Z\",\n    \"scope\": \"INTERNAL\",\n    \"supersededBy\": {\n      \"authority\": \"osdu\",\n      \"entityType\": \"wellbore\",\n      \"schemaVersionMajor\": 1,\n      \"schemaVersionMinor\": 1,\n      \"schemaVersionPatch\": 0,\n      \"source\": \"wks\",\n      \"id\": \"osdu:wks:wellbore:1.0.0\"\n    }\n  }\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Adds a schema to the schema repository. The schemaIdentity must be unique. The `authority`, `source` and `entityType` will be registered if not present. <p>If lower minor versions are registered the service validates the new schema against breaking changes; if breaking changes are discovered the request fails.</p> <p>**Note:** The schema must not reference other schemas with status `DEVELOPMENT`. Scope to a schema will be set by system based on partition id (`SHARED` for common tenant and `INTERNAL` for private tenant). </p><p>Required roles : `service.schema-service.editors` groups to create schema.</p>",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Creates/Updates a schema in development status",
              "filename": "Creates-Updates a schema in development status.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/schema",
                "method": "PUT",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"schema\": {},\n  \"schemaInfo\": {\n    \"schemaIdentity\": {\n      \"authority\": \"osdu\",\n      \"entityType\": \"wellbore\",\n      \"schemaVersionMajor\": 1,\n      \"schemaVersionMinor\": 1,\n      \"schemaVersionPatch\": 0,\n      \"source\": \"wks\",\n      \"id\": \"osdu:wks:wellbore:1.0.0\"\n    },\n    \"status\": \"PUBLISHED\",\n    \"createdBy\": \"user@opendes.com\",\n    \"dateCreated\": \"2019-05-23T11:16:03Z\",\n    \"scope\": \"INTERNAL\",\n    \"supersededBy\": {\n      \"authority\": \"osdu\",\n      \"entityType\": \"wellbore\",\n      \"schemaVersionMajor\": 1,\n      \"schemaVersionMinor\": 1,\n      \"schemaVersionPatch\": 0,\n      \"source\": \"wks\",\n      \"id\": \"osdu:wks:wellbore:1.0.0\"\n    }\n  }\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Creates a new schema or updates an already existing schema with status `DEVELOPMENT` in the schema repository. If a user tries to create/update a schema with status other than `DEVELOPMENT`, API will throw an exception. <p>Any schema instance with the same schemaIdentity is replaced (in contrast to the immutability of `PUBLISHED` or `OBSOLETE` schemas). A schema state can also be changed from `DEVELOPMENT` to `PUBLISHED` or `OBSOLETE` while updating schema content or by providing the same schema content.</p> <p>**Note:** The schema may refer to other schema definitions in `DEVELOPMENT` state. If those schemas are updated themselves, it is the developer's responsibility to PUT the dependent schemas again to update the schemas. Scope for a schema can't be updated, its a system defined value.</p> <p>Required roles:  `service.schema-service.editors` groups to update schema.</p>",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Searches SchemaInfo repository",
              "filename": "Searches SchemaInfo repository.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/schema?authority=osdu&source=wks&entityType=wellbore&schemaVersionMajor=1&schemaVersionMinor=1&schemaVersionPatch=0&status=PUBLISHED&scope=INTERNAL&latestVersion=True&limit=10&offset=0",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "authority",
                    "value": "osdu",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "source",
                    "value": "wks",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "entityType",
                    "value": "wellbore",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "schemaVersionMajor",
                    "value": "1",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "schemaVersionMinor",
                    "value": "1",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "schemaVersionPatch",
                    "value": "0",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "status",
                    "value": "PUBLISHED",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "scope",
                    "value": "INTERNAL",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "latestVersion",
                    "value": "True",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "limit",
                    "value": "10",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "offset",
                    "value": "0",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Searches for information of available schema (SchemaInfo) in schema repository. Support options to filter out the search contents. <p>Required roles:  `service.schema-service.viewers` groups to get the schema.</p>",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "{id}",
              "filename": "{id}",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{id}",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Gets schema from the schema repository.",
                  "filename": "Gets schema from the schema repository.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/schema/:id",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "id",
                        "value": "osdu:wks:wellbore:1.0.0",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Retrieve a schema using its system defined id. Required roles:  `service.schema-service.viewers` groups to get the schema.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Register",
      "filename": "Register",
      "seq": 13,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Register",
          "seq": 13
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "action",
          "filename": "action",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "action",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Create an action registration",
              "filename": "Create an action registration.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/action",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"contactEmail\": \"abc@test.com\",\n  \"description\": \"This action launches the Petrel projects landing page that holds the selected data.\",\n  \"filter\": {\n    \"entityType\": [\n      \"string\",\n      \"string\"\n    ],\n    \"source\": [\n      \"string\",\n      \"string\"\n    ],\n    \"version\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  \"id\": \"petrel-launch-project\",\n  \"img\": \"https://mycdn.com/img.png\",\n  \"name\": \"Petrel Project\",\n  \"url\": \"https://myapp.osdu.com/action/{type}/{id}\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Create an action registration. Required role: `users.datalake.ops` or `users.datalake.admins`",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "{id}",
              "filename": "{id}",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{id}",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Delete an action  registration",
                  "filename": "Delete an action  registration.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/action/:id",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "id",
                        "value": "petrel-launch-project",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Delete an action registration with the given id. Required role: `users.datalake.ops` or `users.datalake.admins`",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get an action registration",
                  "filename": "Get an action registration.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/action/:id",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "id",
                        "value": "petrel-launch-project",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get an action registration with the given id. Required roles: `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors` or `users.datalake.viewers`",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "ah",
          "filename": "ah",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "ah",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "readiness_check",
              "filename": "readiness_check",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "readiness_check",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Readiness Check endpoint",
                  "filename": "Readiness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/ah/readiness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/readiness_check` endpoint.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "liveness_check",
              "filename": "liveness_check",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "liveness_check",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Liveness Check endpoint",
                  "filename": "Liveness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/ah/liveness_check",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/liveness_check` endpoint.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "ddms",
          "filename": "ddms",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "ddms",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Create a DDMS registration",
              "filename": "Create a DDMS registration.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/ddms",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"contactEmail\": \"abc@test.com\",\n  \"createdDateTimeEpoch\": \"2014-04-15T09:04:52.963Z\",\n  \"description\": \"example-description\",\n  \"id\": \"example-id-123\",\n  \"interfaces\": [\n    {\n      \"schema\": {\n        \"key_0\": {},\n        \"key_1\": {}\n      },\n      \"entityType\": \"wellbore\"\n    },\n    {\n      \"schema\": {\n        \"key_0\": {}\n      },\n      \"entityType\": \"wellbore\"\n    }\n  ],\n  \"name\": \"example-name\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Create a DDMS registration using an OpenApi spec V3 document. Required roles: `users.datalake.editors` or `users.datalake.admins` or `users.datalake.ops`",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Query for DDMS registrations",
              "filename": "Query for DDMS registrations.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/ddms?type=FQsWXvyRCBijWahpjpomFiguRBsMRqAHOiC",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "type",
                    "value": "FQsWXvyRCBijWahpjpomFiguRBsMRqAHOiC",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Query for DDMS registrations allowing retrievals by type. Required roles: `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors` or `users.datalake.viewers`",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "{id}",
              "filename": "{id}",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{id}",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Delete a DDMS registration",
                  "filename": "Delete a DDMS registration.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/ddms/:id",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "id",
                        "value": "example-id-123",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Delete a DDMS registration with the given id. Required roles: `users.datalake.ops` or `users.datalake.admins`",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get a DDMS registration",
                  "filename": "Get a DDMS registration.bru",
                  "seq": 3,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/ddms/:id",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "id",
                        "value": "example-id-123",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get a DDMS registration with the given id. Required roles: `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors` or `users.datalake.viewers`",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "{type}",
                  "filename": "{type}",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{type}",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{localid}",
                      "filename": "{localid}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{localid}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Retrieves Single Entity record id",
                          "filename": "Retrieves Single Entity record id.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/:id/:type/:localid",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "*/*",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "id",
                                "value": "example-id-123",
                                "type": "path",
                                "enabled": true
                              },
                              {
                                "name": "type",
                                "value": "rljvOWBYt5ybPAZj",
                                "type": "path",
                                "enabled": true
                              },
                              {
                                "name": "localid",
                                "value": "uLpo-L7Cg7C:oY:oZMFL59",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get a Single DDMS record id. Required roles: `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors` or `users.datalake.viewers`",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "action:test",
          "filename": "action-test",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "action:test",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Test an action registration",
              "filename": "Test an action registration.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/action:test",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"testPayload\": {},\n  \"action\": {\n    \"contactEmail\": \"abc@test.com\",\n    \"description\": \"This action launches the Petrel projects landing page that holds the selected data.\",\n    \"filter\": {\n      \"entityType\": [\n        \"string\",\n        \"string\"\n      ],\n      \"source\": [\n        \"string\",\n        \"string\"\n      ],\n      \"version\": [\n        \"string\",\n        \"string\"\n      ]\n    },\n    \"id\": \"petrel-launch-project\",\n    \"img\": \"https://mycdn.com/img.png\",\n    \"name\": \"Petrel Project\",\n    \"url\": \"https://myapp.osdu.com/action/{type}/{id}\"\n  }\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Test an action registration. Required roles: `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors` or `users.datalake.viewers`",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "action:retrieve",
          "filename": "action-retrieve",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "action:retrieve",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Query for action registrations and substitutes any action with the given parameters",
              "filename": "Query for action registrations and substitutes any action with the given parameters.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/action:retrieve",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Retrieve an action registration. Required roles: `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors` or `users.datalake.viewers`",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "subscription",
          "filename": "subscription",
          "seq": 7,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "subscription",
              "seq": 7
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Create a subscription",
              "filename": "Create a subscription.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/subscription",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"createdBy\": \"test@myapp.com\",\n  \"description\": \"test-subscription\",\n  \"id\": \"string\",\n  \"name\": \"test-subscription\",\n  \"notificationId\": \"de-6ee609b9-620e-477b-86f9-3b8907643a12\",\n  \"pushEndpoint\": \" https://myListener.com\",\n  \"secret\": {\n    \"secretType\": \"string\",\n    \"value\": {\n      \"audience\": \"string\",\n      \"key\": \"string\"\n    }\n  },\n  \"topic\": \"data-changed-v1\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Create a subscription. Required roles: `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors`",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Query Subscription",
              "filename": "Query Subscription.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/subscription?notificationId=string",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "notificationId",
                    "value": "string",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Query Subscription by notification Id.  Required roles: `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors`",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "{id}",
              "filename": "{id}",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{id}",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Delete a subscription",
                  "filename": "Delete a subscription.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/subscription/:id",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "id",
                        "value": "string",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Delete a subscription with its Id. Required roles :  `users.datalake.ops` or `users.datalake.admins`",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get a subscription",
                  "filename": "Get a subscription.bru",
                  "seq": 3,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/subscription/:id",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "id",
                        "value": "string",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get a subscription with its Id.  Required roles: `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors`",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "secret",
                  "filename": "secret",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "secret",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Update secret for a subscription",
                      "filename": "Update secret for a subscription.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/subscription/:id/secret",
                        "method": "PUT",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "id",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"secretType\": \"string\",\n  \"value\": {\n    \"audience\": \"string\",\n    \"key\": \"string\"\n  }\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Update secret for a subscription. Required roles :  `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors`",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "topics",
          "filename": "topics",
          "seq": 8,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "topics",
              "seq": 8
            }
          },
          "items": [
            {
              "type": "http",
              "name": "List all topics",
              "filename": "List all topics.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/topics",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "List all topics that you can create a subscription for, along with the corresponding sample messages. <p> Required roles :  `users.datalake.ops` or `users.datalake.admins` or `users.datalake.editors`",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 6,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 6
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Reservoir DDMS",
      "filename": "Reservoir DDMS",
      "seq": 14,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Reservoir DDMS",
          "seq": 14
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "dataspaces",
          "filename": "dataspaces",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "dataspaces",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Create new dataspaces.",
              "filename": "Create new dataspaces.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/dataspaces",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "data-partition-id",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "[\n  {\n    \"CustomData\": {\n      \"key\": \"value\"\n    },\n    \"DataspaceId\": \"projectA/Scenario1\",\n    \"Path\": \"projectA/Scenario1\"\n  }\n]",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Create new dataspaces.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "List dataspaces.",
              "filename": "List dataspaces.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/dataspaces?$skip=63292.705567378136&$top=5342.309282611962&storeLastWriteFilter=1081-50-40T33:04:08",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "data-partition-id",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "$skip",
                    "value": "63292.705567378136",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "$top",
                    "value": "5342.309282611962",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "storeLastWriteFilter",
                    "value": "1081-50-40T33:04:08",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "List the dataspaces available in a server. Output can be paginated.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "{dataspaceId}",
              "filename": "{dataspaceId}",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{dataspaceId}",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "clone",
                  "filename": "clone",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "clone",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Duplicate a dataspace.",
                      "filename": "Duplicate a dataspace.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/dataspaces/:dataspaceId/clone",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "data-partition-id",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "dataspaceId",
                            "value": "demo/Volve",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"CustomData\": {\n    \"key\": \"value\"\n  },\n  \"DataspaceId\": \"projectA/Scenario2\",\n  \"Path\": \"projectA/Scenario2\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Duplicate a dataspace.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "http",
                  "name": "Delete existing dataspace.",
                  "filename": "Delete existing dataspace.bru",
                  "seq": 7,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/dataspaces/:dataspaceId",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "data-partition-id",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "dataspaceId",
                        "value": "demo/Volve",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Delete existing dataspace.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "graph",
                  "filename": "graph",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "graph",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "all",
                      "filename": "all",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "all",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Graph all resources.",
                          "filename": "Graph all resources.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/dataspaces/:dataspaceId/graph/all?$skip=63292.705567378136&$top=5342.309282611962&$filter=_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data&storeLastWriteFilter=1081-50-40T33:04:08&dataObjectTypes=witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY&countObjects=false&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "data-partition-id",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "$skip",
                                "value": "63292.705567378136",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "$top",
                                "value": "5342.309282611962",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "$filter",
                                "value": "_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "storeLastWriteFilter",
                                "value": "1081-50-40T33:04:08",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "dataObjectTypes",
                                "value": "witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "countObjects",
                                "value": "false",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "transactionId",
                                "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "dataspaceId",
                                "value": "demo/Volve",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Create a graph for all resources in a dataspaces.\n    Output can be paginated and filtered by types, content, last update time.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "{dataObjectType}",
                      "filename": "{dataObjectType}",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{dataObjectType}",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{guid}",
                          "filename": "{guid}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{guid}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "sources",
                              "filename": "sources",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "sources",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Graph the resources referencing current one.",
                                  "filename": "Graph the resources referencing current one.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/dataspaces/:dataspaceId/graph/:dataObjectType/:guid/sources?version=''IW-qF''&$skip=63292.705567378136&$top=5342.309282611962&$filter=_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data&storeLastWriteFilter=1081-50-40T33:04:08&dataObjectTypes=witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY&depth=781.5783505318485&includeSecondaryTargets=false&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8&countObjects=false",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "data-partition-id",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "version",
                                        "value": "''IW-qF''",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$skip",
                                        "value": "63292.705567378136",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$top",
                                        "value": "5342.309282611962",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$filter",
                                        "value": "_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "storeLastWriteFilter",
                                        "value": "1081-50-40T33:04:08",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataObjectTypes",
                                        "value": "witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "depth",
                                        "value": "781.5783505318485",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "includeSecondaryTargets",
                                        "value": "false",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "transactionId",
                                        "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "countObjects",
                                        "value": "false",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataspaceId",
                                        "value": "demo/Volve",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataObjectType",
                                        "value": "resqml20.obj_ContinuousProperty",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "guid",
                                        "value": "1615d8d2-2a2d-482c-885e-14225b89e90c",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Graph all resources referencing a given resource.\n    Referencing can be recursive with a depth greater than 1.\n    Includes the relationships between the resources.\n    Output can be paginated and filtered by content, types and last update time.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "targets",
                              "filename": "targets",
                              "seq": 2,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "targets",
                                  "seq": 2
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Graph the resources referenced by current one.",
                                  "filename": "Graph the resources referenced by current one.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/dataspaces/:dataspaceId/graph/:dataObjectType/:guid/targets?version=''IW-qF''&$skip=63292.705567378136&$top=5342.309282611962&$filter=_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data&storeLastWriteFilter=1081-50-40T33:04:08&dataObjectTypes=witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY&depth=781.5783505318485&includeSecondarySources=false&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8&countObjects=false",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "data-partition-id",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "version",
                                        "value": "''IW-qF''",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$skip",
                                        "value": "63292.705567378136",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$top",
                                        "value": "5342.309282611962",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$filter",
                                        "value": "_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "storeLastWriteFilter",
                                        "value": "1081-50-40T33:04:08",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataObjectTypes",
                                        "value": "witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "depth",
                                        "value": "781.5783505318485",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "includeSecondarySources",
                                        "value": "false",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "transactionId",
                                        "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "countObjects",
                                        "value": "false",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataspaceId",
                                        "value": "demo/Volve",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataObjectType",
                                        "value": "resqml20.obj_ContinuousProperty",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "guid",
                                        "value": "1615d8d2-2a2d-482c-885e-14225b89e90c",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Graph all resources referenced by a given resource.\n    Referencing can be recursive with a depth greater than 1.\n    Includes the relationships between the resources.\n    Output can be paginated and filtered by content, types and last update time.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "info",
                  "filename": "info",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "info",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get info on a dataspace.",
                      "filename": "Get info on a dataspace.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/dataspaces/:dataspaceId/info",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "data-partition-id",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "dataspaceId",
                            "value": "demo/Volve",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get all information bout explicit dataspace.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "lock",
                  "filename": "lock",
                  "seq": 4,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "lock",
                      "seq": 4
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Lock a dataspace.",
                      "filename": "Lock a dataspace.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/dataspaces/:dataspaceId/lock",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "data-partition-id",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "dataspaceId",
                            "value": "demo/Volve",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Set a dataspace read-only.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Unlock a dataspace.",
                      "filename": "Unlock a dataspace.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/dataspaces/:dataspaceId/lock",
                        "method": "DELETE",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "data-partition-id",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "dataspaceId",
                            "value": "demo/Volve",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Set a dataspace read-write.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "resources",
                  "filename": "resources",
                  "seq": 5,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "resources",
                      "seq": 5
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "all",
                      "filename": "all",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "all",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "List all resources.",
                          "filename": "List all resources.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/all?$skip=63292.705567378136&$top=5342.309282611962&$filter=_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data&storeLastWriteFilter=1081-50-40T33:04:08&dataObjectTypes=witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8&countObjects=false",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "data-partition-id",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "$skip",
                                "value": "63292.705567378136",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "$top",
                                "value": "5342.309282611962",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "$filter",
                                "value": "_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "storeLastWriteFilter",
                                "value": "1081-50-40T33:04:08",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "dataObjectTypes",
                                "value": "witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "transactionId",
                                "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "countObjects",
                                "value": "false",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "dataspaceId",
                                "value": "demo/Volve",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "List all resources in a dataspaces.\n    Output can be paginated and filtered by types, content, last update time.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "arrays",
                      "filename": "arrays",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "arrays",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Create or update a data array.",
                          "filename": "Create or update a data array.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/arrays?transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                            "method": "PUT",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "data-partition-id",
                                "enabled": true
                              },
                              {
                                "name": "Content-Type",
                                "value": "application/json",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "transactionId",
                                "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "dataspaceId",
                                "value": "demo/Volve",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "json",
                              "json": "[\n  {\n    \"ArrayType\": \"Float32Array\",\n    \"ContainerType\": \"eml20.obj_EpcExternalPartReference\",\n    \"ContainerUuid\": \"68f2a7d4-f7c1-4a75-95e9-3c6a7029fb23\",\n    \"Data\": [\n      0,\n      0,\n      0,\n      1,\n      1,\n      1,\n      2,\n      2,\n      2\n    ],\n    \"Dimensions\": [\n      3,\n      3\n    ],\n    \"PathInResource\": \"/RESQML/5d27775e-5c7f-4786-a048-9a303fa1165a/points_patch0\",\n    \"PreferredSubarrayDimensions\": [\n      3,\n      1\n    ]\n  }\n]",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Create or update data array to attach to existing object.\n    When starts and count are present, it will update a subarray.\n    When data are not present, it will create an empty array else the data can be provided as either an array of number or a base64 encoded string.\n    Should be done within a transaction. ",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "http",
                      "name": "Create or update objects.",
                      "filename": "Create or update objects.bru",
                      "seq": 5,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources?transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                        "method": "PUT",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "data-partition-id",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "transactionId",
                            "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "dataspaceId",
                            "value": "demo/Volve",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "[\n  {\n    \"$type\": \"resqml20.obj_LocalDepth3dCrs\",\n    \"ArealRotation\": {\n      \"$type\": \"eml20.PlaneAngleMeasure\",\n      \"Uom\": \"rad\",\n      \"_\": 0\n    },\n    \"Citation\": {\n      \"Creation\": \"2021-09-02T07:57:28.000Z\",\n      \"Editor\": \"dalsaab\",\n      \"Format\": \"Paradigm SKUA-GOCAD 22 Alpha 1 Build:20210830-0200 (id: origin/master|56050|1fb1cf919c2|20210827-1108) for Linux_x64_2.17_gcc91\",\n      \"LastUpdate\": \"2021-09-06T13:30:24.000Z\",\n      \"Originator\": \"dalsaab\",\n      \"Title\": \"CustomTestCrs\"\n    },\n    \"ProjectedAxisOrder\": \"easting northing\",\n    \"ProjectedCrs\": {\n      \"$type\": \"eml20.ProjectedCrsEpsgCode\",\n      \"EpsgCode\": 23031\n    },\n    \"ProjectedUom\": \"m\",\n    \"SchemaVersion\": \"2.0\",\n    \"Uuid\": \"7c7d7987-b7b9-4215-9014-cb7d6fb62173\",\n    \"VerticalCrs\": {\n      \"$type\": \"eml20.VerticalCrsEpsgCode\",\n      \"EpsgCode\": 6230\n    },\n    \"VerticalUom\": \"m\",\n    \"XOffset\": 420000,\n    \"YOffset\": 6470000,\n    \"ZIncreasingDownward\": true,\n    \"ZOffset\": 0\n  },\n  {\n    \"$type\": \"eml20.obj_EpcExternalPartReference\",\n    \"Citation\": {\n      \"$type\": \"eml20.Citation\",\n      \"Creation\": \"2014-09-09T15:33:25Z\",\n      \"Format\": \"[F2I-CONSULTING:resqml2CppApi]\",\n      \"Originator\": \"Mathieu\",\n      \"Title\": \"Hdf Proxy\"\n    },\n    \"MimeType\": \"application/x-hdf5\",\n    \"SchemaVersion\": \"2.0.0.20140822\",\n    \"Uuid\": \"68f2a7d4-f7c1-4a75-95e9-3c6a7029fb23\"\n  },\n  {\n    \"$type\": \"resqml20.obj_PointSetRepresentation\",\n    \"Citation\": {\n      \"$type\": \"eml20.Citation\",\n      \"Creation\": \"2019-01-08T13:41:25.000Z\",\n      \"Format\": \"Paradigm SKUA-GOCAD 22 Alpha 1 Build:20210830-0200 (id: origin/master|56050|1fb1cf919c2|20210827-1108) for Linux_x64_2.17_gcc91\",\n      \"Originator\": \"user1\",\n      \"Title\": \"Pointset 1\"\n    },\n    \"ExtraMetadata\": [\n      {\n        \"$type\": \"resqml20.NameValuePair\",\n        \"Name\": \"pdgm/dx/resqml/creatorGroup\",\n        \"Value\": \"Interpreters\"\n      }\n    ],\n    \"NodePatch\": [\n      {\n        \"Count\": 6,\n        \"Geometry\": {\n          \"$type\": \"resqml20.PointGeometry\",\n          \"LocalCrs\": {\n            \"$type\": \"eml20.DataObjectReference\",\n            \"ContentType\": \"application/x-resqml+xml;version=2.0;type=obj_LocalDepth3dCrs\",\n            \"Title\": \"CustomTestCrs\",\n            \"UUID\": \"7c7d7987-b7b9-4215-9014-cb7d6fb62173\"\n          },\n          \"Points\": {\n            \"$type\": \"resqml20.Point3dHdf5Array\",\n            \"Coordinates\": {\n              \"$type\": \"eml20.Hdf5Dataset\",\n              \"HdfProxy\": {\n                \"$type\": \"eml20.DataObjectReference\",\n                \"ContentType\": \"application/x-resqml+xml;version=2.0;type=obj_EpcExternalPartReference\",\n                \"DescriptionString\": \"Hdf Proxy\",\n                \"UUID\": \"68f2a7d4-f7c1-4a75-95e9-3c6a7029fb23\",\n                \"VersionString\": \"1410276805\"\n              },\n              \"PathInHdfFile\": \"/RESQML/5d27775e-5c7f-4786-a048-9a303fa1165a/points_patch0\"\n            }\n          }\n        },\n        \"PatchIndex\": 0\n      }\n    ],\n    \"SchemaVersion\": \"2.0.0.20140822\",\n    \"Uuid\": \"5d27775e-5c7f-4786-a048-9a303fa1165a\"\n  }\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Create new objects by providing their content inside a JSON array.\n    Should be done within a transaction.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "List types inside a dataspace.",
                      "filename": "List types inside a dataspace.bru",
                      "seq": 4,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources?$skip=63292.705567378136&$top=5342.309282611962&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "data-partition-id",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "$skip",
                            "value": "63292.705567378136",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "$top",
                            "value": "5342.309282611962",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "transactionId",
                            "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "dataspaceId",
                            "value": "demo/Volve",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "List the types present in the dataspace, and the number of items for each type.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{dataObjectType}",
                      "filename": "{dataObjectType}",
                      "seq": 3,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{dataObjectType}",
                          "seq": 3
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get the resources of a given type.",
                          "filename": "Get the resources of a given type.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/:dataObjectType?$skip=63292.705567378136&$top=5342.309282611962&$filter=_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data&storeLastWriteFilter=1081-50-40T33:04:08&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8&countObjects=false",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "data-partition-id",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "$skip",
                                "value": "63292.705567378136",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "$top",
                                "value": "5342.309282611962",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "$filter",
                                "value": "_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "storeLastWriteFilter",
                                "value": "1081-50-40T33:04:08",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "transactionId",
                                "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "countObjects",
                                "value": "false",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "dataspaceId",
                                "value": "demo/Volve",
                                "type": "path",
                                "enabled": true
                              },
                              {
                                "name": "dataObjectType",
                                "value": "resqml20.obj_ContinuousProperty",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "List all resources of a given type inside a dataspace.\n    Output can be paginated and filtered by content, last update time.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "{guid}",
                          "filename": "{guid}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{guid}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "arrays",
                              "filename": "arrays",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "arrays",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the description of all arrays.",
                                  "filename": "Get the description of all arrays.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/:dataObjectType/:guid/arrays?version=''IW-qF''",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "data-partition-id",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "version",
                                        "value": "''IW-qF''",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataspaceId",
                                        "value": "demo/Volve",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataObjectType",
                                        "value": "resqml20.obj_ContinuousProperty",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "guid",
                                        "value": "1615d8d2-2a2d-482c-885e-14225b89e90c",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Get the description of a all the arrays (Type and dimensions) referenced by a data object.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "folder",
                                  "name": "{pathInResource}",
                                  "filename": "{pathInResource}",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "{pathInResource}",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Get the content of an array.",
                                      "filename": "Get the content of an array.bru",
                                      "seq": 2,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/:dataObjectType/:guid/arrays/:pathInResource?version=''IW-qF''&starts=404001&starts=417625&counts=527808&counts=214658&format=json&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "data-partition-id",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "version",
                                            "value": "''IW-qF''",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "starts",
                                            "value": "404001",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "starts",
                                            "value": "417625",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "counts",
                                            "value": "527808",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "counts",
                                            "value": "214658",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "format",
                                            "value": "json",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "transactionId",
                                            "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "dataspaceId",
                                            "value": "demo/Volve",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "dataObjectType",
                                            "value": "eml20.obj_EpcExternalPartReference",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "guid",
                                            "value": "53395ada-6f93-4bac-b506-d45997ded2a2",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "pathInResource",
                                            "value": "/RESQML/a3f31b20-c93a-4682-8f6c-71be087202a4/points_patch0",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "For large arrays, it is recommended to use starts and counts and get array by slices. \n      Note that starts and counts need to be used together or not at all.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    },
                                    {
                                      "type": "folder",
                                      "name": "metadata",
                                      "filename": "metadata",
                                      "seq": 1,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "metadata",
                                          "seq": 1
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Get the description of an array.",
                                          "filename": "Get the description of an array.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/:dataObjectType/:guid/arrays/:pathInResource/metadata?version=''IW-qF''&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                            "method": "GET",
                                            "headers": [
                                              {
                                                "name": "data-partition-id",
                                                "value": "data-partition-id",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "version",
                                                "value": "''IW-qF''",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "transactionId",
                                                "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "dataspaceId",
                                                "value": "demo/Volve",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "dataObjectType",
                                                "value": "eml20.obj_EpcExternalPartReference",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "guid",
                                                "value": "53395ada-6f93-4bac-b506-d45997ded2a2",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "pathInResource",
                                                "value": "/RESQML/a3f31b20-c93a-4682-8f6c-71be087202a4/points_patch0",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "Returns type and dimension of the array.",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "http",
                              "name": "Delete existing object.",
                              "filename": "Delete existing object.bru",
                              "seq": 4,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/:dataObjectType/:guid?version=''IW-qF''&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                "method": "DELETE",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "data-partition-id",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "version",
                                    "value": "''IW-qF''",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "transactionId",
                                    "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "dataspaceId",
                                    "value": "demo/Volve",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "dataObjectType",
                                    "value": "resqml20.obj_ContinuousProperty",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "guid",
                                    "value": "1615d8d2-2a2d-482c-885e-14225b89e90c",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Delete existing object.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Get object content.",
                              "filename": "Get object content.bru",
                              "seq": 5,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/:dataObjectType/:guid?version=''IW-qF''&$format=json&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8&arrayMetadata=false&arrayValues=false&referencedContent=true",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "data-partition-id",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "version",
                                    "value": "''IW-qF''",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "$format",
                                    "value": "json",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "transactionId",
                                    "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "arrayMetadata",
                                    "value": "false",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "arrayValues",
                                    "value": "false",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "referencedContent",
                                    "value": "true",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "dataspaceId",
                                    "value": "demo/Volve",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "dataObjectType",
                                    "value": "resqml20.obj_ContinuousProperty",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "guid",
                                    "value": "1615d8d2-2a2d-482c-885e-14225b89e90c",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Get the actual content of a data object formatted as xml or json.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "sources",
                              "filename": "sources",
                              "seq": 2,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "sources",
                                  "seq": 2
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the resources referencing current one.",
                                  "filename": "Get the resources referencing current one.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/:dataObjectType/:guid/sources?version=''IW-qF''&$skip=63292.705567378136&$top=5342.309282611962&$filter=_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data&storeLastWriteFilter=1081-50-40T33:04:08&dataObjectTypes=witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY&depth=781.5783505318485&includeSecondaryTargets=false&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8&countObjects=false",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "data-partition-id",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "version",
                                        "value": "''IW-qF''",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$skip",
                                        "value": "63292.705567378136",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$top",
                                        "value": "5342.309282611962",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$filter",
                                        "value": "_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "storeLastWriteFilter",
                                        "value": "1081-50-40T33:04:08",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataObjectTypes",
                                        "value": "witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "depth",
                                        "value": "781.5783505318485",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "includeSecondaryTargets",
                                        "value": "false",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "transactionId",
                                        "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "countObjects",
                                        "value": "false",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataspaceId",
                                        "value": "demo/Volve",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataObjectType",
                                        "value": "resqml20.obj_ContinuousProperty",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "guid",
                                        "value": "1615d8d2-2a2d-482c-885e-14225b89e90c",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "List all resources referencing a given resource.\n    Referencing can be recursive with a depth greater than 1.\n    Output can be paginated and filtered by content, types and last update time.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "targets",
                              "filename": "targets",
                              "seq": 3,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "targets",
                                  "seq": 3
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the resources referenced by current one.",
                                  "filename": "Get the resources referenced by current one.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/dataspaces/:dataspaceId/resources/:dataObjectType/:guid/targets?version=''IW-qF''&$skip=63292.705567378136&$top=5342.309282611962&$filter=_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data&storeLastWriteFilter=1081-50-40T33:04:08&dataObjectTypes=witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY&depth=781.5783505318485&includeSecondarySources=false&transactionId=d3418249-A2Fd-16aB-583d-24da9Ff2E3b8&countObjects=false",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "data-partition-id",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "version",
                                        "value": "''IW-qF''",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$skip",
                                        "value": "63292.705567378136",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$top",
                                        "value": "5342.309282611962",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "$filter",
                                        "value": "_data2yL9_data_data'|*0'_data'l_oN,am''7rt'B/v5X89 _data",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "storeLastWriteFilter",
                                        "value": "1081-50-40T33:04:08",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataObjectTypes",
                                        "value": "witsml84.obj_6yV4GDNwitsml18.1resqml61.obj_QjMJMEtxKewresqml58.obj_ba14DAyC,eml41.obj_d_34yY",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "depth",
                                        "value": "781.5783505318485",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "includeSecondarySources",
                                        "value": "false",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "transactionId",
                                        "value": "d3418249-A2Fd-16aB-583d-24da9Ff2E3b8",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "countObjects",
                                        "value": "false",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataspaceId",
                                        "value": "demo/Volve",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dataObjectType",
                                        "value": "resqml20.obj_ContinuousProperty",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "guid",
                                        "value": "1615d8d2-2a2d-482c-885e-14225b89e90c",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "List all resources referenced by a given resource.\n    Referencing can be recursive with a depth greater than 1.\n    Output can be paginated and filtered by content, types and last update time.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "transactions",
                  "filename": "transactions",
                  "seq": 6,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "transactions",
                      "seq": 6
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create new transaction.",
                      "filename": "Create new transaction.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/dataspaces/:dataspaceId/transactions",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "data-partition-id",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "dataspaceId",
                            "value": "demo/Volve",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"Retries\": 6,\n  \"TimeoutPeriod\": 1200\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Create new transaction.\n  Returns a transaction ID that can be used to commit (Put) or rollback(Delete).\n  Transaction will be automatically rolled back after the timeout period if no new transaction messages occur.\n  TimeoutPeriod is in seconds and defaults to 300 seconds if not provided.\n  Only one transaction can be active at a time for a given dataspace.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{transactionId}",
                      "filename": "{transactionId}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{transactionId}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Commit transaction.",
                          "filename": "Commit transaction.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/dataspaces/:dataspaceId/transactions/:transactionId",
                            "method": "PUT",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "data-partition-id",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "dataspaceId",
                                "value": "demo/Volve",
                                "type": "path",
                                "enabled": true
                              },
                              {
                                "name": "transactionId",
                                "value": "1615d8d2-2a2d-482c-885e-14225b89e90c",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Commit a transaction using the ID provided by Post.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Rollback transaction.",
                          "filename": "Rollback transaction.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/dataspaces/:dataspaceId/transactions/:transactionId",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "data-partition-id",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "dataspaceId",
                                "value": "demo/Volve",
                                "type": "path",
                                "enabled": true
                              },
                              {
                                "name": "transactionId",
                                "value": "1615d8d2-2a2d-482c-885e-14225b89e90c",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Rollback a transaction using the ID provided by Post.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "multi-resources",
              "filename": "multi-resources",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "multi-resources",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "get-content",
                  "filename": "get-content",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "get-content",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get content or multiple objects.",
                      "filename": "Get content or multiple objects.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/dataspaces/multi-resources/get-content?$format=json&arrayMetadata=false&arrayValues=false&referencedContent=true",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "$format",
                            "value": "json",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "arrayMetadata",
                            "value": "false",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "arrayValues",
                            "value": "false",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "referencedContent",
                            "value": "true",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"uris\": [\n    \"eml:///dataspace('demo/Volve')/resqml20.obj_TriangulatedSetRepresentation(a3f31b20-c93a-4682-8f6c-71be087202a4)\",\n    \"eml:///dataspace('demo/Volve')/resqml20.obj_ContinuousProperty(1615d8d2-2a2d-482c-885e-14225b89e90c)\"\n  ]\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get the actual content of a data objects using a list of uris,\n    formatted as xml or json.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "health",
          "filename": "health",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "health",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "info",
              "filename": "info",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "info",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Check liveness of the server.",
                  "filename": "Check liveness of the server.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/health/info",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Used by to check server availability. Can be used by orchestrator for services availability",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "manifests",
          "filename": "manifests",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "manifests",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "build",
              "filename": "build",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "build",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Create OSDU manifest.",
                  "filename": "Create OSDU manifest.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/manifests/build",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "data-partition-id",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"uris\": [\n    \"eml:///dataspace('demo/Volve')/resqml20.obj_TriangulatedSetRepresentation(a3f31b20-c93a-4682-8f6c-71be087202a4)\",\n    \"eml:///dataspace('demo/Volve')/resqml20.obj_ContinuousProperty(1615d8d2-2a2d-482c-885e-14225b89e90c)\"\n  ],\n  \"acl\": {\n    \"viewers\": [\n      \"4B9\\\\vJJRNuK-v\\\\X3IXT\\\\~lhr67aW2\\\\,GJ+&OYn57O\\\\TTW3wG@h\\\\{SMS\\\\tOHBijOWLNm\\\\Yw8agFAyMWG\\\\HyqD1Z\\\\UUrY\",\n      \"PZ_EGBU+\\\\vs-sGgqXhT\\\\5ljr0\\\\W27\\\\3xW56iyHd8\\\\1i8zJOEz*\\\\C2P__\\\\!rvx47R0J@gzhi2KW\\\\z1\\\\NHAmbZKAXfjY\\\\\\\\L9kef6gd6Cp\\\\Re6xQIFu\\\\kYKb\\\\az0\\\\YAPRrp\"\n    ],\n    \"owners\": [\n      \"Xfb8GiuoDH0\\\\:Tb\\\\M4i\\\\!A4yGkQA\\\\)0nh5YjM\\\\@BMUk9FY0\\\\Qni-YV@XXZ\\\\)fr\\\\GK03lPSeLbHz\\\\>itYjbS\\\\.oCP\\\\^PPIWDzfqFI-\\\\#PeTyh\\\\ikZ-R6YgCTuB\\\\b7OQtoE\\\\1XEuwEqFO\\\\xbVr\",\n      \"F\\\\*hik\\\\WxHh2Z1MbLl+\\\\]*g\\\\z7K9ur06F-G@2bqFMq\\\\b1EH6Mmz\\\\RjgxWyH4J\\\\]fSJ9\\\\=zHOBIu\"\n    ]\n  },\n  \"createMissingReferences\": true,\n  \"fileCollection\": \"\\\\\\\\\\\\.\\\\..ww:dataset\\\\-\\\\-www.\\\\...\\\\.:\\\\..%\",\n  \"legal\": {\n    \"legaltags\": [\n      \"data-partition-id-ReservoirDDMS-Legal-Tag\"\n    ],\n    \"otherRelevantDataCountries\": [\n      \"US\",\n      \"UK\"\n    ]\n  },\n  \"tags\": {},\n  \"technicalAssurances\": [\n    {\n      \"TechnicalAssuranceTypeID\": \"N7dyfLbeU/\",\n      \"AcceptableUsage\": [\n        {\n          \"WorkflowPersona\": \"\\\\:reference-data\\\\-\\\\-WorkflowPersonaType:w::2\",\n          \"WorkflowUsage\": \"w..:reference-data\\\\-\\\\-WorkflowUsageType:%:%.:w::8061\"\n        },\n        {\n          \"WorkflowPersona\": \"\\\\ww\\\\\\\\ww..:reference-data\\\\-\\\\-WorkflowPersonaType::\\\\w:%:%w\\\\:633685\",\n          \"WorkflowUsage\": \"w:reference-data\\\\-\\\\-WorkflowUsageType:%:757178032\"\n        }\n      ],\n      \"Comment\": \"\\\\.w..w..w:reference-data\\\\-\\\\-TechnicalAssuranceType:w%%:\\\\:\\\\.%%%:9595\",\n      \"EffectiveDate\": \"2085-50-08T24:70:63Z\",\n      \"Reviewers\": [\n        {\n          \"DataGovernanceRoleTypeID\": \".....\\\\.w.:reference-data\\\\-\\\\-DataGovernanceRoleType::%.:8738\",\n          \"EmailAddress\": \"PdtPPx3su7z\\\\ 2iyom5BV\\\\:275sLW&_Dm\\\\bzYBv6E9ecgH\\\\=74H1AMp8J1\\\\!sS\\\\v3UstBe\\\\ww7SGRg\\\\kPf\\\\xWjS5z7\\\\kXA@VLtkqoNFYI6\\\\ztRjh\",\n          \"Name\": \"Evergreen\",\n          \"OrganisationID\": \".:master-data\\\\-\\\\-Organisation:%:017983\",\n          \"PhoneNumber\": \"1-555-281-5555\",\n          \"RoleTypeID\": \".\\\\\\\\\\\\:reference-data\\\\-\\\\-ContactRoleType:\\\\.%w:578\",\n          \"WorkflowPersonaTypeID\": \"ww\\\\w.w:reference-data\\\\-\\\\-WorkflowPersonaType:.:05\"\n        },\n        {\n          \"DataGovernanceRoleTypeID\": \"w.ww:reference-data\\\\-\\\\-DataGovernanceRoleType:\\\\.%%.\\\\\\\\::21\",\n          \"EmailAddress\": \"GAfXOWU9_qA\\\\ykyU\\\\Yr5cpsv8wLYk\\\\zft@uUd\\\\c0sf9-8\\\\-ZzG\",\n          \"Name\": \"Evergreen\",\n          \"OrganisationID\": \"..w.w\\\\...ww:master-data\\\\-\\\\-Organisation:.%\\\\ww.:25613684\",\n          \"PhoneNumber\": \"1-555-281-5555\",\n          \"RoleTypeID\": \"\\\\.w.\\\\.\\\\....:reference-data\\\\-\\\\-ContactRoleType:%:w:::998361765\",\n          \"WorkflowPersonaTypeID\": \".:reference-data\\\\-\\\\-WorkflowPersonaType:%:\\\\:989794133\"\n        }\n      ],\n      \"UnacceptableUsage\": [\n        {\n          \"WorkflowPersona\": \"w.\\\\.\\\\\\\\.\\\\.:reference-data\\\\-\\\\-WorkflowPersonaType::\\\\ww.:\\\\:981496\",\n          \"WorkflowUsage\": \"\\\\w\\\\w:reference-data\\\\-\\\\-WorkflowUsageType:%%:506504015\"\n        },\n        {\n          \"WorkflowPersona\": \"\\\\\\\\w:reference-data\\\\-\\\\-WorkflowPersonaType::%%w:w..:833923577\",\n          \"WorkflowUsage\": \"w\\\\:reference-data\\\\-\\\\-WorkflowUsageType:%%%::w:%w:5690095859\"\n        }\n      ]\n    },\n    {\n      \"TechnicalAssuranceTypeID\": \"S80IzvIqc(\",\n      \"AcceptableUsage\": [\n        {\n          \"WorkflowPersona\": \"\\\\ww.:reference-data\\\\-\\\\-WorkflowPersonaType:%.::%:%w\\\\:169071\",\n          \"WorkflowUsage\": \"w\\\\www.\\\\\\\\.:reference-data\\\\-\\\\-WorkflowUsageType:::w:01\"\n        },\n        {\n          \"WorkflowPersona\": \"\\\\\\\\w\\\\w.\\\\.w\\\\.:reference-data\\\\-\\\\-WorkflowPersonaType:::w\\\\.%.:\\\\..:\",\n          \"WorkflowUsage\": \"\\\\w.w\\\\w\\\\w\\\\w:reference-data\\\\-\\\\-WorkflowUsageType:w\\\\w:::%%w:65\"\n        }\n      ],\n      \"Comment\": \"\\\\www.\\\\:reference-data\\\\-\\\\-TechnicalAssuranceType:::839897761\",\n      \"EffectiveDate\": \"4428-89-13T06:41:49Z\",\n      \"Reviewers\": [\n        {\n          \"DataGovernanceRoleTypeID\": \"\\\\\\\\.\\\\..\\\\..\\\\:reference-data\\\\-\\\\-DataGovernanceRoleType:%%%\\\\%\\\\.%\\\\::0\",\n          \"EmailAddress\": \"I@9br\\\\QeO\\\\h0WJzPivz3\\\\{3F\\\\IxjChZ4TKWK\\\\M5trhxhijV9\\\\QZ0F22xvXl\\\\`i5ACnC6XC\\\\-FOmwZvK\",\n          \"Name\": \"Evergreen\",\n          \"OrganisationID\": \"w.w\\\\ww\\\\.w.:master-data\\\\-\\\\-Organisation::w:52313\",\n          \"PhoneNumber\": \"1-555-281-5555\",\n          \"RoleTypeID\": \".ww\\\\:reference-data\\\\-\\\\-ContactRoleType:.:5\",\n          \"WorkflowPersonaTypeID\": \"\\\\w:reference-data\\\\-\\\\-WorkflowPersonaType:w\\\\:%%.%:.:38\"\n        },\n        {\n          \"DataGovernanceRoleTypeID\": \"\\\\w.\\\\\\\\w\\\\w..:reference-data\\\\-\\\\-DataGovernanceRoleType:.:ww\\\\:w:4739\",\n          \"EmailAddress\": \"Q\\\\#bI\\\\u1H@N7vRdkb\\\\rLHX\\\\&EPQpZN\\\\XIO-VNEhQC\\\\-uY4PvwZv\\\\=SCRTMbA4Bn\\\\9byrv\\\\<ifCIWef\",\n          \"Name\": \"Evergreen\",\n          \"OrganisationID\": \"..w.w.\\\\:master-data\\\\-\\\\-Organisation::%.:.:...\\\\::80697049\",\n          \"PhoneNumber\": \"1-555-281-5555\",\n          \"RoleTypeID\": \"\\\\w\\\\.w:reference-data\\\\-\\\\-ContactRoleType:\\\\%..%\\\\:40809\",\n          \"WorkflowPersonaTypeID\": \"\\\\w:reference-data\\\\-\\\\-WorkflowPersonaType:\\\\\\\\:.:%:0753518946\"\n        }\n      ],\n      \"UnacceptableUsage\": [\n        {\n          \"WorkflowPersona\": \"w\\\\\\\\\\\\w\\\\.w:reference-data\\\\-\\\\-WorkflowPersonaType:\\\\:\\\\\\\\.\\\\.%.w\\\\:746091\",\n          \"WorkflowUsage\": \"\\\\\\\\:reference-data\\\\-\\\\-WorkflowUsageType:%:803647\"\n        },\n        {\n          \"WorkflowPersona\": \"\\\\\\\\:reference-data\\\\-\\\\-WorkflowPersonaType:\\\\w:%\\\\.\\\\%w:.:74183\",\n          \"WorkflowUsage\": \"\\\\www\\\\:reference-data\\\\-\\\\-WorkflowUsageType:..w.:\\\\%.::358400\"\n        }\n      ]\n    }\n  ],\n  \"typePatterns\": [\n    \"resqml20.obj_*Representation\"\n  ]\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Create the OSDU manifest for several resources.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Schema Upgrade",
      "filename": "Schema Upgrade",
      "seq": 17,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Schema Upgrade",
          "seq": 17
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 7,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 7
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "liveness_check",
          "filename": "liveness_check",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "liveness_check",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "${healthCheckApi.livenessCheck.summary}",
              "filename": "${healthCheckApi.livenessCheck.summary}.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/liveness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "${healthCheckApi.livenessCheck.description}",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "readiness_check",
          "filename": "readiness_check",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "readiness_check",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "http",
              "name": "${healthCheckApi.readinessCheck.summary}",
              "filename": "${healthCheckApi.readinessCheck.summary}.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/readiness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "${healthCheckApi.readinessCheck.description}",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "upgrade",
          "filename": "upgrade",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "upgrade",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Schema Upgrade",
              "filename": "Schema Upgrade.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/upgrade",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"kind\": \"osdu:wks:work-product-component--WellLog:1.2.0\",\n  \"target\": \"osdu:wks:work-product-component--WellLog:1.2.1\",\n  \"ids\": [\n    \"string\",\n    \"string\"\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Creates a job that performs an upgrade of records from the current kind schema to the target schema.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "job",
          "filename": "job",
          "seq": 6,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "job",
              "seq": 6
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "{jobId}",
              "filename": "{jobId}",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{jobId}",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "batch",
                  "filename": "batch",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "batch",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{batchId}",
                      "filename": "{batchId}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{batchId}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get batch status",
                          "filename": "Get batch status.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/job/:jobId/batch/:batchId",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "jobId",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              },
                              {
                                "name": "batchId",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Fetch detailed information about batch with provided id",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "http",
                  "name": "Get job status",
                  "filename": "Get job status.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/job/:jobId",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "jobId",
                        "value": "string",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Fetch batches that belong to job with provided id",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "refvalupgrade",
          "filename": "refvalupgrade",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "refvalupgrade",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Reference value upgrade",
              "filename": "Reference value upgrade.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/refvalupgrade",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"lookUpId\": \"osdu:reference-data--ReferenceValueUpgradeLookUp:Example-1.0.0\",\n  \"kindList\": [\n    {\n      \"kind\": \"osdu:wks:work-product-component--WellLog:1.2.0\",\n      \"ids\": [\n        \"string\",\n        \"string\"\n      ]\n    },\n    {\n      \"kind\": \"osdu:wks:work-product-component--WellLog:1.2.0\",\n      \"ids\": [\n        \"string\",\n        \"string\"\n      ]\n    }\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Creates a job that upgrades reference values according to the provided lookup specification.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "rollback",
          "filename": "rollback",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "rollback",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Rollback upgrade job",
              "filename": "Rollback upgrade job.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/rollback",
                "method": "POST",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"jobId\": \"example-job-id\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Performs a rollback of a previously created job",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Storage",
      "filename": "Storage",
      "seq": 22,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Storage",
          "seq": 22
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "liveness_check",
          "filename": "liveness_check",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "liveness_check",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Liveness Check endpoint",
              "filename": "Liveness Check endpoint.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/liveness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/liveness_check` endpoint verifies the operational status of the Storage Service.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "records",
          "filename": "records",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "records",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Create or Update Records",
              "filename": "Create or Update Records.bru",
              "seq": 7,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/records?skipdupes=true",
                "method": "PUT",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "x-collaboration",
                    "value": "string",
                    "enabled": false
                  }
                ],
                "params": [
                  {
                    "name": "skipdupes",
                    "value": "true",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "json",
                  "json": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"string\",\n        \"string\"\n      ],\n      \"viewers\": [\n        \"string\",\n        \"string\"\n      ]\n    },\n    \"ancestry\": {\n      \"parents\": [\n        \"string\"\n      ]\n    },\n    \"createTime\": \"string\",\n    \"createUser\": \"string\",\n    \"data\": {\n      \"key_0\": {},\n      \"key_1\": {}\n    },\n    \"id\": \"KkdM24xh7D4:M2w..ty::\",\n    \"kind\": \"string\",\n    \"legal\": {\n      \"legaltags\": [\n        \"string\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"string\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"meta\": [\n      {\n        \"key_0\": {}\n      },\n      {\n        \"key_0\": {}\n      }\n    ],\n    \"modifyTime\": \"string\",\n    \"modifyUser\": \"string\",\n    \"tags\": {\n      \"key_0\": \"string\",\n      \"key_1\": \"string\",\n      \"key_2\": \"string\",\n      \"key_3\": \"string\"\n    },\n    \"version\": 6443\n  },\n  {\n    \"acl\": {\n      \"owners\": [\n        \"string\",\n        \"string\"\n      ],\n      \"viewers\": [\n        \"string\",\n        \"string\"\n      ]\n    },\n    \"ancestry\": {\n      \"parents\": [\n        \"string\"\n      ]\n    },\n    \"createTime\": \"string\",\n    \"createUser\": \"string\",\n    \"data\": {\n      \"key_0\": {},\n      \"key_1\": {}\n    },\n    \"id\": \"RhWy:2:9%QLY4s\",\n    \"kind\": \"string\",\n    \"legal\": {\n      \"legaltags\": [\n        \"string\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"string\"\n      ],\n      \"status\": \"incompliant\"\n    },\n    \"meta\": [\n      {\n        \"key_0\": {}\n      },\n      {\n        \"key_0\": {}\n      }\n    ],\n    \"modifyTime\": \"string\",\n    \"modifyUser\": \"string\",\n    \"tags\": {\n      \"key_0\": \"string\",\n      \"key_1\": \"string\",\n      \"key_2\": \"string\"\n    },\n    \"version\": 2707\n  }\n]",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "The API represents the main injection mechanism into the Data Ecosystem. \nIt allows records creation and/or update.When no record id is provided or when the provided id is not already present in the Data Ecosystem then a new record is created. \n If the id is related to an existing record in the Data Ecosystem then an update operation takes place and a new version of the record is created.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Modify record data and/or metadata attributes using patch operations",
              "filename": "Modify record data and-or metadata attributes using patch operations.bru",
              "seq": 6,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/records",
                "method": "PATCH",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "x-collaboration",
                    "value": "string",
                    "enabled": false
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"ops\": [\n    {\n      \"op\": \"string\",\n      \"path\": \"string\",\n      \"value\": [\n        \"string\"\n      ]\n    },\n    {\n      \"op\": \"string\",\n      \"path\": \"string\",\n      \"value\": [\n        \"string\"\n      ]\n    }\n  ],\n  \"query\": {\n    \"ids\": [\n      \"string\"\n    ]\n  }\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "The API represents the patch update mechanism for records. It allows updating multiple records in one request. The API supports metadata update only (Legal Tags, ACLs and Tags) if the request body media type is `application/json`. The API supports metadata and data update (Legal Tags, ACLs, Tags, Ancestry, Kind, Meta and Data) if the request body media type is `application/json-patch+json`. Please choose the appropriate media type from the Request body dropdown. The currently supported operations are replace, add, and remove. \nRequired roles: `users.datalake.editors` or `users.datalake.admins`.",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "{id}",
              "filename": "{id}",
              "seq": 4,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{id}",
                  "seq": 4
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get latest record version data",
                  "filename": "Get latest record version data.bru",
                  "seq": 4,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/records/:id?attribute=data.wellName",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "x-collaboration",
                        "value": "string",
                        "enabled": false
                      }
                    ],
                    "params": [
                      {
                        "name": "attribute",
                        "value": "data.wellName",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "id",
                        "value": "tenant1:well:123456789",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "This API returns the latest version of the given record.\nAllowed roles: `service.storage.viewer`, `service.storage.creator` and `service.storage.admin`.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Purge Record",
                  "filename": "Purge Record.bru",
                  "seq": 3,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/records/:id",
                    "method": "DELETE",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "x-collaboration",
                        "value": "string",
                        "enabled": false
                      }
                    ],
                    "params": [
                      {
                        "name": "id",
                        "value": "tenant1:well:123456789",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "The API performs the physical deletion of the given record and all of its versions.\n This operation cannot be undone. \nAllowed roles: `service.storage.admin` who is the OWNER of the record.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "versions",
                  "filename": "versions",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "versions",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Purge Record Versions",
                      "filename": "Purge Record Versions.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/records/:id/versions?versionIds=1710393736116773,1710393736116774&limit=500&from=123456789",
                        "method": "DELETE",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "x-collaboration",
                            "value": "string",
                            "enabled": false
                          }
                        ],
                        "params": [
                          {
                            "name": "versionIds",
                            "value": "1710393736116773,1710393736116774",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "500",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "from",
                            "value": "123456789",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "id",
                            "value": "tenant1:well:123456789",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "The API for the given record id performs the permanent physical deletion of the record versions excluding latest version and any linked records or files if there are any.\n `versionIds` or `limit` or `from` request parameters used to delete the record versions.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "{version}",
                  "filename": "{version}",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{version}",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Specific record",
                      "filename": "Get Specific record.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/records/:id/:version?attribute=data.wellName",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "x-collaboration",
                            "value": "string",
                            "enabled": false
                          }
                        ],
                        "params": [
                          {
                            "name": "attribute",
                            "value": "data.wellName",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "id",
                            "value": "tenant1:well:123456789",
                            "type": "path",
                            "enabled": true
                          },
                          {
                            "name": "version",
                            "value": "123456789",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "The API retrieves the specific version of the given record. \nAllowed roles: `service.storage.viewer`, `service.storage.creator` and `service.storage.admin`.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "{id}:delete",
              "filename": "{id}-delete",
              "seq": 5,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{id}:delete",
                  "seq": 5
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Delete Record",
                  "filename": "Delete Record.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/records/{{id}}:delete",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "x-collaboration",
                        "value": "string",
                        "enabled": false
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "The API performs a logical deletion of the record using recordId. This operation can be reverted later. \nAllowed roles: `service.storage.creator` and `service.storage.admin` who is the OWNER of the record.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "versions",
              "filename": "versions",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "versions",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "{id}",
                  "filename": "{id}",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{id}",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get record versions",
                      "filename": "Get record versions.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/records/versions/:id",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "x-collaboration",
                            "value": "string",
                            "enabled": false
                          }
                        ],
                        "params": [
                          {
                            "name": "id",
                            "value": "tenant1:well:123456789",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "The API returns a list containing all versions for the given record id. \nAllowed roles: `service.storage.viewer`, `service.storage.creator` and `service.storage.admin`.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "delete",
              "filename": "delete",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "delete",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Soft delete of multiple records",
                  "filename": "Soft delete of multiple records.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/records/delete",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      },
                      {
                        "name": "x-collaboration",
                        "value": "string",
                        "enabled": false
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "[\n  \"string\",\n  \"string\"\n]",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "The API performs a soft deletion of the given list of records. \nRequired roles: `users.datalake.editors` or `users.datalake.admins` who is the OWNER of the record.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "copy",
              "filename": "copy",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "copy",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Copy Record references form one namespace to another",
                  "filename": "Copy Record references form one namespace to another.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/records/copy",
                    "method": "PUT",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "x-collaboration",
                        "value": "string",
                        "enabled": false
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"records\": [\n    {\n      \"id\": \"string\",\n      \"version\": \"string\"\n    },\n    {\n      \"id\": \"string\",\n      \"version\": \"string\"\n    }\n  ],\n  \"target\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "This API attempts to copy all the Record references it is provided from the given source namespace to the target namespace. All references will be copied or all will fail as a transaction. If the target namespace does not et exist it will be created. It requires 'services.storage.admin' permission to call",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "query",
          "filename": "query",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "query",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "records",
              "filename": "records",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "records",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Fetch records",
                  "filename": "Fetch records.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/query/records",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "x-collaboration",
                        "value": "string",
                        "enabled": false
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"attributes\": [\n    \"string\",\n    \"string\"\n  ],\n  \"records\": [\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\",\n    \"string\"\n  ]\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "The API fetches multiple records at once.\nAllowed roles: `service.storage.viewer`,`service.storage.creator` and `service.storage.admin`.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Get all record from kind",
                  "filename": "Get all record from kind.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/query/records?cursor=string&limit=10&kind=tenant1:public:well:1.0.2",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "x-collaboration",
                        "value": "string",
                        "enabled": false
                      }
                    ],
                    "params": [
                      {
                        "name": "cursor",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "10",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "kind",
                        "value": "tenant1:public:well:1.0.2",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "The API returns a list of all record ids which belong to the specified kind.\nAllowed roles: `service.storage.admin`.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "records:batch",
              "filename": "records-batch",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "records:batch",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Fetch multiple records",
                  "filename": "Fetch multiple records.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/query/records:batch",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "frame-of-reference",
                        "value": "units=SI;crs=wgs84;elevation=msl;azimuth=true north;dates=utc;",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "x-collaboration",
                        "value": "string",
                        "enabled": false
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"records\": [\n    \"string\"\n  ]\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "The API fetches multiple records at once in the specific {data-partition-id}.The value of {frame-of-reference} indicates whether normalization is applied.\nRequired roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Secret",
      "filename": "Secret",
      "seq": 19,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Secret",
          "seq": 19
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "v2",
          "filename": "v2",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v2",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "secrets",
              "filename": "secrets",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "secrets",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Create a new Secret",
                  "filename": "Create a new Secret.bru",
                  "seq": 3,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v2/secrets",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"id\": \"string\",\n  \"value\": \"string\",\n  \"secretAcls\": {\n    \"viewers\": [\n      \"string\",\n      \"string\"\n    ],\n    \"owners\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  \"metadata\": {\n    \"key_0\": {},\n    \"key_1\": {},\n    \"key_2\": {},\n    \"key_3\": {}\n  },\n  \"enabled\": true\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Create a new V2 Secret based on the details in the request body.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "{secretId}",
                  "filename": "{secretId}",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{secretId}",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Delete Secret",
                      "filename": "Delete Secret.bru",
                      "seq": 5,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/secrets/:secretId",
                        "method": "DELETE",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "secretId",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Delete V2 Secret based on the secret name.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "disable",
                      "filename": "disable",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "disable",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Disables V2 secret.",
                          "filename": "Disables V2 secret.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v2/secrets/:secretId/disable",
                            "method": "PATCH",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "*/*",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "secretId",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Disable V2 secret, forbidding it fetching by readers.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "enable",
                      "filename": "enable",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "enable",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Enables V2 secret.",
                          "filename": "Enables V2 secret.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v2/secrets/:secretId/enable",
                            "method": "PATCH",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "*/*",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "secretId",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Enables previously disabled V2 secret.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "http",
                      "name": "Get Secret V2.",
                      "filename": "Get Secret V2.bru",
                      "seq": 3,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/secrets/:secretId",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "secretId",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Secret V2 details based on the secret name.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Update Secret",
                      "filename": "Update Secret.bru",
                      "seq": 4,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/secrets/:secretId",
                        "method": "PUT",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "secretId",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"id\": \"string\",\n  \"value\": \"string\",\n  \"secretAcls\": {\n    \"viewers\": [\n      \"string\",\n      \"string\"\n    ],\n    \"owners\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  \"metadata\": {\n    \"key_0\": {},\n    \"key_1\": {},\n    \"key_2\": {},\n    \"key_3\": {}\n  },\n  \"enabled\": true\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Update existing V2 Secret with a new value.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "list",
                  "filename": "list",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "list",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get all V2 Secrets ids.",
                      "filename": "Get all V2 Secrets ids.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/secrets/list",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get all V2 Secrets IDs in a tenant.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "Get multiple V2 Secrets.",
                      "filename": "Get multiple V2 Secrets.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v2/secrets/list",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "[\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\",\n  \"string\"\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get up to 20 V2 secrets by IDs, access for each secret is required.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Seismic File Metadata",
      "filename": "Seismic File Metadata",
      "seq": 21,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Seismic File Metadata",
          "seq": 21
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "v2",
          "filename": "v2",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v2",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "openzgy",
              "filename": "openzgy",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "openzgy",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "bingrid",
                  "filename": "bingrid",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "bingrid",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Bingrid",
                      "filename": "Get Bingrid.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/openzgy/bingrid?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns bingrid of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "headers",
                  "filename": "headers",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "headers",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Headers",
                      "filename": "Get Headers.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/openzgy/headers?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns headers of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "segy",
              "filename": "segy",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "segy",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "binaryHeader",
                  "filename": "binaryHeader",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "binaryHeader",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Binary Header",
                      "filename": "Get Binary Header.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/segy/binaryHeader?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns binary header of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "rawTraceHeaders",
                  "filename": "rawTraceHeaders",
                  "seq": 4,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "rawTraceHeaders",
                      "seq": 4
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Raw Trace Headers",
                      "filename": "Get Raw Trace Headers.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/segy/rawTraceHeaders?sdpath=string&start_trace=3797&traces_to_dump=1858&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "start_trace",
                            "value": "3797",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "traces_to_dump",
                            "value": "1858",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns raw trace headers of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "extendedTextualHeaders",
                  "filename": "extendedTextualHeaders",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "extendedTextualHeaders",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Extended Textual Headers",
                      "filename": "Get Extended Textual Headers.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/segy/extendedTextualHeaders?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns extended textual headers of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "scaledTraceHeaders",
                  "filename": "scaledTraceHeaders",
                  "seq": 6,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "scaledTraceHeaders",
                      "seq": 6
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Scaled Trace Headers",
                      "filename": "Get Scaled Trace Headers.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/segy/scaledTraceHeaders?sdpath=string&start_trace=3797&traces_to_dump=1858&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "start_trace",
                            "value": "3797",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "traces_to_dump",
                            "value": "1858",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns scaled trace headers of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "revision",
                  "filename": "revision",
                  "seq": 5,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "revision",
                      "seq": 5
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Revision",
                      "filename": "Get Revision.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/segy/revision?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns revision of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "is3D",
                  "filename": "is3D",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "is3D",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Is 3D",
                      "filename": "Get Is 3D.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/segy/is3D?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns 1 if given dataset is 3D</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "textualHeader",
                  "filename": "textualHeader",
                  "seq": 7,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "textualHeader",
                      "seq": 7
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Textual Header",
                      "filename": "Get Textual Header.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/segy/textualHeader?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns textual header of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "traceHeaderFieldCount",
                  "filename": "traceHeaderFieldCount",
                  "seq": 8,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "traceHeaderFieldCount",
                      "seq": 8
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Trace Header Field Count",
                      "filename": "Get Trace Header Field Count.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v2/segy/traceHeaderFieldCount?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns trace header field count of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "v1",
          "filename": "v1",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v1",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "segy",
              "filename": "segy",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "segy",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "extendedTextualHeaders",
                  "filename": "extendedTextualHeaders",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "extendedTextualHeaders",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Extended Textual Headers",
                      "filename": "Get Extended Textual Headers.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/segy/extendedTextualHeaders?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns extended textual headers of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "is3D",
                  "filename": "is3D",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "is3D",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Is 3D",
                      "filename": "Get Is 3D.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/segy/is3D?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns 1 if given dataset is 3D</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "revision",
                  "filename": "revision",
                  "seq": 5,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "revision",
                      "seq": 5
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Revision",
                      "filename": "Get Revision.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/segy/revision?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns revision of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "binaryHeader",
                  "filename": "binaryHeader",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "binaryHeader",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Binary Header",
                      "filename": "Get Binary Header.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/segy/binaryHeader?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns binary header of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "scaledTraceHeaders",
                  "filename": "scaledTraceHeaders",
                  "seq": 6,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "scaledTraceHeaders",
                      "seq": 6
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Scaled Trace Headers",
                      "filename": "Get Scaled Trace Headers.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/segy/scaledTraceHeaders?sdpath=string&start_trace=3797&traces_to_dump=1858&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "start_trace",
                            "value": "3797",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "traces_to_dump",
                            "value": "1858",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns scaled trace headers of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "traceHeaderFieldCount",
                  "filename": "traceHeaderFieldCount",
                  "seq": 8,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "traceHeaderFieldCount",
                      "seq": 8
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Trace Header Field Count",
                      "filename": "Get Trace Header Field Count.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/segy/traceHeaderFieldCount?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns trace header field count of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "textualHeader",
                  "filename": "textualHeader",
                  "seq": 7,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "textualHeader",
                      "seq": 7
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Textual Header",
                      "filename": "Get Textual Header.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/segy/textualHeader?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns textual header of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "rawTraceHeaders",
                  "filename": "rawTraceHeaders",
                  "seq": 4,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "rawTraceHeaders",
                      "seq": 4
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Raw Trace Headers",
                      "filename": "Get Raw Trace Headers.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/segy/rawTraceHeaders?sdpath=string&start_trace=3797&traces_to_dump=1858&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "start_trace",
                            "value": "3797",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "traces_to_dump",
                            "value": "1858",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns raw trace headers of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "service-status",
              "filename": "service-status",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "service-status",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Get Status",
                  "filename": "Get Status.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/seismic-file-metadata/api/v1/service-status",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul><li>Returns service status</li><li>Required roles:<ul><li>None</li></ul></li></ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "openzgy",
              "filename": "openzgy",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "openzgy",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "headers",
                  "filename": "headers",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "headers",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Headers",
                      "filename": "Get Headers.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/openzgy/headers?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns headers of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "bingrid",
                  "filename": "bingrid",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "bingrid",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get Bingrid",
                      "filename": "Get Bingrid.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/seismic-file-metadata/api/v1/openzgy/bingrid?sdpath=string&api_key_header=DEFAULT_API_KEY",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "sdpath",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "api_key_header",
                            "value": "DEFAULT_API_KEY",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Returns bingrid of the given dataset.</li><li>Required roles:<ul><li>subproject.viewer: if the applied subproject policy is 'uniform'</li><li>dataset.viewer: if the applied subproject policy is 'dataset'</li></ul></li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "service-status",
          "filename": "service-status",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "service-status",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Get Status",
              "filename": "Get Status.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/seismic-file-metadata/api/service-status",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>Returns service status</li><li>Required roles:<ul><li>None</li></ul></li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Well Delivery DDMS",
      "filename": "Well Delivery DDMS",
      "seq": 24,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Well Delivery DDMS",
          "seq": 24
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "activityPlans",
          "filename": "activityPlans",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "activityPlans",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "by_well",
                  "filename": "by_well",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_well",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{well_id}",
                      "filename": "{well_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{well_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get the Activity Plan object from a well",
                          "filename": "Get the Activity Plan object from a well.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/activityPlans/v1/by_well/:well_id",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "well_id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns the Activity Plan object from a well id.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "holeSections",
          "filename": "holeSections",
          "seq": 6,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "holeSections",
              "seq": 6
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "by_wellbore",
                  "filename": "by_wellbore",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_wellbore",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{wellbore_id}",
                      "filename": "{wellbore_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellbore_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get a list of hole section objects for a wellbore",
                          "filename": "Get a list of hole section objects for a wellbore.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/holeSections/v1/by_wellbore/:wellbore_id",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "*/*",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellbore_id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns a list of hole section objects for a wellbore id. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "bhaRuns",
          "filename": "bhaRuns",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "bhaRuns",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "by_wells",
                  "filename": "by_wells",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_wells",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{well_ids}:planned",
                      "filename": "{well_ids}-planned",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{well_ids}:planned",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get a list of actual BHA Run objects for a by_wells",
                          "filename": "Get a list of actual BHA Run objects for a by_wells.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/bhaRuns/v1/by_wells/{{well_ids}}:planned",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns a list of actual BHA Run objects for a planned wells id.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "by_holeSection",
                  "filename": "by_holeSection",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_holeSection",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{hole_section_id}",
                      "filename": "{hole_section_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{hole_section_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get a list of BHA Run objects for a hole section",
                          "filename": "Get a list of BHA Run objects for a hole section.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/bhaRuns/v1/by_holeSection/:hole_section_id",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "hole_section_id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns a list of BHA Run objects for a hole section id. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "by_wellbore",
                  "filename": "by_wellbore",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_wellbore",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{wellbore_id}:actual",
                      "filename": "{wellbore_id}-actual",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellbore_id}:actual",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get a list of actual BHA Run objects for a wellbore",
                          "filename": "Get a list of actual BHA Run objects for a wellbore.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/bhaRuns/v1/by_wellbore/{{wellbore_id}}:actual",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns a list of actual BHA Run objects for a wellbore id. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "query",
          "filename": "query",
          "seq": 9,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "query",
              "seq": 9
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "{type}",
                  "filename": "{type}",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{type}",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "by_wellbore",
                      "filename": "by_wellbore",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "by_wellbore",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{wellbore_id}:actual",
                          "filename": "{wellbore_id}-actual",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{wellbore_id}:actual",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get a list of actual <type> objects for a wellbore",
                              "filename": "Get a list of actual -type- objects for a wellbore.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/query/v1/:type/by_wellbore/{{wellbore_id}}:actual",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "type",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns actual <type> objects for the given wellbore id. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "{wellbore_id}:planned",
                          "filename": "{wellbore_id}-planned",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{wellbore_id}:planned",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get a list of planned <type> objects for a wellbore",
                              "filename": "Get a list of planned -type- objects for a wellbore.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/query/v1/:type/by_wellbore/{{wellbore_id}}:planned",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "type",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns planned <type> objects for the given wellbore id.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "by_well",
                  "filename": "by_well",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_well",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{type}:batch",
                      "filename": "{type}-batch",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{type}:batch",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get a list of entity objects for a list of wells",
                          "filename": "Get a list of entity objects for a list of wells.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/query/v1/by_well/{{type}}:batch",
                            "method": "POST",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Content-Type",
                                "value": "application/json",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "json",
                              "json": "[\n  \"string\",\n  \"string\"\n]",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns a list of entity objects for a list of wells.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "fluidsPrograms",
          "filename": "fluidsPrograms",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "fluidsPrograms",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "by_wellbore",
                  "filename": "by_wellbore",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_wellbore",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{wellbore_id}",
                      "filename": "{wellbore_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellbore_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get fluids program objects for the given wellbore id",
                          "filename": "Get fluids program objects for the given wellbore id.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/fluidsPrograms/v1/by_wellbore/:wellbore_id",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellbore_id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns fluids program objects for the given wellbore id. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "fluidsReports",
          "filename": "fluidsReports",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "fluidsReports",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "by_wellbore",
                  "filename": "by_wellbore",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_wellbore",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{wellbore_id}",
                      "filename": "{wellbore_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellbore_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get fluids report objects for the given wellbore id",
                          "filename": "Get fluids report objects for the given wellbore id.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/fluidsReports/v1/by_wellbore/:wellbore_id",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellbore_id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns fluids report objects for the given wellbore id. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "wellActivityPrograms",
          "filename": "wellActivityPrograms",
          "seq": 11,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "wellActivityPrograms",
              "seq": 11
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "full_content",
                  "filename": "full_content",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "full_content",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "by_well",
                      "filename": "by_well",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "by_well",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{well_id}",
                          "filename": "{well_id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{well_id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get the latest version of well activity program with a lists of children",
                              "filename": "Get the latest version of well activity program with a lists of children.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wellActivityPrograms/v1/full_content/by_well/:well_id",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "well_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns the latest version of well activity program with a lists of children for a well. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "by_well",
                  "filename": "by_well",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_well",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{well_id}",
                      "filename": "{well_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{well_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get the latest version of well activity program",
                          "filename": "Get the latest version of well activity program.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/wellActivityPrograms/v1/by_well/:well_id",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "well_id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns latest version of well activity program for the given well id. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "{wap_version}",
                          "filename": "{wap_version}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{wap_version}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get a specific version of well activity program",
                              "filename": "Get a specific version of well activity program.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wellActivityPrograms/v1/by_well/:well_id/:wap_version",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "well_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "wap_version",
                                    "value": "5688",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns specific version of well activity program for the given well id and well activity program version. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "reference_tree",
                  "filename": "reference_tree",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "reference_tree",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "by_well",
                      "filename": "by_well",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "by_well",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{well_id}",
                          "filename": "{well_id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{well_id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get the latest version of well activity program with a lists of URI",
                              "filename": "Get the latest version of well activity program with a lists of URI.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wellActivityPrograms/v1/reference_tree/by_well/:well_id",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "well_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns the latest version of well activity program with a lists of URI references for a well. <p>Required roles: `service.storage.viewer`,`service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{wap_version}",
                              "filename": "{wap_version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{wap_version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get a specific version of well activity program with a lists of URI references",
                                  "filename": "Get a specific version of well activity program with a lists of URI references.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/wellActivityPrograms/v1/reference_tree/by_well/:well_id/:wap_version",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "well_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "wap_version",
                                        "value": "5688",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "The API returns a specific version of well activity program with a lists of URI references for a well. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "versions",
                  "filename": "versions",
                  "seq": 4,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "versions",
                      "seq": 4
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "by_well",
                      "filename": "by_well",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "by_well",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{well_id}",
                          "filename": "{well_id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{well_id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get the version number list of well activity program",
                              "filename": "Get the version number list of well activity program.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wellActivityPrograms/v1/versions/by_well/:well_id",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "well_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns version number list of well activity program for the given well id. <p>Required roles: `service.storage.viewer`,`service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "operationsReports",
          "filename": "operationsReports",
          "seq": 8,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "operationsReports",
              "seq": 8
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "by_timeRange",
                  "filename": "by_timeRange",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_timeRange",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{start_time}",
                      "filename": "{start_time}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{start_time}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{end_time}",
                          "filename": "{end_time}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{end_time}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get a list of operations report objects for the given time range",
                              "filename": "Get a list of operations report objects for the given time range.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/operationsReports/v1/by_timeRange/:start_time/:end_time",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "start_time",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "end_time",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns a list of operations report objects for the given time range. Date time format can be 'yyyyMMdd', 'yyyy-MM-dd', 'yyyy-M-d','yyyy-MM-ddTHH:mm:ss' or 'yyyy-MM-ddTHH:mm:ssZ'. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "by_wellbore",
                  "filename": "by_wellbore",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_wellbore",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{wellbore_id}",
                      "filename": "{wellbore_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellbore_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get all available operations report objects for the given wellbore id",
                          "filename": "Get all available operations report objects for the given wellbore id.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/operationsReports/v1/by_wellbore/:wellbore_id",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellbore_id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns all available operations report objects for the given wellbore id.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "reference_tree",
                  "filename": "reference_tree",
                  "seq": 4,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "reference_tree",
                      "seq": 4
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "by_operationsReport",
                      "filename": "by_operationsReport",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "by_operationsReport",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{operations_report_id}",
                          "filename": "{operations_report_id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{operations_report_id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get the latest version of operations report with a lists of URI references",
                              "filename": "Get the latest version of operations report with a lists of URI references.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/operationsReports/v1/reference_tree/by_operationsReport/:operations_report_id",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "operations_report_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns the latest version of operations report with a lists of URI references. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "latest",
                  "filename": "latest",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "latest",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "by_wellbore",
                      "filename": "by_wellbore",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "by_wellbore",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{wellbore_id}",
                          "filename": "{wellbore_id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{wellbore_id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get latest operations report object for the given wellbore id",
                              "filename": "Get latest operations report object for the given wellbore id.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/operationsReports/v1/latest/by_wellbore/:wellbore_id",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "wellbore_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns latest operations report object for the given wellbore id.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "wellboreTrajectories",
          "filename": "wellboreTrajectories",
          "seq": 12,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "wellboreTrajectories",
              "seq": 12
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "by_wells",
                  "filename": "by_wells",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_wells",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{well_ids}:planned",
                      "filename": "{well_ids}-planned",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{well_ids}:planned",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "${A.B.summary}",
                          "filename": "${A.B.summary}.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/wellboreTrajectories/v1/by_wells/{{well_ids}}:planned",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "${A.B.description}",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 7,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 7
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Version info",
              "filename": "Version info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "wells",
          "filename": "wells",
          "seq": 14,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "wells",
              "seq": 14
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "versions",
                  "filename": "versions",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "versions",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "by_name",
                      "filename": "by_name",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "by_name",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{name}:actual",
                          "filename": "{name}-actual",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{name}:actual",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get the version number list of actual well",
                              "filename": "Get the version number list of actual well.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wells/v1/versions/by_name/{{name}}:actual",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns version number list of actual well for the given name.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "{name}:planned",
                          "filename": "{name}-planned",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{name}:planned",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get the version number list of planned well",
                              "filename": "Get the version number list of planned well.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wells/v1/versions/by_name/{{name}}:planned",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns version number list of planned well for the given name.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "by_name",
                  "filename": "by_name",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_name",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{name}",
                      "filename": "{name}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{name}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{version}:actual",
                          "filename": "{version}-actual",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{version}:actual",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get a specific version of actual well object for the given name",
                              "filename": "Get a specific version of actual well object for the given name.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wells/v1/by_name/:name/{{version}}:actual",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "name",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns a specific version of actual well object for the given name.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "{version}:planned",
                          "filename": "{version}-planned",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{version}:planned",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get a specific version of planned well object for the given name",
                              "filename": "Get a specific version of planned well object for the given name.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wells/v1/by_name/:name/{{version}}:planned",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "name",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns a specific version of planned well object for the given name.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "{name}:actual",
                      "filename": "{name}-actual",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{name}:actual",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get a latest version of actual well object for the given name",
                          "filename": "Get a latest version of actual well object for the given name.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/wells/v1/by_name/{{name}}:actual",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns actual well object for given name.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "{name}:planned",
                      "filename": "{name}-planned",
                      "seq": 3,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{name}:planned",
                          "seq": 3
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get a latest version of planned well object for the given name",
                          "filename": "Get a latest version of planned well object for the given name.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/wells/v1/by_name/{{name}}:planned",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns a latest version of planned well object for given name.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "storage",
          "filename": "storage",
          "seq": 10,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "storage",
              "seq": 10
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "{type}",
                  "filename": "{type}",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{type}",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create or update entity",
                      "filename": "Create or update entity.bru",
                      "seq": 4,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/storage/v1/:type",
                        "method": "PUT",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "type",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "The API represents the main injection mechanism into the Object Database. It allows entity creation and/or update. When no entity id is provided or when the provided id is not already present in the ObjectDatabase then a new entity is created. If the id is related to an existing entity in the Object Database then an update operation takes place and a new version of the entity is created. <p>Required roles: `service.storage.creator` or `service.storage.admin`.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "versions",
                      "filename": "versions",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "versions",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{id}",
                          "filename": "{id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get all entity version numbers",
                              "filename": "Get all entity version numbers.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/storage/v1/:type/versions/:id",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "type",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns a list containing all version numbers for the given entity type and id. <p>Required roles: `service.storage.viewer`,`service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "{id}",
                      "filename": "{id}",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{id}",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete entity",
                          "filename": "Delete entity.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/storage/v1/:type/:id",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "type",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              },
                              {
                                "name": "id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API performs a logical deletion of the given entity and all of its versions. This operation can be reverted later. <p>Required roles: `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Get latest versio of entity",
                          "filename": "Get latest versio of entity.bru",
                          "seq": 4,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/storage/v1/:type/:id",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "type",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              },
                              {
                                "name": "id",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "This API returns the latest version of the given entity type and id.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "{version}",
                          "filename": "{version}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{version}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Delete a specific version of entity",
                              "filename": "Delete a specific version of entity.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/storage/v1/:type/:id/:version",
                                "method": "DELETE",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "type",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "version",
                                    "value": "5688",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API performs a logical deletion of the given entity type, id, and version number.This operation can be reverted later. <p>Required roles: `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Get a specific version of the given entity",
                              "filename": "Get a specific version of the given entity.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/storage/v1/:type/:id/:version",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "type",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "version",
                                    "value": "5688",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API retrieves the specific version of the given entity type and id.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "{version}:purge",
                          "filename": "{version}-purge",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{version}:purge",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Purge a specific version of entity",
                              "filename": "Purge a specific version of entity.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/storage/v1/:type/:id/{{version}}:purge",
                                "method": "DELETE",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "*/*",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "type",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API performs a physical deletion of the given entity type, id, and versions.This operation cannot be undone. <p>Required roles: `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "{id}:purge",
                      "filename": "{id}-purge",
                      "seq": 3,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{id}:purge",
                          "seq": 3
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Purge entity",
                          "filename": "Purge entity.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/storage/v1/:type/{{id}}:purge",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "type",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API performs a physical deletion of the given entity and all of its versions.This operation cannot be undone. <p>Required roles: `service.storage.creator` or `service.storage.admin`.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "wellbores",
          "filename": "wellbores",
          "seq": 13,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "wellbores",
              "seq": 13
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v1",
              "filename": "v1",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v1",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "by_well",
                  "filename": "by_well",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "by_well",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "{well_id}",
                      "filename": "{well_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{well_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{wellbore_version}:actual",
                          "filename": "{wellbore_version}-actual",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{wellbore_version}:actual",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get a specific version of actual wellbore",
                              "filename": "Get a specific version of actual wellbore.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wellbores/v1/by_well/:well_id/{{wellbore_version}}:actual",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "well_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns specific version of actual wellbore for the given well id and well activity program version. <p>Required roles: `service.storage.viewer`,  `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "{wellbore_version}:planned",
                          "filename": "{wellbore_version}-planned",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{wellbore_version}:planned",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get a specific version of planned wellbore",
                              "filename": "Get a specific version of planned wellbore.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wellbores/v1/by_well/:well_id/{{wellbore_version}}:planned",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "well_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns specific version of planned wellbore for the given well id and well activity program version. <p>Required roles: `service.storage.viewer`,  `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "{well_id}:actual",
                      "filename": "{well_id}-actual",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{well_id}:actual",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get the latest version of actual wellbore",
                          "filename": "Get the latest version of actual wellbore.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/wellbores/v1/by_well/{{well_id}}:actual",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns latest version of actual wellbore for the given well id.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "{well_id}:planned",
                      "filename": "{well_id}-planned",
                      "seq": 3,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{well_id}:planned",
                          "seq": 3
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get the latest version of planned wellbore",
                          "filename": "Get the latest version of planned wellbore.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/wellbores/v1/by_well/{{well_id}}:planned",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "The API returns latest version of planned wellbore for the given well id.<p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "versions",
                  "filename": "versions",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "versions",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "by_well",
                      "filename": "by_well",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "by_well",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{well_id}:actual",
                          "filename": "{well_id}-actual",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{well_id}:actual",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get the version number list of actual wellbore",
                              "filename": "Get the version number list of actual wellbore.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wellbores/v1/versions/by_well/{{well_id}}:actual",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns version number list of actual wellbore for the given well id. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "{well_id}:planned",
                          "filename": "{well_id}-planned",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{well_id}:planned",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get the version number list of planned wellbore",
                              "filename": "Get the version number list of planned wellbore.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/wellbores/v1/versions/by_well/{{well_id}}:planned",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "The API returns version number list of planned wellbore for the given well id. <p>Required roles: `service.storage.viewer`, `service.storage.creator` or `service.storage.admin`.</p>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "_ah",
          "filename": "_ah",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "_ah",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "warmup",
              "filename": "warmup",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "warmup",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Liveness Check endpoint",
                  "filename": "Liveness Check endpoint.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/_ah/warmup",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/liveness_check` endpoint, which provides `Workflow service is alive` message.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Workflow",
      "filename": "Workflow",
      "seq": 26,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Workflow",
          "seq": 26
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "liveness_check",
          "filename": "liveness_check",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "liveness_check",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Liveness Check endpoint",
              "filename": "Liveness Check endpoint.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/liveness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/liveness_check` endpoint, which provides `Workflow service is alive` message.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "readiness_check",
          "filename": "readiness_check",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "readiness_check",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Readiness Check endpoint",
              "filename": "Readiness Check endpoint.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/readiness_check",
                "method": "GET",
                "headers": [
                  {
                    "name": "data-partition-id",
                    "value": "string",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "*/*",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "For deployment available public `/readiness_check` endpoint, which provides `Workflow service is ready` message.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "v1",
          "filename": "v1",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v1",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "workflow",
              "filename": "workflow",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "workflow",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Creates workflow definition with standard orchestrator operators.",
                  "filename": "Creates workflow definition with standard orchestrator operators.bru",
                  "seq": 4,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v1/workflow",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"description\": \"string\",\n  \"registrationInstructions\": {\n    \"key_0\": {},\n    \"key_1\": {}\n  },\n  \"workflowName\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "API to create a new workflow using standard operators of orchestrator. **Required roles** - 'service.workflow.admin'.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "List all the workflow applicable for a tenant.",
                  "filename": "List all the workflow applicable for a tenant.bru",
                  "seq": 3,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v1/workflow?prefix=string",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "*/*",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "prefix",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "List all the workflows for the tenant. **Required roles** - 'service.workflow.viewer'.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "{workflow_name}",
                  "filename": "{workflow_name}",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{workflow_name}",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Delete a workflow defintion.",
                      "filename": "Delete a workflow defintion.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v1/workflow/:workflow_name",
                        "method": "DELETE",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "workflow_name",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Delete a workflow by it's name. **Required roles** - 'service.workflow.admin'.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "workflowRun",
                      "filename": "workflowRun",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "workflowRun",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Get all run instances of a workflow.",
                          "filename": "Get all run instances of a workflow.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v1/workflow/:workflow_name/workflowRun?key_0=[object Object]&key_1=[object Object]&key_2=[object Object]",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "key_0",
                                "value": "[object Object]",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "key_1",
                                "value": "[object Object]",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "key_2",
                                "value": "[object Object]",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "workflow_name",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get all run instances for a worflow. **Required roles** - 'service.workflow.viewer'.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Trigger a workflow.",
                          "filename": "Trigger a workflow.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v1/workflow/:workflow_name/workflowRun",
                            "method": "POST",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Content-Type",
                                "value": "application/json",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "workflow_name",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "json",
                              "json": "{\n  \"executionContext\": {\n    \"key_0\": {}\n  },\n  \"runId\": \"string\"\n}",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Trigger a workflow mentioned in payload. **Required roles** - 'service.workflow.creator'.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "{runId}",
                          "filename": "{runId}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{runId}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get details for a speciffic workflow run instance.",
                              "filename": "Get details for a speciffic workflow run instance.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/v1/workflow/:workflow_name/workflowRun/:runId",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "workflow_name",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "runId",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Get an execution instances for a workflow. **Required roles** - 'service.workflow.viewer'.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Update the workflow run instance.",
                              "filename": "Update the workflow run instance.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/v1/workflow/:workflow_name/workflowRun/:runId",
                                "method": "PUT",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Content-Type",
                                    "value": "application/json",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "workflow_name",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "runId",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "json",
                                  "json": "{\n  \"status\": \"finished\"\n}",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Update workflow run. **Required roles** - 'service.workflow.viewer'.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "http",
                      "name": "Get complete details for a workflow.",
                      "filename": "Get complete details for a workflow.bru",
                      "seq": 3,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v1/workflow/:workflow_name",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "workflow_name",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get complete details for an workflow. **Required roles** - 'service.workflow.viewer'.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "system",
                  "filename": "system",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "system",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Creates workflow definition with standard orchestrator operators.",
                      "filename": "Creates workflow definition with standard orchestrator operators.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v1/workflow/system",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"description\": \"string\",\n  \"registrationInstructions\": {\n    \"key_0\": {},\n    \"key_1\": {}\n  },\n  \"workflowName\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "API to create a new workflow using standard operators of orchestrator. **Required roles** - 'service.workflow.admin'.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{workflow_name}",
                      "filename": "{workflow_name}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{workflow_name}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete a workflow defintion.",
                          "filename": "Delete a workflow defintion.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v1/workflow/system/:workflow_name",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "*/*",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "workflow_name",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Delete a workflow by it's name. **Required roles** - 'service.workflow.admin'.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "info",
              "filename": "info",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "info",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Version info",
                  "filename": "Version info.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v1/info",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/info` endpoint, which provides build and git related information.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Seismic DDMS",
      "filename": "Seismic DDMS",
      "seq": 20,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Seismic DDMS",
          "seq": 20
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "dataset",
          "filename": "dataset",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "dataset",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "tenant",
              "filename": "tenant",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "tenant",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "{tenantid}",
                  "filename": "{tenantid}",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{tenantid}",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "subproject",
                      "filename": "subproject",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "subproject",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{subprojectid}",
                          "filename": "{subprojectid}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{subprojectid}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "dataset",
                              "filename": "dataset",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "dataset",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "{datasetid}",
                                  "filename": "{datasetid}",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "{datasetid}",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "folder",
                                      "name": "ctagcheck",
                                      "filename": "ctagcheck",
                                      "seq": 1,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "ctagcheck",
                                          "seq": 1
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Validate if a dataset ctag matches the pre-existing ctag in metadata catalog.",
                                          "filename": "Validate if a dataset ctag matches the pre-existing ctag in metadata catalog.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid/ctagcheck?path=string&ctag=string",
                                            "method": "GET",
                                            "headers": [
                                              {
                                                "name": "impersonation-token-context",
                                                "value": "",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "path",
                                                "value": "string",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "ctag",
                                                "value": "string",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "tenantid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "subprojectid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "datasetid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "<ul><li>Check if the provided dataset cTag match the one stored in the metadata catalog.</li><li>Required roles: subproject.admin, subproject.viewer</li></ul>",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "type": "http",
                                      "name": "Delete a dataset.",
                                      "filename": "Delete a dataset.bru",
                                      "seq": 7,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid?path=string",
                                        "method": "DELETE",
                                        "headers": [
                                          {
                                            "name": "impersonation-token-context",
                                            "value": "",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "path",
                                            "value": "string",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "tenantid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "subprojectid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "datasetid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "<ul> <li>Delete a dataset in the seismic store.</li> <li>Required roles: <ul> <li>subproject.admin: if the applied subproject policy is 'uniform'</li> <li>dataset.admin: if the applied subproject policy is 'dataset'</li> </ul> </li></ul>",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    },
                                    {
                                      "type": "folder",
                                      "name": "gtags",
                                      "filename": "gtags",
                                      "seq": 2,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "gtags",
                                          "seq": 2
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Upsert tags to a dataset.",
                                          "filename": "Upsert tags to a dataset.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid/gtags?path=string&gtag=tag1&gtag=tag1",
                                            "method": "PUT",
                                            "headers": [
                                              {
                                                "name": "impersonation-token-context",
                                                "value": "",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "path",
                                                "value": "string",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "gtag",
                                                "value": "tag1",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "gtag",
                                                "value": "tag1",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "tenantid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "subprojectid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "datasetid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "<ul>\n  <li>Upsert tags to an existing dataset metadata. If the dataset metadata already has gtags, then  new gtags are appended to this list.</li>\n  <li>Required roles:\n    <ul>\n      <li>subproject.admin: if the applied subproject policy is 'uniform'</li>\n      <li>dataset.admin: if the applied subproject policy is 'dataset'</li>\n    </ul>\n  </li>\n</ul>\n",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "type": "folder",
                                      "name": "lock",
                                      "filename": "lock",
                                      "seq": 3,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "lock",
                                          "seq": 3
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Acquire a lock for a dataset id.",
                                          "filename": "Acquire a lock for a dataset id.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid/lock?path=string&openmode=string&wid=65.31061333678866",
                                            "method": "PUT",
                                            "headers": [
                                              {
                                                "name": "impersonation-token-context",
                                                "value": "",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "path",
                                                "value": "string",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "openmode",
                                                "value": "string",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "wid",
                                                "value": "65.31061333678866",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "tenantid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "subprojectid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "datasetid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "<ul>\n  <li>Open a dataset for read or write and lock its state.</li>\n  <li>Required roles open lock for write:\n    <ul>\n      <li>subproject.admin: if the applied subproject policy is 'uniform'</li>\n      <li>dataset.admin: if the applied subproject policy is 'dataset'</li>\n    </ul>\n  </li>\n  <li>Required roles open lock for read:\n    <ul>\n      <li>subproject.admin, subproject.viewer: if the applied subproject policy is 'uniform'</li>\n      <li>dataset.admin, dataset.viewer: if the applied subproject policy is 'dataset'</li>\n    </ul>\n  </li>\n</ul>\n",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "type": "http",
                                      "name": "Patch the dataset metadata.",
                                      "filename": "Patch the dataset metadata.bru",
                                      "seq": 9,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid?path=string&close=string",
                                        "method": "PATCH",
                                        "headers": [
                                          {
                                            "name": "impersonation-token-context",
                                            "value": "",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Content-Type",
                                            "value": "application/json",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "path",
                                            "value": "string",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "close",
                                            "value": "string",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "tenantid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "subprojectid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "datasetid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "json",
                                          "json": "{\n  \"acls\": {\n    \"admins\": [\n      \"data.sdms.tenant.subproject.1b1417e5-fb0e-402a-b725-606723e50b76.admin@slb.p4d.cloud.slb-ds.com\"\n    ],\n    \"viewers\": [\n      \"data.sdms.tenant.subproject.1b1417e5-fb0e-402a-b725-606723e50b76.viewer@slb.p4d.cloud.slb-ds.com\"\n    ]\n  },\n  \"dataset_new_name\": \"dsx02\",\n  \"filemetadata\": {\n    \"f1\": \"v1\",\n    \"f2\": \"v2\",\n    \"f3\": \"v3\"\n  },\n  \"gtags\": [\n    \"tag01\",\n    \"tag02\",\n    \"tag03\"\n  ],\n  \"last_modified_date\": \"Thu Jul 16 2020 04:37:41 GMT+0000 (Coordinated Universal Time)\",\n  \"ltag\": \"legal-tag\",\n  \"metadata\": {\n    \"f1\": \"v1\",\n    \"f2\": \"v2\",\n    \"f3\": \"v3\"\n  },\n  \"openzgy_v1\": {\n    \"acl\": {\n      \"owners\": [\n        \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\n      ],\n      \"viewers\": [\n        \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\n      ]\n    },\n    \"createTime\": \"2021-11-16T02:08:16.420Z\",\n    \"createUser\": \"vmanohar@slb.com\",\n    \"data\": {\n      \"DatasetProperties\": {\n        \"Checksum\": \"checksum-value\",\n        \"FileCollectionPath\": \"s3://default_bucket/opendes/data/vds-dataset/\",\n        \"FileSourceInfos\": [\n          {\n            \"Checksum\": \"checksum-value\",\n            \"ChecksumAlgorithm\": \"MD5\",\n            \"FileSize\": \"439452464\",\n            \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-1\",\n            \"Name\": \"vds-file-1\",\n            \"PreloadFileCreateDate\": \"2019-12-16T11:46:20.163Z\",\n            \"PreloadFileCreateUser\": \"somebody@acme.org\",\n            \"PreloadFileModifyDate\": \"2019-12-20T17:20:05.356Z\",\n            \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\n            \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-1\"\n          },\n          {\n            \"Checksum\": \"checksum-value\",\n            \"ChecksumAlgorithm\": \"MD5\",\n            \"FileSize\": \"433645463\",\n            \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-2\",\n            \"Name\": \"vds-file-2\",\n            \"PreloadFileCreateDate\": \"2019-12-16T11:50:40.321Z\",\n            \"PreloadFileCreateUser\": \"somebody@acme.org\",\n            \"PreloadFileModifyDate\": \"2019-12-20T17:59:03.456Z\",\n            \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\n            \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-2\"\n          }\n        ],\n        \"IndexFilePath\": \"s3://default_bucket/opendes/data/vds-dataset/vds-dataset.index\"\n      },\n      \"Description\": \"As originally delivered by ACME.com.\",\n      \"EncodingFormatTypeID\": \"opendes:reference-data--EncodingFormatType:text%2Fcsv:\",\n      \"Endian\": \"BIG\",\n      \"ExistenceKind\": \"opendes:reference-data--ExistenceKind:Prototype:\",\n      \"ExtensionProperties\": {},\n      \"Name\": \"Dataset X221/15\",\n      \"ResourceCurationStatus\": \"opendes:reference-data--ResourceCurationStatus:CREATED:\",\n      \"ResourceHomeRegionID\": \"opendes:reference-data--OSDURegion:AWSEastUSA:\",\n      \"ResourceHostRegionIDs\": [\n        \"opendes:reference-data--OSDURegion:AWSEastUSA:\"\n      ],\n      \"ResourceLifecycleStatus\": \"opendes:reference-data--ResourceLifecycleStatus:LOADING:\",\n      \"ResourceSecurityClassification\": \"opendes:reference-data--ResourceSecurityClassification:RESTRICTED:\",\n      \"SchemaFormatTypeID\": \"opendes:reference-data--SchemaFormatType:CWLS%20LAS3:\",\n      \"Source\": \"Example Data Source\",\n      \"TotalSize\": \"13245217273\"\n    },\n    \"id\": \"opendes:dataset--FileCollection.Slb.OpenZGY:5771c352-dc52-5d26-9351-2b8dbc9eb474\",\n    \"kind\": \"osdu:wks:dataset--FileCollection.Slb.OpenZGY:1.0.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"opendes-seistore-test-01\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"meta\": [],\n    \"modifyTime\": \"2021-11-18T04:10:23.817Z\",\n    \"modifyUser\": \"39916b94-71a9-409e-856e-0f29558fa908\",\n    \"tags\": {\n      \"NameOfKey\": \"String value\"\n    },\n    \"version\": 1637208623527796\n  },\n  \"readonly\": false,\n  \"segy_v1\": {\n    \"acl\": {\n      \"owners\": [\n        \"someone@company.com\"\n      ],\n      \"viewers\": [\n        \"someone@company.com\"\n      ]\n    },\n    \"ancestry\": {\n      \"parents\": []\n    },\n    \"createTime\": \"2020-12-16T11:46:20.163Z\",\n    \"createUser\": \"some-user@some-company-cloud.com\",\n    \"data\": {\n      \"DatasetProperties\": {\n        \"Checksum\": \"checksum-value\",\n        \"FileCollectionPath\": \"s3://default_bucket/opendes/data/vds-dataset/\",\n        \"FileSourceInfos\": [\n          {\n            \"Checksum\": \"checksum-value\",\n            \"ChecksumAlgorithm\": \"MD5\",\n            \"FileSize\": \"439452464\",\n            \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-1\",\n            \"Name\": \"vds-file-1\",\n            \"PreloadFileCreateDate\": \"2019-12-16T11:46:20.163Z\",\n            \"PreloadFileCreateUser\": \"somebody@acme.org\",\n            \"PreloadFileModifyDate\": \"2019-12-20T17:20:05.356Z\",\n            \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\n            \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-1\"\n          },\n          {\n            \"Checksum\": \"checksum-value\",\n            \"ChecksumAlgorithm\": \"MD5\",\n            \"FileSize\": \"433645463\",\n            \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-2\",\n            \"Name\": \"vds-file-2\",\n            \"PreloadFileCreateDate\": \"2019-12-16T11:50:40.321Z\",\n            \"PreloadFileCreateUser\": \"somebody@acme.org\",\n            \"PreloadFileModifyDate\": \"2019-12-20T17:59:03.456Z\",\n            \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\n            \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-2\"\n          }\n        ],\n        \"IndexFilePath\": \"s3://default_bucket/opendes/data/vds-dataset/vds-dataset.index\"\n      },\n      \"Description\": \"As originally delivered by ACME.com.\",\n      \"EncodingFormatTypeID\": \"namespace:reference-data--EncodingFormatType:text%2Fcsv:\",\n      \"Endian\": \"BIG\",\n      \"ExistenceKind\": \"namespace:reference-data--ExistenceKind:Prototype:\",\n      \"ExtensionProperties\": {},\n      \"Name\": \"Dataset X221/15\",\n      \"ResourceCurationStatus\": \"namespace:reference-data--ResourceCurationStatus:CREATED:\",\n      \"ResourceHomeRegionID\": \"namespace:reference-data--OSDURegion:AWSEastUSA:\",\n      \"ResourceHostRegionIDs\": [\n        \"namespace:reference-data--OSDURegion:AWSEastUSA:\"\n      ],\n      \"ResourceLifecycleStatus\": \"namespace:reference-data--ResourceLifecycleStatus:LOADING:\",\n      \"ResourceSecurityClassification\": \"namespace:reference-data--ResourceSecurityClassification:RESTRICTED:\",\n      \"SEGYRevision\": \"rev 0\",\n      \"SchemaFormatTypeID\": \"namespace:reference-data--SchemaFormatType:CWLS%20LAS3:\",\n      \"Source\": \"Example Data Source\",\n      \"TotalSize\": \"13245217273\",\n      \"VectorHeaderMapping\": [\n        {\n          \"KeyName\": \"namespace:reference-data--HeaderKeyName:CMPX:\",\n          \"Position\": 2,\n          \"ScalarIndicator\": \"STANDARD\",\n          \"ScalarOverride\": 12345.6,\n          \"UoM\": \"namespace:reference-data--UnitOfMeasure:m:\",\n          \"WordFormat\": \"namespace:reference-data--WordFormatType:INT:\",\n          \"WordWidth\": 2\n        }\n      ]\n    },\n    \"id\": \"osdu:dataset--FileCollection.SEGY:b47f793a-dc9c-5d11-8d59-6cc611a98926\",\n    \"kind\": \"osdu:wks:dataset--FileCollection.SEGY:1.0.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"Example legaltags\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"meta\": [],\n    \"modifyTime\": \"2020-12-16T11:52:24.477Z\",\n    \"modifyUser\": \"some-user@some-company-cloud.com\",\n    \"tags\": {\n      \"NameOfKey\": \"String value\"\n    },\n    \"version\": 1562066009929332\n  },\n  \"seismicmeta\": {\n    \"data\": {\n      \"msg\": \"sample data\"\n    },\n    \"kind\": \"slb:seistore:seismic2d:1.0.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"Slb-Private-USA-EHC\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ]\n    }\n  }\n}",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "<ul>\n  <li>Update the dataset meta information in the seismic store or close (unlock) the dataset. If the endpoint is used without the close parameter, at least one body field is required or the endpoint will return an error.</li>\n  <li>Required roles:\n    <ul>\n      <li>subproject.admin: if the applied subproject policy is 'uniform'</li>\n      <li>dataset.admin: if the applied subproject policy is 'dataset'</li>\n    </ul>\n  </li>\n  <li>Patchable fields:\n    <ul>\n      <li><b>dataset_new_name:</b> new name to use for the dataset (rename).</li>\n      <li><b>filemetadata:</b> This is a seismic store specific field and describes how the physical data is stored in the cloud storage system (GCS/AzureContainer etc.). This metadata is mainly used by client libraries to correctly reconstruct the dataset. For example, you can store a dataset as truncated in multiple objects of 64MB each, name them from 0 to N and save the filemetadata as: <pre>{nObject: N, totalSize: 1024, objsize: 64, sizeUnit: MB}</pre></li>\n      <li><b>change_tier:</b> tier to update the storage tier of a dataset. If filemetadata.tier_class is also passed, filemetadata.tier_class must == change_tier.</li>\n      <li><b>gtags:</b> Upsert tags to an existing dataset metadata. If the dataset metadata already has gtags, then new gtags are appended to this list.</li>\n      <li><b>ltag:</b> Update the existing legalTag value.</li>\n      <li><b>readonly:</b> Update the dataset mode to readonly (true) or to read/write (false).</li>\n      <li><b>status:</b> Update the dataset status.</li>\n    </ul>\n  </li>\n  <li><b>NOTE:</b> last_modified_date is updated automatically with each metadata change through Patch endpoint calling.</li>\n</ul>\n",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    },
                                    {
                                      "type": "folder",
                                      "name": "permission",
                                      "filename": "permission",
                                      "seq": 4,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "permission",
                                          "seq": 4
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Retrieve the access permissions of a user on a dataset id.",
                                          "filename": "Retrieve the access permissions of a user on a dataset id.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid/permission?path=string",
                                            "method": "GET",
                                            "headers": [
                                              {
                                                "name": "impersonation-token-context",
                                                "value": "",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "path",
                                                "value": "string",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "tenantid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "subprojectid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "datasetid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "<ul>\n  <li>Retrieve the access permission of a user on a dataset.</li>\n  <li>Required roles:\n    <ul>\n      <li>subproject.admin, subproject.viewer: if the applied subproject policy is 'uniform'</li>\n      <li>dataset.admin, dataset.viewer: if the applied subproject policy is 'dataset'</li>\n    </ul>\n  </li>\n</ul>\n",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "type": "http",
                                      "name": "Register a new dataset.",
                                      "filename": "Register a new dataset.bru",
                                      "seq": 10,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid?path=string",
                                        "method": "POST",
                                        "headers": [
                                          {
                                            "name": "impersonation-token-context",
                                            "value": "",
                                            "enabled": true
                                          },
                                          {
                                            "name": "ltag",
                                            "value": "string",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Content-Type",
                                            "value": "application/json",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "path",
                                            "value": "string",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "tenantid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "subprojectid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "datasetid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "json",
                                          "json": "{\n  \"acls\": {\n    \"admins\": [\n      \"data.sdms.tenant.subproject.1b1417e5-fb0e-402a-b725-606723e50b76.admin@slb.p4d.cloud.slb-ds.com\"\n    ],\n    \"viewers\": [\n      \"data.sdms.tenant.subproject.1b1417e5-fb0e-402a-b725-606723e50b76.viewer@slb.p4d.cloud.slb-ds.com\"\n    ]\n  },\n  \"gtags\": [\n    \"tagA\",\n    \"tagB\",\n    \"tagC\"\n  ],\n  \"openzgy_v1\": {\n    \"acl\": {\n      \"owners\": [\n        \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\n      ],\n      \"viewers\": [\n        \"data.default.viewers@opendes.enterprisedata.cloud.slb-ds.com\"\n      ]\n    },\n    \"createTime\": \"2021-11-16T02:08:16.420Z\",\n    \"createUser\": \"vmanohar@slb.com\",\n    \"data\": {\n      \"DatasetProperties\": {\n        \"Checksum\": \"checksum-value\",\n        \"FileCollectionPath\": \"s3://default_bucket/opendes/data/vds-dataset/\",\n        \"FileSourceInfos\": [\n          {\n            \"Checksum\": \"checksum-value\",\n            \"ChecksumAlgorithm\": \"MD5\",\n            \"FileSize\": \"439452464\",\n            \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-1\",\n            \"Name\": \"vds-file-1\",\n            \"PreloadFileCreateDate\": \"2019-12-16T11:46:20.163Z\",\n            \"PreloadFileCreateUser\": \"somebody@acme.org\",\n            \"PreloadFileModifyDate\": \"2019-12-20T17:20:05.356Z\",\n            \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\n            \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-1\"\n          },\n          {\n            \"Checksum\": \"checksum-value\",\n            \"ChecksumAlgorithm\": \"MD5\",\n            \"FileSize\": \"433645463\",\n            \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-2\",\n            \"Name\": \"vds-file-2\",\n            \"PreloadFileCreateDate\": \"2019-12-16T11:50:40.321Z\",\n            \"PreloadFileCreateUser\": \"somebody@acme.org\",\n            \"PreloadFileModifyDate\": \"2019-12-20T17:59:03.456Z\",\n            \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\n            \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-2\"\n          }\n        ],\n        \"IndexFilePath\": \"s3://default_bucket/opendes/data/vds-dataset/vds-dataset.index\"\n      },\n      \"Description\": \"As originally delivered by ACME.com.\",\n      \"EncodingFormatTypeID\": \"opendes:reference-data--EncodingFormatType:text%2Fcsv:\",\n      \"Endian\": \"BIG\",\n      \"ExistenceKind\": \"opendes:reference-data--ExistenceKind:Prototype:\",\n      \"ExtensionProperties\": {},\n      \"Name\": \"Dataset X221/15\",\n      \"ResourceCurationStatus\": \"opendes:reference-data--ResourceCurationStatus:CREATED:\",\n      \"ResourceHomeRegionID\": \"opendes:reference-data--OSDURegion:AWSEastUSA:\",\n      \"ResourceHostRegionIDs\": [\n        \"opendes:reference-data--OSDURegion:AWSEastUSA:\"\n      ],\n      \"ResourceLifecycleStatus\": \"opendes:reference-data--ResourceLifecycleStatus:LOADING:\",\n      \"ResourceSecurityClassification\": \"opendes:reference-data--ResourceSecurityClassification:RESTRICTED:\",\n      \"SchemaFormatTypeID\": \"opendes:reference-data--SchemaFormatType:CWLS%20LAS3:\",\n      \"Source\": \"Example Data Source\",\n      \"TotalSize\": \"13245217273\"\n    },\n    \"id\": \"opendes:dataset--FileCollection.Slb.OpenZGY:5771c352-dc52-5d26-9351-2b8dbc9eb474\",\n    \"kind\": \"osdu:wks:dataset--FileCollection.Slb.OpenZGY:1.0.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"opendes-seistore-test-01\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"meta\": [],\n    \"modifyTime\": \"2021-11-18T04:10:23.817Z\",\n    \"modifyUser\": \"39916b94-71a9-409e-856e-0f29558fa908\",\n    \"tags\": {\n      \"NameOfKey\": \"String value\"\n    },\n    \"version\": 1637208623527796\n  },\n  \"segy_v1\": {\n    \"acl\": {\n      \"owners\": [\n        \"someone@company.com\"\n      ],\n      \"viewers\": [\n        \"someone@company.com\"\n      ]\n    },\n    \"ancestry\": {\n      \"parents\": []\n    },\n    \"createTime\": \"2020-12-16T11:46:20.163Z\",\n    \"createUser\": \"some-user@some-company-cloud.com\",\n    \"data\": {\n      \"DatasetProperties\": {\n        \"Checksum\": \"checksum-value\",\n        \"FileCollectionPath\": \"s3://default_bucket/opendes/data/vds-dataset/\",\n        \"FileSourceInfos\": [\n          {\n            \"Checksum\": \"checksum-value\",\n            \"ChecksumAlgorithm\": \"MD5\",\n            \"FileSize\": \"439452464\",\n            \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-1\",\n            \"Name\": \"vds-file-1\",\n            \"PreloadFileCreateDate\": \"2019-12-16T11:46:20.163Z\",\n            \"PreloadFileCreateUser\": \"somebody@acme.org\",\n            \"PreloadFileModifyDate\": \"2019-12-20T17:20:05.356Z\",\n            \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\n            \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-1\"\n          },\n          {\n            \"Checksum\": \"checksum-value\",\n            \"ChecksumAlgorithm\": \"MD5\",\n            \"FileSize\": \"433645463\",\n            \"FileSource\": \"s3://default_bucket/opendes/data/vds-dataset/vds-file-2\",\n            \"Name\": \"vds-file-2\",\n            \"PreloadFileCreateDate\": \"2019-12-16T11:50:40.321Z\",\n            \"PreloadFileCreateUser\": \"somebody@acme.org\",\n            \"PreloadFileModifyDate\": \"2019-12-20T17:59:03.456Z\",\n            \"PreloadFileModifyUser\": \"somebody.else@acme.org\",\n            \"PreloadFilePath\": \"s3://staging-area/r7/raw-data/provided/documents/vds-file-2\"\n          }\n        ],\n        \"IndexFilePath\": \"s3://default_bucket/opendes/data/vds-dataset/vds-dataset.index\"\n      },\n      \"Description\": \"As originally delivered by ACME.com.\",\n      \"EncodingFormatTypeID\": \"namespace:reference-data--EncodingFormatType:text%2Fcsv:\",\n      \"Endian\": \"BIG\",\n      \"ExistenceKind\": \"namespace:reference-data--ExistenceKind:Prototype:\",\n      \"ExtensionProperties\": {},\n      \"Name\": \"Dataset X221/15\",\n      \"ResourceCurationStatus\": \"namespace:reference-data--ResourceCurationStatus:CREATED:\",\n      \"ResourceHomeRegionID\": \"namespace:reference-data--OSDURegion:AWSEastUSA:\",\n      \"ResourceHostRegionIDs\": [\n        \"namespace:reference-data--OSDURegion:AWSEastUSA:\"\n      ],\n      \"ResourceLifecycleStatus\": \"namespace:reference-data--ResourceLifecycleStatus:LOADING:\",\n      \"ResourceSecurityClassification\": \"namespace:reference-data--ResourceSecurityClassification:RESTRICTED:\",\n      \"SEGYRevision\": \"rev 0\",\n      \"SchemaFormatTypeID\": \"namespace:reference-data--SchemaFormatType:CWLS%20LAS3:\",\n      \"Source\": \"Example Data Source\",\n      \"TotalSize\": \"13245217273\",\n      \"VectorHeaderMapping\": [\n        {\n          \"KeyName\": \"namespace:reference-data--HeaderKeyName:CMPX:\",\n          \"Position\": 2,\n          \"ScalarIndicator\": \"STANDARD\",\n          \"ScalarOverride\": 12345.6,\n          \"UoM\": \"namespace:reference-data--UnitOfMeasure:m:\",\n          \"WordFormat\": \"namespace:reference-data--WordFormatType:INT:\",\n          \"WordWidth\": 2\n        }\n      ]\n    },\n    \"id\": \"osdu:dataset--FileCollection.SEGY:b47f793a-dc9c-5d11-8d59-6cc611a98926\",\n    \"kind\": \"osdu:wks:dataset--FileCollection.SEGY:1.0.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"Example legaltags\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"meta\": [],\n    \"modifyTime\": \"2020-12-16T11:52:24.477Z\",\n    \"modifyUser\": \"some-user@some-company-cloud.com\",\n    \"tags\": {\n      \"NameOfKey\": \"String value\"\n    },\n    \"version\": 1562066009929332\n  },\n  \"seismicmeta\": {\n    \"data\": {\n      \"msg\": \"sample data\"\n    },\n    \"kind\": \"osdu:sdms:seismic3d:1.0.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"legal-tag\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ]\n    }\n  }\n}",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "<ul><li>Register a new dataset in the seismic store.</li><li>Required roles: subproject.admin</li></ul>",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    },
                                    {
                                      "type": "http",
                                      "name": "Retrieve the dataset metadata.",
                                      "filename": "Retrieve the dataset metadata.bru",
                                      "seq": 8,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid?path=string&seismicmeta=false&translate-user-info=true&record-version=string",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "impersonation-token-context",
                                            "value": "",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "path",
                                            "value": "string",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "seismicmeta",
                                            "value": "false",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "translate-user-info",
                                            "value": "true",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "record-version",
                                            "value": "string",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "tenantid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "subprojectid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "datasetid",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "<ul> <li>Return the dataset metadata from seismic store.</li> <li>Required roles: <ul> <li>subproject.admin, subproject.viewer: if the applied subproject policy is 'uniform'</li> <li>dataset.admin, dataset.viewer: if the applied subproject policy is 'dataset'</li> </ul> </li></ul>",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    },
                                    {
                                      "type": "folder",
                                      "name": "size",
                                      "filename": "size",
                                      "seq": 5,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "size",
                                          "seq": 5
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Compute and retrieve the size of a dataset and the date of when the size was computed",
                                          "filename": "Compute and retrieve the size of a dataset and the date of when the size was computed.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid/size?path=string",
                                            "method": "POST",
                                            "headers": [
                                              {
                                                "name": "impersonation-token-context",
                                                "value": "",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "path",
                                                "value": "string",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "tenantid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "subprojectid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "datasetid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "<ul>\n<li>Compute and retrieve the size of a dataset and the date of when the size was computed.</li>\n<li>Required roles: subproject.admin</li></ul>\n",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "type": "folder",
                                      "name": "unlock",
                                      "filename": "unlock",
                                      "seq": 6,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "unlock",
                                          "seq": 6
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Remove the lock associated with a dataset id.",
                                          "filename": "Remove the lock associated with a dataset id.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/dataset/:datasetid/unlock?path=string",
                                            "method": "PUT",
                                            "headers": [
                                              {
                                                "name": "impersonation-token-context",
                                                "value": "",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "path",
                                                "value": "string",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "tenantid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "subprojectid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "datasetid",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "<ul>\n  <li>Removes the lock for a dataset id.</li>\n  <li>Required roles:\n    <ul>\n      <li>subproject.admin: if the applied subproject policy is 'uniform'</li>\n      <li>dataset.admin: if the applied subproject policy is 'dataset'</li>\n    </ul>\n  </li>\n</ul>\n",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "exist",
                              "filename": "exist",
                              "seq": 2,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "exist",
                                  "seq": 2
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Check to see if a list of datasets exists in the subproject.",
                                  "filename": "Check to see if a list of datasets exists in the subproject.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/exist",
                                    "method": "POST",
                                    "headers": [
                                      {
                                        "name": "impersonation-token-context",
                                        "value": "",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Content-Type",
                                        "value": "application/json",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "tenantid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "subprojectid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "json",
                                      "json": "{\n  \"datasets\": [\n    \"a/b/c/dsx01\",\n    \"a/b/c/dsx02\"\n  ]\n}",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "<ul>\n<li>Check if the dataset exists.</li>\n<li>Required roles: subproject.admin, subproject.viewer</li></ul>\n",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "http",
                              "name": "Get the list of datasets in a subproject.",
                              "filename": "Get the list of datasets in a subproject.bru",
                              "seq": 6,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid?translate-user-info=true",
                                "method": "POST",
                                "headers": [
                                  {
                                    "name": "impersonation-token-context",
                                    "value": "",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Content-Type",
                                    "value": "application/json",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "translate-user-info",
                                    "value": "true",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "tenantid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "subprojectid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "json",
                                  "json": "{\n  \"cursor\": \"next-page-token-931fvm19vm1-vm1v1\",\n  \"filter\": {\n    \"and\": [\n      {\n        \"or\": [\n          {\n            \"operator\": \"CONTAINS\",\n            \"property\": \"gtags\",\n            \"value\": \"tagA\"\n          },\n          {\n            \"operator\": \"CONTAINS\",\n            \"property\": \"gtags\",\n            \"value\": \"tagC\"\n          }\n        ]\n      },\n      {\n        \"operator\": \"LIKE\",\n        \"property\": \"name\",\n        \"value\": \"W%\"\n      },\n      {\n        \"not\": {\n          \"operator\": \"CONTAINS\",\n          \"property\": \"gtags\",\n          \"value\": \"tagB\"\n        }\n      }\n    ]\n  },\n  \"limit\": \"10\",\n  \"select\": \"[name, path, created_by]\"\n}",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "<ul>\n  <li>Return the list of datasets in a sub-project. The list can be filtered by gtags. Support pagination.</li>\n  <li>Required roles: subproject.admin, subproject.viewer</li>\n</ul>\n",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "readdsdirfulllist",
                              "filename": "readdsdirfulllist",
                              "seq": 3,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "readdsdirfulllist",
                                  "seq": 3
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Content list.",
                                  "filename": "Content list.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/readdsdirfulllist?path=string",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "impersonation-token-context",
                                        "value": "",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "path",
                                        "value": "string",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "tenantid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "subprojectid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "<ul>\n<li>List datasets and sub-directories for a directory path.</li>\n<li>Required roles: subproject.admin, subproject.viewer</li></ul>\n",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "size",
                              "filename": "size",
                              "seq": 4,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "size",
                                  "seq": 4
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Retrieve the size of datasets",
                                  "filename": "Retrieve the size of datasets.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/size?datasetid=string&path=string",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "impersonation-token-context",
                                        "value": "",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "datasetid",
                                        "value": "string",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "path",
                                        "value": "string",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "tenantid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "subprojectid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "<ul>\n<li>Required roles: subproject.viewer</li></ul>\n",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "sizes",
                              "filename": "sizes",
                              "seq": 5,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "sizes",
                                  "seq": 5
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Retrieve the size of datasets.",
                                  "filename": "Retrieve the size of datasets.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/dataset/tenant/:tenantid/subproject/:subprojectid/sizes",
                                    "method": "POST",
                                    "headers": [
                                      {
                                        "name": "impersonation-token-context",
                                        "value": "",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Content-Type",
                                        "value": "application/json",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "tenantid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "subprojectid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "json",
                                      "json": "{\n  \"datasets\": [\n    \"a/b/c/dsx01\",\n    \"a/b/c/dsx02\"\n  ]\n}",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "<ul>\n<li>Return a list with the sizes of the requested datasets.</li>\n<li>The correctness is not guarantee since this API returns sizes stored by the user in the dataset manifest.</li>\n<li>This API is deprecated, please using /size endpoint to compute and retrieve the size information</li>\n<li>Required roles: subproject.admin, subproject.viewer</li></ul>\n",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "app",
          "filename": "app",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "app",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Register a new application.",
              "filename": "Register a new application.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/app?email=string&sdpath=string",
                "method": "POST",
                "headers": [],
                "params": [
                  {
                    "name": "email",
                    "value": "string",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "sdpath",
                    "value": "string",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>Register a new application in the seismic store.</li> <li>Required roles: tenant.admin</li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Retrieve the list of registered applications.",
              "filename": "Retrieve the list of registered applications.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/app?sdpath=sd://common",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "sdpath",
                    "value": "sd://common",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul>\n<li>Retrieve the list of the registered applications in the seismic store.</li>\n<li>Required roles: tenant.admin</li></ul>\n",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "trusted",
              "filename": "trusted",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "trusted",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "List the trusted applications in a seismic store tenant.",
                  "filename": "List the trusted applications in a seismic store tenant.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/app/trusted?sdpath=string",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "sdpath",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul>\n<li>Return the list of the trusted application in seismic store tenant.\n</li><li>Required roles: tenant.admin</li></ul>\n",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Set a registered application as a trusted application.",
                  "filename": "Set a registered application as a trusted application.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/app/trusted?email=string&sdpath=string",
                    "method": "POST",
                    "headers": [],
                    "params": [
                      {
                        "name": "email",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "sdpath",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul>\n<li>Set a registered application as a trusted application in the seismic store.</li>\n<li>Required roles: tenant.admin</li></ul>\n",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "operation",
          "filename": "operation",
          "seq": 6,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "operation",
              "seq": 6
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "bulk-delete",
              "filename": "bulk-delete",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "bulk-delete",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Delete all datasets in a subproject path.",
                  "filename": "Delete all datasets in a subproject path.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/operation/bulk-delete?path=string",
                    "method": "PUT",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "path",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"filter\": {\n    \"and\": [\n      {\n        \"or\": [\n          {\n            \"operator\": \"CONTAINS\",\n            \"property\": \"gtags\",\n            \"value\": \"tagA\"\n          },\n          {\n            \"operator\": \"CONTAINS\",\n            \"property\": \"gtags\",\n            \"value\": \"tagC\"\n          }\n        ]\n      },\n      {\n        \"operator\": \"LIKE\",\n        \"property\": \"name\",\n        \"value\": \"W%\"\n      },\n      {\n        \"not\": {\n          \"operator\": \"CONTAINS\",\n          \"property\": \"gtags\",\n          \"value\": \"tagB\"\n        }\n      }\n    ]\n  }\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul> <li>Description: Delete all datasets in the specified sdms subproject path.</li> <li>Roles: subproject.admin</li></ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "{operation-id}",
                  "filename": "{operation-id}",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{operation-id}",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get the bulk delete operation status.",
                      "filename": "Get the bulk delete operation status.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/operation/bulk-delete/:operation-id",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "operation-id",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul> <li>Description: Get the bulk delete operation status.</li> <li>Roles: any (registered user in partition)</li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "change-tier",
              "filename": "change-tier",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "change-tier",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Change a storage class tier a dataset, or all datasets in a path, in a subproject.",
                  "filename": "Change a storage class tier a dataset, or all datasets in a path, in a subproject.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/operation/change-tier?path=/a/b/c/&tier=Hot",
                    "method": "PUT",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "path",
                        "value": "/a/b/c/",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "tier",
                        "value": "Hot",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"filter\": {\n    \"and\": [\n      {\n        \"or\": [\n          {\n            \"operator\": \"CONTAINS\",\n            \"property\": \"gtags\",\n            \"value\": \"tagA\"\n          },\n          {\n            \"operator\": \"CONTAINS\",\n            \"property\": \"gtags\",\n            \"value\": \"tagC\"\n          }\n        ]\n      },\n      {\n        \"operator\": \"LIKE\",\n        \"property\": \"name\",\n        \"value\": \"W%\"\n      },\n      {\n        \"not\": {\n          \"operator\": \"CONTAINS\",\n          \"property\": \"gtags\",\n          \"value\": \"tagB\"\n        }\n      }\n    ]\n  }\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul> <li>Description: Change all datasets' tier in the specified sdms subproject path.</li> <li>Roles: subproject.admin</li></ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "{operation-id}",
                  "filename": "{operation-id}",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{operation-id}",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Get the change tier operation status.",
                      "filename": "Get the change tier operation status.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/operation/change-tier/:operation-id",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "operation-id",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul> <li>Description: Get the change tier operation status.</li> <li>Roles: any (registered user in partition)</li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "impersonation-token",
          "filename": "impersonation-token",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "impersonation-token",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Create an impersonation token credential.",
              "filename": "Create an impersonation token credential.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/impersonation-token",
                "method": "POST",
                "headers": [
                  {
                    "name": "user-token",
                    "value": "",
                    "enabled": true
                  },
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"metadata\": {\n    \"jobId\": 1234\n  },\n  \"resources\": [\n    {\n      \"readonly\": true,\n      \"resource\": \"sd://tnx01/spx01\"\n    },\n    {\n      \"readonly\": false,\n      \"resource\": \"sd://tnx01/spx02\"\n    }\n  ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>Generate a credential token to impersonate user access for a set of subproject resources.</li><li>Required roles: app.trusted</li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Refresh the impersonation credential token.",
              "filename": "Refresh the impersonation credential token.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/impersonation-token",
                "method": "PUT",
                "headers": [
                  {
                    "name": "impersonation-token",
                    "value": "",
                    "enabled": true
                  },
                  {
                    "name": "impersonation-token-context",
                    "value": "",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>Refresh an impersonation credential token.</li><li>Required roles: app.trusted</li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "imptoken",
          "filename": "imptoken",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "imptoken",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Generate impersonation credentials token.",
              "filename": "Generate impersonation credentials token.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/imptoken",
                "method": "POST",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"refresh-url\": \"https://httpstat.us/200\",\n  \"resources\": [\n    {\n      \"readonly\": true,\n      \"resource\": \"sd://tnx01/spx01\"\n    },\n    {\n      \"readonly\": false,\n      \"resource\": \"sd://tnx01/spx02\"\n    },\n    {\n      \"resource\": \"sd://tnx01/spx03\"\n    }\n  ],\n  \"token\": \"string\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul>\n<li>Generate an impersonation credential token of a user for a set of subproject resources.</li>\n<li>Required roles: app.trusted</li></ul>\n",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Patch an impersonation credential token's refresh url and generate a new impersonation token.",
              "filename": "Patch an impersonation credential token's refresh url and generate a new impersonation token.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/imptoken",
                "method": "PATCH",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"refresh-url\": \"https://httpstat.us/200\",\n  \"token\": \"string\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul>\n<li>Patch an impersonation credential token's refresh url and generate a new impersonation token.</li>\n<li>Required roles: none</li></ul>\n",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Refresh an impersonation credential token.",
              "filename": "Refresh an impersonation credential token.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/imptoken",
                "method": "PUT",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  },
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"token\": \"string\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>Refresh an impersonation credential token.</li><li>Required roles: none</li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "utility",
          "filename": "utility",
          "seq": 11,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "utility",
              "seq": 11
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "storage-tiers",
              "filename": "storage-tiers",
              "seq": 5,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "storage-tiers",
                  "seq": 5
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Retrieve the list of supported storage tiers",
                  "filename": "Retrieve the list of supported storage tiers.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/utility/storage-tiers",
                    "method": "GET",
                    "headers": [],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul>\n  <li>Return the list of storage tiers</li>\n  <li>Required roles: subproject.admin, subproject.viewer</li>\n</ul>\n",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "gcs-access-token",
              "filename": "gcs-access-token",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "gcs-access-token",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Generate a GCS access token.",
                  "filename": "Generate a GCS access token.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/utility/gcs-access-token?sdpath=sd://common/carbon&readonly=true",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "impersonation-token-context",
                        "value": "",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "sdpath",
                        "value": "sd://common/carbon",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "readonly",
                        "value": "true",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul>\n  <li>Generate a GCS access token for a specified seismic store resource. The source and destination dataset must be in the same sub-project.</li>\n  <li>Required roles:\n    <ul>\n      <li>subproject.admin, subproject.viewer: if the applied subproject policy is 'uniform'</li>\n      <li>dataset.admin, dataset.viewer: if the applied subproject policy is 'dataset'</li>\n    </ul>\n  </li>\n</ul>\n",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "download-connection-string",
              "filename": "download-connection-string",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "download-connection-string",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Generate the download connection credentials string",
                  "filename": "Generate the download connection credentials string.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/utility/download-connection-string?sdpath=sd://opendes/sandbox",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "impersonation-token-context",
                        "value": "",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "sdpath",
                        "value": "sd://opendes/sandbox",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul> <li>Generate the download connection credential string for a subproject collection or a dataset, depending of the applied access policy (uniform/dataset). <li>These credentials can be used via CSP SDK, on client side, to perform bulk download.</li> <li> The endpoint response is CSP (Cloud Solution Provider) dependent: <ul> <br/><li><b>Azure</b>: shared access signature (SaS) Url token <br/> <br/>{ <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_token: 'https://{accountName}.blob.core.windows.net/{containerName}?{SASQueryParameters}`' <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires_in: 3599 <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token_type: 'SasUrl' <br/>} <br/><br/></li> <li><b>Google</b>: standard access token credential signed and down-scoped by google <br/> <br/>{ <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_token: 'google_signed_access_token' <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires_in: 3600 <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token_type: 'Bearer' <br/>} <br/><br/></li> <li><b>AWS</b>: double column separated string containing access key id, the access key secret and the session token <br/> <br/>{ <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_token: 'accessKeyId:secretAccessKey:sessionToken' <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires_in: 3599 <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token_type: 'Bearer' <br/>} <br/><br/></li> <li><b>IBM</b>: double column separated string containing access key id, the access key secret and the session token <br/> <br/>{ <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_token: 'accessKeyId:secretAccessKey:sessionToken' <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires_in: 7200 <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token_type: 'Bearer' <br/>} <br/><br/></li> </ul> </li> <li>Required roles: <ul> <li>subproject.admin, subproject.viewer: if the applied subproject policy is 'uniform'</li> <li>dataset.admin, dataset.viewer: if the applied subproject policy is 'dataset'</li> </ul> </li> </ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "ls",
              "filename": "ls",
              "seq": 4,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "ls",
                  "seq": 4
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Retrieve the list of datasets and sub-directories inside a seismic store path.",
                  "filename": "Retrieve the list of datasets and sub-directories inside a seismic store path.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/utility/ls?sdpath=string&wmode=string&limit=65.31061333678866&cursor=string",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "impersonation-token-context",
                        "value": "",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "sdpath",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "wmode",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "65.31061333678866",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "cursor",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul>\n<li>Return the list of datasets and sub-directories of a seismic store path.</li>\n<li>Required roles: subproject.admin, subproject.viewer</li></ul>\n",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Retrieve the list of datasets and sub-directories inside a seismic store path._1",
                  "filename": "Retrieve the list of datasets and sub-directories inside a seismic store path._1.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/utility/ls",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "impersonation-token-context",
                        "value": "",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"cursor\": \"next-page-token-931fvm19vm1-vm1v1\",\n  \"limit\": 10,\n  \"sdpath\": \"sd://test-tenant/test-subproject/test-path\",\n  \"wmode\": \"all\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul>\n<li>Return the list of datasets and sub-directories of a seismic store path.</li>\n<li>Required roles: subproject.admin, subproject.viewer</li></ul>\n",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "cp",
              "filename": "cp",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "cp",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Copy dataset.",
                  "filename": "Copy dataset.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/utility/cp?sdpath_from=string&sdpath_to=string&lock=true",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "impersonation-token-context",
                        "value": "",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "sdpath_from",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "sdpath_to",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "lock",
                        "value": "true",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul>\n<li>Copy a seismic store dataset. The source and destination dataset must be in the same sub-project.</li>\n<li>Required roles:\n  <ul>\n    <li>subproject.admin, subproject.viewer: if the applied subproject policy is 'uniform'</li>\n    <li>dataset.admin, dataset.viewer: if the applied subproject policy is 'dataset'</li>\n  </ul>\n</li>\n</ul>\n",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "upload-connection-string",
              "filename": "upload-connection-string",
              "seq": 6,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "upload-connection-string",
                  "seq": 6
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Generate the upload connection credentials string",
                  "filename": "Generate the upload connection credentials string.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/utility/upload-connection-string?sdpath=sd://opendes/sandbox",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "impersonation-token-context",
                        "value": "",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "sdpath",
                        "value": "sd://opendes/sandbox",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul> <li>Generate the upload connection credential string for a subproject collection or a dataset, depending of the applied access policy (uniform/dataset). <li>These credentials can be used via CSP SDK, on client side, to perform bulk upload.</li> <li> The endpoint response is CSP (Cloud Solution Provider) dependent: <ul> <br/><li><b>Azure</b>: shared access signature (SaS) Url token <br/> <br/>{ <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_token: 'https://{accountName}.blob.core.windows.net/{containerName}?{SASQueryParameters}`' <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires_in: 3599 <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token_type: 'SasUrl' <br/>} <br/><br/></li> <li><b>Google</b>: standard access token credential signed and down-scoped by google <br/> <br/>{ <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_token: 'google_signed_access_token' <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires_in: 3600 <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token_type: 'Bearer' <br/>} <br/><br/></li> <li><b>AWS</b>: double column separated string containing access key id, the access key secret and the session token <br/> <br/>{ <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_token: 'accessKeyId:secretAccessKey:sessionToken' <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires_in: 3599 <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token_type: 'Bearer' <br/>} <br/><br/></li> <li><b>IBM</b>: double column separated string containing access key id, the access key secret and the session token <br/> <br/>{ <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access_token: 'accessKeyId:secretAccessKey:sessionToken' <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expires_in: 7200 <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token_type: 'Bearer' <br/>} <br/><br/></li> </ul> </li> <li>Required roles: <ul> <li>subproject.admin: if the applied subproject policy is 'uniform'</li> <li>dataset.admin: if the applied subproject policy is 'dataset'</li> </ul> </li> </ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "info",
          "filename": "info",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "info",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Seismic store service info.",
              "filename": "Seismic store service info.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/info",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>Return the seismic store service deployment information.</li><li>Required roles: none</li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "user",
          "filename": "user",
          "seq": 10,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "user",
              "seq": 10
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Add a user to a seismic store subproject authorization group.",
              "filename": "Add a user to a seismic store subproject authorization group.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/user",
                "method": "PUT",
                "headers": [
                  {
                    "name": "Content-Type",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"email\": \"test@slb.com\",\n  \"group\": \"admin\",\n  \"path\": \"sd://slb/test_project\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>Add a user to a subproject default authorization group if it exists, otherwise, add the user to the first group.</li><li>Required roles: subproject.admin</li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "List users in a subproject's role-based authorization groups.",
              "filename": "List users in a subproject's role-based authorization groups.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/user?sdpath=string",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [
                  {
                    "name": "sdpath",
                    "value": "string",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>List users in subproject's role-based authorization groups.</li><li>Required roles: subproject.admin</li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "http",
              "name": "Remove a user from a subproject.",
              "filename": "Remove a user from a subproject.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/user?email=string&path=string",
                "method": "DELETE",
                "headers": [],
                "params": [
                  {
                    "name": "email",
                    "value": "string",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "path",
                    "value": "string",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>Remove a user from subproject default authorization groups if exists, otherwise, remove it from the first authorization group.</li><li>Required roles: subproject.admin</li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "roles",
              "filename": "roles",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "roles",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Retrieve user role in all subprojects of the tenant.",
                  "filename": "Retrieve user role in all subprojects of the tenant.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/user/roles?sdpath=string",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "sdpath",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul><li>Retrieve user role in all subprojects of the tenant.</li><li>Required roles: none/li></ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "svcstatus",
          "filename": "svcstatus",
          "seq": 8,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "svcstatus",
              "seq": 8
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Seismic store service status (fast check).",
              "filename": "Seismic store service status (fast check).bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/svcstatus",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "<ul><li>Return the seismic store service status.</li><li>Required roles: none</li></ul>",
                "auth": {
                  "mode": "inherit"
                }
              }
            },
            {
              "type": "folder",
              "name": "access",
              "filename": "access",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "access",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Seismic store service access check.",
                  "filename": "Seismic store service access check.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/svcstatus/access",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul><li>Validates if the token audience is allowed</li><li>Required roles: none</li></ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "tenant",
          "filename": "tenant",
          "seq": 9,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "tenant",
              "seq": 9
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "{tenantid}",
              "filename": "{tenantid}",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "{tenantid}",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Register a seismic-dms tenant.",
                  "filename": "Register a seismic-dms tenant.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/tenant/:tenantid",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "tenantid",
                        "value": "string",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"default_acls\": \"users.datalake.admins@{datapartition}.{domain}.com\",\n  \"esd\": \"{datapartition}.{domain}.com\",\n  \"gcpid\": \"datapartition\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul><li>Register a data partition in seismic-dms.</li><li>Required roles: tenant.admin, users.datalake.ops</li></ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "Retrieve the tenant metadata.",
                  "filename": "Retrieve the tenant metadata.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/tenant/:tenantid",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "tenantid",
                        "value": "string",
                        "type": "path",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul><li>Return the tenant metadata.</li><li>Required roles: tenant.admin</li></ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "sdpath",
              "filename": "sdpath",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "sdpath",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Retrieve the tenant seismic store path.",
                  "filename": "Retrieve the tenant seismic store path.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/tenant/sdpath?datapartition=string",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "datapartition",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "<ul><li>Return the seistore path to a tenant associated with the data partition.</li><li>Required roles: none</li></ul>",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "subproject",
          "filename": "subproject",
          "seq": 7,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "subproject",
              "seq": 7
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "tenant",
              "filename": "tenant",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "tenant",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "{tenantid}",
                  "filename": "{tenantid}",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "{tenantid}",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "List subprojects in a tenant.",
                      "filename": "List subprojects in a tenant.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/subproject/tenant/:tenantid",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "tenantid",
                            "value": "string",
                            "type": "path",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "<ul><li>Return the list of sub-projects in a tenant.</li><li>Required roles: tenant.admin</li></ul>",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "subproject",
                      "filename": "subproject",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "subproject",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{subprojectid}",
                          "filename": "{subprojectid}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{subprojectid}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Create a new subproject.",
                              "filename": "Create a new subproject.bru",
                              "seq": 4,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/subproject/tenant/:tenantid/subproject/:subprojectid",
                                "method": "POST",
                                "headers": [
                                  {
                                    "name": "ltag",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Content-Type",
                                    "value": "application/json",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "tenantid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "subprojectid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "json",
                                  "json": "{\n  \"access_policy\": \"uniform\",\n  \"acls\": {\n    \"admins\": [\n      \"data.sdms.tenant.subproject.1b1417e5-fb0e-402a-b725-606723e50b76.admin@slb.p4d.cloud.slb-ds.com\"\n    ],\n    \"viewers\": [\n      \"data.sdms.tenant.subproject.1b1417e5-fb0e-402a-b725-606723e50b76.viewer@slb.p4d.cloud.slb-ds.com\"\n    ]\n  },\n  \"admin\": \"admin@email\",\n  \"storage_class\": \"MULTI_REGIONAL\",\n  \"storage_location\": \"US\"\n}",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "<ul>\n<li>Creates a new subproject resource in seismic store.</li>\n<li>Required roles: tenant.admin</li></ul>\n",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Delete a subproject.",
                              "filename": "Delete a subproject.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/subproject/tenant/:tenantid/subproject/:subprojectid",
                                "method": "DELETE",
                                "headers": [],
                                "params": [
                                  {
                                    "name": "tenantid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "subprojectid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "<ul><li>Delete a subproject in seismic store.</li><li>Required roles: subproject.admin</li></ul>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Patch a subproject's metadata.",
                              "filename": "Patch a subproject's metadata.bru",
                              "seq": 3,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/subproject/tenant/:tenantid/subproject/:subprojectid?recursive=true",
                                "method": "PATCH",
                                "headers": [
                                  {
                                    "name": "ltag",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Content-Type",
                                    "value": "application/json",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "recursive",
                                    "value": "true",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "tenantid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "subprojectid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "json",
                                  "json": "{\n  \"access_policy\": \"dataset\",\n  \"acls\": {\n    \"admins\": [\n      \"data.sdms.tenant.subproject.1b1417e5-fb0e-402a-b725-606723e50b76.admin@slb.p4d.cloud.slb-ds.com\",\n      \"data.sdms.tenant.subproject.1f1tr7fe-fb0e-402a-b725-606723e5356n.admin@slb.p4d.cloud.slb-ds.com\"\n    ],\n    \"viewers\": [\n      \"data.sdms.tenant.subproject.1b1417e5-fb0e-402a-b725-606723e50b76.viewer@slb.p4d.cloud.slb-ds.com\"\n    ]\n  }\n}",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "<ul>\n  <li>Patch a subproject metadata in seismic store.</li>\n  <li>Required roles: subproject.admin</li>\n  <li>Possible actions:</li>\n  <ul>\n    <li>legal tag and/or ACLs groups can be patched by providing new values</li>\n  </ul>\n</ul>\n",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Retrieve the subproject metadata.",
                              "filename": "Retrieve the subproject metadata.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/subproject/tenant/:tenantid/subproject/:subprojectid?translate-user-info=true",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "translate-user-info",
                                    "value": "true",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "tenantid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  },
                                  {
                                    "name": "subprojectid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "<ul><li>Return the metadata for a requested sub-project.</li><li>Required roles: subproject.admin</li></ul>",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Unit",
      "filename": "Unit",
      "seq": 23,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Unit",
          "seq": 23
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "v3",
          "filename": "v3",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "v3",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "info",
              "filename": "info",
              "seq": 4,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "info",
                  "seq": 4
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "info",
                  "filename": "info.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/info",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "For deployment available public `/info` endpoint, which provides build and git related information..",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "measurement",
              "filename": "measurement",
              "seq": 5,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "measurement",
                  "seq": 5
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "getMeasurements",
                  "filename": "getMeasurements.bru",
                  "seq": 4,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/measurement?ancestry=string",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "ancestry",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get Measurements Using GET",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "postMeasurement",
                  "filename": "postMeasurement.bru",
                  "seq": 5,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/measurement",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"essence\": {\n    \"ancestry\": \"string\",\n    \"baseMeasurementCode\": \"string\",\n    \"type\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "post Measurement Using POST",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "list",
                  "filename": "list",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "list",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getMeasurements",
                      "filename": "getMeasurements.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/measurement/list?offset=0&limit=100",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Measurements Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "maps",
                  "filename": "maps",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "maps",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getMeasurementMaps",
                      "filename": "getMeasurementMaps.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/measurement/maps?offset=0&limit=100",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Measurement Maps Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "search",
                  "filename": "search",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "search",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "postSearchMeasurements",
                      "filename": "postSearchMeasurements.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/measurement/search?offset=0&limit=100",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"query\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Post Search Measurements Using POST",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "conversion",
              "filename": "conversion",
              "seq": 3,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "conversion",
                  "seq": 3
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "abcd",
                  "filename": "abcd",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "abcd",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "postConversionABCD",
                      "filename": "postConversionABCD.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/conversion/abcd?namespaces=string&fromSymbol=string&toSymbol=string",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "namespaces",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "fromSymbol",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "toSymbol",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Post Conversion ABCD Using POST",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "postConversionABCD_1",
                      "filename": "postConversionABCD_1.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/conversion/abcd",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"fromUnit\": {\n    \"abcd\": {\n      \"a\": 8770.250050727274,\n      \"b\": 5425.269508899225,\n      \"c\": 5181.699083288365,\n      \"d\": 5606.087524893774\n    },\n    \"baseMeasurement\": {\n      \"ancestry\": \"string\",\n      \"type\": \"string\"\n    },\n    \"scaleOffset\": {\n      \"offset\": 6081.593448268184,\n      \"scale\": 8478.343546946244\n    },\n    \"symbol\": \"string\",\n    \"type\": \"string\"\n  },\n  \"fromUnitPersistableReference\": \"string\",\n  \"toUnit\": {\n    \"abcd\": {\n      \"a\": 1166.4555427329203,\n      \"b\": 5994.4674786461765,\n      \"c\": 8754.217235988384,\n      \"d\": 4540.410996030913\n    },\n    \"baseMeasurement\": {\n      \"ancestry\": \"string\",\n      \"type\": \"string\"\n    },\n    \"scaleOffset\": {\n      \"offset\": 1339.2804804450786,\n      \"scale\": 699.9733134532937\n    },\n    \"symbol\": \"string\",\n    \"type\": \"string\"\n  },\n  \"toUnitPersistableReference\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Post Conversion ABCD Using POST",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "scale",
                  "filename": "scale",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "scale",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getConversionScaleOffsetBySymbols",
                      "filename": "getConversionScaleOffsetBySymbols.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/conversion/scale?namespaces=string&fromSymbol=string&toSymbol=string",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "namespaces",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "fromSymbol",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "toSymbol",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Conversion Scale Offset By Symbols Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "postConversionScaleOffset",
                      "filename": "postConversionScaleOffset.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/conversion/scale",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"fromUnit\": {\n    \"abcd\": {\n      \"a\": 7655.5237210058895,\n      \"b\": 8675.76827965983,\n      \"c\": 709.7519346514891,\n      \"d\": 834.7199195425359\n    },\n    \"baseMeasurement\": {\n      \"ancestry\": \"string\",\n      \"type\": \"string\"\n    },\n    \"scaleOffset\": {\n      \"offset\": 8834.607974567934,\n      \"scale\": 4233.502385116257\n    },\n    \"symbol\": \"string\",\n    \"type\": \"string\"\n  },\n  \"fromUnitPersistableReference\": \"string\",\n  \"toUnit\": {\n    \"abcd\": {\n      \"a\": 511.7358987604703,\n      \"b\": 7088.4251608237155,\n      \"c\": 3464.904568923164,\n      \"d\": 8428.616850921353\n    },\n    \"baseMeasurement\": {\n      \"ancestry\": \"string\",\n      \"type\": \"string\"\n    },\n    \"scaleOffset\": {\n      \"offset\": 4292.87847696268,\n      \"scale\": 8538.930069737451\n    },\n    \"symbol\": \"string\",\n    \"type\": \"string\"\n  },\n  \"toUnitPersistableReference\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Post Conversion Scale Offset Using POST",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "catalog",
              "filename": "catalog",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "catalog",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "getCatalog",
                  "filename": "getCatalog.bru",
                  "seq": 4,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/catalog",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get Catalog Using GET",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "mapstates",
                  "filename": "mapstates",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "mapstates",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getUnitMaps",
                      "filename": "getUnitMaps.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/catalog/mapstates?offset=0&limit=100",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Unit Maps Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "lastmodified",
                  "filename": "lastmodified",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "lastmodified",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getLastModified",
                      "filename": "getLastModified.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/catalog/lastmodified",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get LastModified Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "search",
                  "filename": "search",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "search",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "postSearch",
                      "filename": "postSearch.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/catalog/search?offset=0&limit=100",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"query\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "postSearchUsingPOST",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "unitsystem",
              "filename": "unitsystem",
              "seq": 7,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "unitsystem",
                  "seq": 7
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "getUnitBySystemAndMeasurement",
                  "filename": "getUnitBySystemAndMeasurement.bru",
                  "seq": 2,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/unitsystem?name=string&offset=0&limit=100",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "name",
                        "value": "string",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get Unit By System And Measurement Using GET",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "postUnitSystem",
                  "filename": "postUnitSystem.bru",
                  "seq": 3,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/unitsystem?offset=0&limit=100",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"essence\": {\n    \"ancestry\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Post Unit System Using POST",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "list",
                  "filename": "list",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "list",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getUnitSystemInfoList",
                      "filename": "getUnitSystemInfoList.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/unitsystem/list?offset=0&limit=100",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Unit System Info List Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "_ah",
              "filename": "_ah",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "_ah",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "readiness_check",
                  "filename": "readiness_check",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "readiness_check",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Readiness Check endpoint",
                      "filename": "Readiness Check endpoint.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/_ah/readiness_check",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "For deployment available public `/readiness_check` endpoint, which provides `CRS Catalog Service is ready` message.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "liveness_check",
                  "filename": "liveness_check",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "liveness_check",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Liveness Check endpoint",
                      "filename": "Liveness Check endpoint.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/_ah/liveness_check",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "*/*",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "For deployment available public `/liveness_check` endpoint, which provides `CRS Catalog Service is alive` message.",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "unit",
              "filename": "unit",
              "seq": 6,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "unit",
                  "seq": 6
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "getUnits",
                  "filename": "getUnits.bru",
                  "seq": 7,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/unit?offset=0&limit=100",
                    "method": "GET",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [
                      {
                        "name": "offset",
                        "value": "0",
                        "type": "query",
                        "enabled": true
                      },
                      {
                        "name": "limit",
                        "value": "100",
                        "type": "query",
                        "enabled": true
                      }
                    ],
                    "body": {
                      "mode": "none",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Get Units Using GET",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "http",
                  "name": "postUnit",
                  "filename": "postUnit.bru",
                  "seq": 8,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/v3/unit",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"essence\": {\n    \"abcd\": {\n      \"a\": 9255.219509495095,\n      \"b\": 6455.072626251497,\n      \"c\": 4263.84210099639,\n      \"d\": 5685.455249255299\n    },\n    \"baseMeasurement\": {\n      \"ancestry\": \"string\",\n      \"type\": \"string\"\n    },\n    \"scaleOffset\": {\n      \"offset\": 4531.856265241916,\n      \"scale\": 6863.101662023362\n    },\n    \"symbol\": \"string\",\n    \"type\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Post Unit Using POST",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                },
                {
                  "type": "folder",
                  "name": "measurement",
                  "filename": "measurement",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "measurement",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getUnitsByMeasurement",
                      "filename": "getUnitsByMeasurement.bru",
                      "seq": 3,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/unit/measurement",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"essence\": {\n    \"ancestry\": \"string\",\n    \"baseMeasurementCode\": \"string\",\n    \"type\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Units By Measurement Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "postUnitsByMeasurement",
                      "filename": "postUnitsByMeasurement.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/unit/measurement?ancestry=string",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "ancestry",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Post Units By Measurement Using POST",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "preferred",
                      "filename": "preferred",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "preferred",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "postPreferredUnitsByMeasurement",
                          "filename": "postPreferredUnitsByMeasurement.bru",
                          "seq": 1,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v3/unit/measurement/preferred?ancestry=string",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "ancestry",
                                "value": "string",
                                "type": "query",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Post Preferred Units By Measurement Using POST",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "postPreferredUnitsByMeasurement_1",
                          "filename": "postPreferredUnitsByMeasurement_1.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/v3/unit/measurement/preferred",
                            "method": "POST",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Content-Type",
                                "value": "application/json",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [],
                            "body": {
                              "mode": "json",
                              "json": "{\n  \"essence\": {\n    \"ancestry\": \"string\",\n    \"baseMeasurementCode\": \"string\",\n    \"type\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Post Preferred Units By Measurement Using POST",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "symbols",
                  "filename": "symbols",
                  "seq": 5,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "symbols",
                      "seq": 5
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getUnitsBySymbol",
                      "filename": "getUnitsBySymbol.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/unit/symbols?symbol=string",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "symbol",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Units By Symbol Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "symbol",
                  "filename": "symbol",
                  "seq": 4,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "symbol",
                      "seq": 4
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getUnitBySymbol",
                      "filename": "getUnitBySymbol.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/unit/symbol?namespaces=string&symbol=string",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "namespaces",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "symbol",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Unit By Symbol Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "maps",
                  "filename": "maps",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "maps",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getUnitMaps",
                      "filename": "getUnitMaps.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/unit/maps?offset=0&limit=100",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Unit Maps Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "unitsystem",
                  "filename": "unitsystem",
                  "seq": 6,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "unitsystem",
                      "seq": 6
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "getUnitBySystemAndMeasurement",
                      "filename": "getUnitBySystemAndMeasurement.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/unit/unitsystem?unitSystemName=string&ancestry=string",
                        "method": "GET",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "unitSystemName",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "ancestry",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "none",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Get Unit By System And Measurement Using GET",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "http",
                      "name": "postUnitBySystemAndMeasurement",
                      "filename": "postUnitBySystemAndMeasurement.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/unit/unitsystem?unitSystemName=string",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "unitSystemName",
                            "value": "string",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"essence\": {\n    \"ancestry\": \"string\",\n    \"baseMeasurementCode\": \"string\",\n    \"type\": \"string\"\n  },\n  \"persistableReference\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Post Unit By System And Measurement Using POST",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "search",
                  "filename": "search",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "search",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "postSearchUnits",
                      "filename": "postSearchUnits.bru",
                      "seq": 1,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/v3/unit/search?offset=0&limit=100",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [
                          {
                            "name": "offset",
                            "value": "0",
                            "type": "query",
                            "enabled": true
                          },
                          {
                            "name": "limit",
                            "value": "100",
                            "type": "query",
                            "enabled": true
                          }
                        ],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"query\": \"string\"\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Post Search Units Using POST",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Wellbore DDMS",
      "filename": "Wellbore DDMS",
      "seq": 25,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Wellbore DDMS",
          "seq": 25
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "alpha",
          "filename": "alpha",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "alpha",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "ddms",
              "filename": "ddms",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "ddms",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "v2",
                  "filename": "v2",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "v2",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "folder",
                      "name": "logs",
                      "filename": "logs",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "logs",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "{record_id}",
                          "filename": "{record_id}",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "{record_id}",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "data",
                              "filename": "data",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "data",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Returns the data according to the specified query parameters.",
                                  "filename": "Returns the data according to the specified query parameters.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/alpha/ddms/v2/logs/:record_id/data?offset=5&limit=100&summary=Select all curves&value=&describe=false&filter=MD:gt:1000&filter=MD:lt:42000&orient=split",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "offset",
                                        "value": "5",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "limit",
                                        "value": "100",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "summary",
                                        "value": "Select all curves",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "value",
                                        "value": "",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "describe",
                                        "value": "false",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "filter",
                                        "value": "MD:gt:1000",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "filter",
                                        "value": "MD:lt:42000",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "orient",
                                        "value": "split",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "record_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Returns the data according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using __describe__ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter __curves__ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "http",
                                  "name": "Writes data as a whole bulk, creates a new version.",
                                  "filename": "Writes data as a whole bulk, creates a new version.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/alpha/ddms/v2/logs/:record_id/data",
                                    "method": "POST",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Content-Type",
                                        "value": "application/json",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "json",
                                      "json": "{\n  \"columns\":[\n    \"Ref\",\n    \"col_1\",\n    \"col_2\"\n  ],\n  \"index\":[\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  \"data\":[\n    [\n      0.0,\n      1111.1,\n      2222.1\n    ],\n    [\n      0.5,\n      1111.2,\n      2222.2\n    ],\n    [\n      1.0,\n      1111.3,\n      2222.3\n    ],\n    [\n      1.5,\n      1111.4,\n      2222.4\n    ],\n    [\n      2.0,\n      1111.5,\n      2222.5\n    ]\n  ]\n}",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Writes data to the associated record. It creates a new version.\nPayload is expected to contain the entire bulk which will replace as latest version\nany previous bulk. Previous bulk versions are accessible via the get bulk data version API.\nSupport JSON and Parquet format ('Content_Type' must be set accordingly).\nSupport http chunked encoding transfer.\n  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins\n  \n**Important**: In order to minimize writing time, it's necessary to:  \n- Double check whether bulk data is big enough to be sent with chunking APIs: meaning > 10 millions values or > 500 columns\n    - If no, use instead POST /ddms/v3/welllogs/MY_RECORD_ID/data API\n- Ensure all curve's values are in the same chunk to be sent\n- Each chunk should contain as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "sessions",
                              "filename": "sessions",
                              "seq": 2,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "sessions",
                                  "seq": 2
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Create a new session on the given record for writing bulk data.",
                                  "filename": "Create a new session on the given record for writing bulk data.bru",
                                  "seq": 3,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/alpha/ddms/v2/logs/:record_id/sessions",
                                    "method": "POST",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Content-Type",
                                        "value": "application/json",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "json",
                                      "json": "{\n  \"fromVersion\": 123456789,\n  \"mode\": \"update\"\n}",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Initiate a session based on record version provided. The session is isolated from any other modifications. \nInside a session, individual chunk doesn't generate new individual record version.  \n \nA new single version is created only at session completion 'aggregating' all updates.\n A typical workflow is:\n 1. create a session\n 2. send X chunks (can be parallelized)\n 3. commit the session  \n   \nSession has an expiry time.\nIf the session is not completed before, it's automatically dropped. \nThe session duration is specified in the request but cannot exceeds 24 hours.\n\n**Note**: For `WellLog` and `WellboreTrajectory` kind, the attribute **extendedLoadCompleted** can be set into session.meta \nto set \"record.data.IsExtendedLoad\" to **False** after completing the session \n(with _PATCH /{record_id}/sessions/{session_id}_ API). See swagger examples for details.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "http",
                                  "name": "list session of the given record.",
                                  "filename": "list session of the given record.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/alpha/ddms/v2/logs/:record_id/sessions",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "folder",
                                  "name": "{session_id}",
                                  "filename": "{session_id}",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "{session_id}",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "folder",
                                      "name": "data",
                                      "filename": "data",
                                      "seq": 1,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "data",
                                          "seq": 1
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Send a data chunk. Session must be complete/commit once all chunks are sent.",
                                          "filename": "Send a data chunk. Session must be complete-commit once all chunks are sent.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/alpha/ddms/v2/logs/:record_id/sessions/:session_id/data",
                                            "method": "POST",
                                            "headers": [
                                              {
                                                "name": "data-partition-id",
                                                "value": "string",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Content-Type",
                                                "value": "application/json",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "record_id",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "session_id",
                                                "value": "84396aaa-1a7a-9d8b-08e5-a07719d55483",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "json",
                                              "json": "{\n  \"columns\":[\n    \"Ref\",\n    \"col_1\",\n    \"col_2\"\n  ],\n  \"index\":[\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  \"data\":[\n    [\n      0.0,\n      1111.1,\n      2222.1\n    ],\n    [\n      0.5,\n      1111.2,\n      2222.2\n    ],\n    [\n      1.0,\n      1111.3,\n      2222.3\n    ],\n    [\n      1.5,\n      1111.4,\n      2222.4\n    ],\n    [\n      2.0,\n      1111.5,\n      2222.5\n    ]\n  ]\n}",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "Send a data chunk. Session must be complete/commit once all chunks are sent. This will create a new and single version aggregating all and previous bulk.Support JSON and Parquet format ('Content_Type' must be set accordingly). Support http chunked encoding.  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "type": "http",
                                      "name": "get session.",
                                      "filename": "get session.bru",
                                      "seq": 2,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/alpha/ddms/v2/logs/:record_id/sessions/:session_id",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "string",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "record_id",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "session_id",
                                            "value": "84396aaa-1a7a-9d8b-08e5-a07719d55483",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    },
                                    {
                                      "type": "http",
                                      "name": "Update a session, either commit or abandon.",
                                      "filename": "Update a session, either commit or abandon.bru",
                                      "seq": 3,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/alpha/ddms/v2/logs/:record_id/sessions/:session_id",
                                        "method": "PATCH",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "string",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Content-Type",
                                            "value": "application/json",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "record_id",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "session_id",
                                            "value": "84396aaa-1a7a-9d8b-08e5-a07719d55483",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "json",
                                          "json": "{\n  \"state\": \"abandon\"\n}",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Either validates the session' bulk data, a new version of record will be created with data sent \n                within the session. Either abandon the session, and let record unchanged.  \n                Note: bulk data consistency check will be run when committing bulk data.",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "versions",
                              "filename": "versions",
                              "seq": 3,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "versions",
                                  "seq": 3
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "{version}",
                                  "filename": "{version}",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "{version}",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "folder",
                                      "name": "data",
                                      "filename": "data",
                                      "seq": 1,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "data",
                                          "seq": 1
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Returns data of the specified version.",
                                          "filename": "Returns data of the specified version.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/alpha/ddms/v2/logs/:record_id/versions/:version/data?offset=5&limit=100&summary=Select all curves&value=&describe=false&filter=MD:gt:1000&filter=MD:lt:42000&orient=split",
                                            "method": "GET",
                                            "headers": [
                                              {
                                                "name": "data-partition-id",
                                                "value": "string",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "offset",
                                                "value": "5",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "limit",
                                                "value": "100",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "summary",
                                                "value": "Select all curves",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "value",
                                                "value": "",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "describe",
                                                "value": "false",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "filter",
                                                "value": "MD:gt:1000",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "filter",
                                                "value": "MD:lt:42000",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "orient",
                                                "value": "split",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "record_id",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "version",
                                                "value": "5721",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "Returns the data of a specific version according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using __describe__ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter __curves__ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "ddms",
          "filename": "ddms",
          "seq": 3,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "ddms",
              "seq": 3
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "v2",
              "filename": "v2",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v2",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "logs",
                  "filename": "logs",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "logs",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create or update the logs using wks:log:1.0.5 schema",
                      "filename": "Create or update the logs using wks-log-1.0.5 schema.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/ddms/v2/logs",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"data.default.owners@{{datapartitionid}}.{{domain}}.com\"\n      ],\n      \"viewers\": [\n        \"data.default.viewers@{{datapartitionid}}.{{domain}}.com\"\n      ]\n    },\n    \"data\": {\n      \"history\": [\n        {\n          \"date\": \"2019-02-01T11:16:03Z\",\n          \"description\": \"Fake example\",\n          \"user\": \"BWillis\"\n        }\n      ],\n      \"log\": {\n        \"dataType\": \"number\",\n        \"dimension\": 1,\n        \"family\": \"Gamma Ray\",\n        \"familyType\": \"Gamma Ray\",\n        \"format\": \"float32\",\n        \"mnemonic\": \"GR\",\n        \"name\": \"myLog_GR\",\n        \"properties\": [\n          {\n            \"description\": \"Linear depth offset of the channel sensor relative to some reference point, typically the toolstring zero\",\n            \"name\": \"MEASURE_POINT_OFFSET\",\n            \"unitKey\": \"m\",\n            \"value\": 0.264922\n          }\n        ],\n        \"unitKey\": \"gAPI\"\n      },\n      \"name\": \"myLog_GR\",\n      \"reference\": {\n        \"dataType\": \"number\",\n        \"dimension\": 1,\n        \"family\": \"Measured Depth\",\n        \"familyType\": \"Depth\",\n        \"format\": \"float32\",\n        \"mnemonic\": \"MD\",\n        \"name\": \"Measured Depth\",\n        \"unitKey\": \"ft\"\n      },\n      \"referenceType\": \"Measured Depth\",\n      \"relationships\": {\n        \"logSet\": {\n          \"confidence\": 1,\n          \"id\": \"{{datapartitionid}}:logSet:myLogset\",\n          \"name\": \"myLogset\"\n        },\n        \"well\": {\n          \"confidence\": 1,\n          \"id\": \"{{datapartitionid}}:well:myWell\",\n          \"name\": \"myWell\"\n        },\n        \"wellbore\": {\n          \"confidence\": 1,\n          \"id\": \"{{datapartitionid}}:wellbore:myWellbore\",\n          \"name\": \"myWellbore\"\n        }\n      }\n    },\n    \"id\": \"{{datapartitionid}}:log:myLog_GR\",\n    \"kind\": \"{{datapartitionid}}:wks:log:1.0.5\",\n    \"legal\": {\n      \"legaltags\": [\n        \"{{legaltags}}\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"FR\",\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    }\n  }\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{logid}",
                      "filename": "{logid}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{logid}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete the log. The API performs a logical deletion of the given record",
                          "filename": "Delete the log. The API performs a logical deletion of the given record.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v2/logs/:logid",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "logid",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Get the Log using wks:log:1.0.5 schema",
                          "filename": "Get the Log using wks-log-1.0.5 schema.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v2/logs/:logid",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "logid",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get the log object using its data ecosystem **id**.  <p>If the log\n                kind is *wks:log:1.0.5* returns the record directly</p> <p>If the\n                wellbore kind is different *wks:log:1.0.5* it will get the raw\n                record and convert the results to match the *wks:log:1.0.5*. If\n                conversion is not possible returns an error **500**.</p>  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get all versions of the log",
                              "filename": "Get all versions of the log.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v2/logs/:logid/versions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "logid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the given version of log using wks:log:1.0.5 schema",
                                  "filename": "Get the given version of log using wks-log-1.0.5 schema.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v2/logs/:logid/versions/:version",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "logid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "version",
                                        "value": "5721",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "dipsets",
                  "filename": "dipsets",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "dipsets",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create or update the DipSets using wks:dipSet:1.0.0 schema",
                      "filename": "Create or update the DipSets using wks-dipSet-1.0.0 schema.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/ddms/v2/dipsets",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"data.default.owners@{{datapartitionid}}.{{domain}}.com\"\n      ],\n      \"viewers\": [\n        \"data.default.viewers@{{datapartitionid}}.{{domain}}.com\"\n      ]\n    },\n    \"data\": {\n      \"classification\": \"Externally Processed LogSet\",\n      \"name\": \"myDipSet\",\n      \"relationships\": {\n        \"well\": {\n          \"confidence\": 1,\n          \"id\": \"{{datapartitionid}}:well:myWell\",\n          \"name\": \"myWell\"\n        },\n        \"wellbore\": {\n          \"confidence\": 1,\n          \"id\": \"{{datapartitionid}}:wellbore:myWellbore\",\n          \"name\": \"myWellbore\"\n        }\n      }\n    },\n    \"id\": \"{{datapartitionid}}:dipSet:myDipSet\",\n    \"kind\": \"{{datapartitionid}}:wks:dipSet:1.0.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"{{legaltags}}\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"FR\",\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    }\n  }\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{dipsetid}",
                      "filename": "{dipsetid}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{dipsetid}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete the DipSet. The API performs a logical deletion of the given record",
                          "filename": "Delete the DipSet. The API performs a logical deletion of the given record.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid?recursive=false",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "recursive",
                                "value": "false",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "dipsetid",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "dips",
                          "filename": "dips",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "dips",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Define the dips of the dipset",
                              "filename": "Define the dips of the dipset.bru",
                              "seq": 5,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid/dips",
                                "method": "POST",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Content-Type",
                                    "value": "application/json",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "dipsetid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "json",
                                  "json": "[\n  {\n    \"azimuth\": {\n      \"unitKey\": \"dega\",\n      \"value\": 42\n    },\n    \"classification\": \"fracture\",\n    \"inclination\": {\n      \"unitKey\": \"dega\",\n      \"value\": 9\n    },\n    \"quality\": {\n      \"unitKey\": \"unitless\",\n      \"value\": 0.5\n    },\n    \"reference\": {\n      \"unitKey\": \"meter\",\n      \"value\": 1000.5\n    },\n    \"xCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 2\n    },\n    \"yCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 45\n    },\n    \"zCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 7\n    }\n  },\n  {\n    \"azimuth\": {\n      \"unitKey\": \"dega\",\n      \"value\": 42\n    },\n    \"classification\": \"fracture\",\n    \"inclination\": {\n      \"unitKey\": \"dega\",\n      \"value\": 9\n    },\n    \"quality\": {\n      \"unitKey\": \"unitless\",\n      \"value\": 0.5\n    },\n    \"reference\": {\n      \"unitKey\": \"meter\",\n      \"value\": 1000.5\n    },\n    \"xCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 2\n    },\n    \"yCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 45\n    },\n    \"zCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 7\n    }\n  }\n]",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Replace previous dips by provided dips. Sort dips by reference and azimuth.   \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Get dips",
                              "filename": "Get dips.bru",
                              "seq": 4,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid/dips?index=9075&limit=8230",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "index",
                                    "value": "9075",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "limit",
                                    "value": "8230",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "dipsetid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Return dips from dipset from the given index until the given number of dips specifed in query parameters. \n    If not specified returns all dips from dipset.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "insert",
                              "filename": "insert",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "insert",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "insert dip in  a dipset",
                                  "filename": "insert dip in  a dipset.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid/dips/insert",
                                    "method": "POST",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Content-Type",
                                        "value": "application/json",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "dipsetid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "json",
                                      "json": "[\n  {\n    \"azimuth\": {\n      \"unitKey\": \"dega\",\n      \"value\": 42\n    },\n    \"classification\": \"fracture\",\n    \"inclination\": {\n      \"unitKey\": \"dega\",\n      \"value\": 9\n    },\n    \"quality\": {\n      \"unitKey\": \"unitless\",\n      \"value\": 0.5\n    },\n    \"reference\": {\n      \"unitKey\": \"meter\",\n      \"value\": 1000.5\n    },\n    \"xCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 2\n    },\n    \"yCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 45\n    },\n    \"zCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 7\n    }\n  },\n  {\n    \"azimuth\": {\n      \"unitKey\": \"dega\",\n      \"value\": 42\n    },\n    \"classification\": \"fracture\",\n    \"inclination\": {\n      \"unitKey\": \"dega\",\n      \"value\": 9\n    },\n    \"quality\": {\n      \"unitKey\": \"unitless\",\n      \"value\": 0.5\n    },\n    \"reference\": {\n      \"unitKey\": \"meter\",\n      \"value\": 1000.5\n    },\n    \"xCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 2\n    },\n    \"yCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 45\n    },\n    \"zCoordinate\": {\n      \"unitKey\": \"meter\",\n      \"value\": 7\n    }\n  }\n]",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Insert dips in dipset. \n    Existing dips are not replaced. \n    Several dip can have same reference. \n    Operation will sort by reference all dips in dipset (may modify dip indexes).   \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "query",
                              "filename": "query",
                              "seq": 2,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "query",
                                  "seq": 2
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Query dip from dipset",
                                  "filename": "Query dip from dipset.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid/dips/query?minReference=6129.942834274511&maxReference=8047.708040347382&classification=string",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "minReference",
                                        "value": "6129.942834274511",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "maxReference",
                                        "value": "8047.708040347382",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "classification",
                                        "value": "string",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "dipsetid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Search dip within reference interval and specific classification.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "folder",
                              "name": "{index}",
                              "filename": "{index}",
                              "seq": 3,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{index}",
                                  "seq": 3
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Delete a dip",
                                  "filename": "Delete a dip.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid/dips/:index",
                                    "method": "DELETE",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "dipsetid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "index",
                                        "value": "1400",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Removes the dip at index.   \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "http",
                                  "name": "Get a dip at index",
                                  "filename": "Get a dip at index.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid/dips/:index",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "dipsetid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "index",
                                        "value": "1400",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "\"Return dip from dipset at the given index.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "http",
                                  "name": "Update dip",
                                  "filename": "Update dip.bru",
                                  "seq": 3,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid/dips/:index",
                                    "method": "PATCH",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Content-Type",
                                        "value": "application/json",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "dipsetid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "index",
                                        "value": "1400",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "json",
                                      "json": "{\n  \"azimuth\": {\n    \"unitKey\": \"dega\",\n    \"value\": 42\n  },\n  \"classification\": \"fracture\",\n  \"inclination\": {\n    \"unitKey\": \"dega\",\n    \"value\": 9\n  },\n  \"quality\": {\n    \"unitKey\": \"unitless\",\n    \"value\": 0.5\n  },\n  \"reference\": {\n    \"unitKey\": \"meter\",\n    \"value\": 1000.5\n  },\n  \"xCoordinate\": {\n    \"unitKey\": \"meter\",\n    \"value\": 2\n  },\n  \"yCoordinate\": {\n    \"unitKey\": \"meter\",\n    \"value\": 45\n  },\n  \"zCoordinate\": {\n    \"unitKey\": \"meter\",\n    \"value\": 7\n  }\n}",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "\"Update dip at index     \n    Operation will sort by reference all dips in dipset (may modify dip indexes).",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "http",
                          "name": "Get the DipSet using wks:dipSet:1.0.0 schema",
                          "filename": "Get the DipSet using wks-dipSet-1.0.0 schema.bru",
                          "seq": 4,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "dipsetid",
                                "value": "string",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get the DipSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get all versions of the dipset",
                              "filename": "Get all versions of the dipset.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid/versions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "dipsetid",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the given version of DipSet using wks:dipset:1.0.0 schema",
                                  "filename": "Get the given version of DipSet using wks-dipset-1.0.0 schema.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v2/dipsets/:dipsetid/versions/:version",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "dipsetid",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "version",
                                        "value": "5721",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "\"Get the DipSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "folder",
              "name": "v3",
              "filename": "v3",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "v3",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "folder",
                  "name": "wellboremarkersets",
                  "filename": "wellboremarkersets",
                  "seq": 2,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "wellboremarkersets",
                      "seq": 2
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create or update the Wellbore Markerset using osdu schema",
                      "filename": "Create or update the Wellbore Markerset using osdu schema.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/ddms/v3/wellboremarkersets",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "{\n  \"acl\": {\n    \"owners\": [\n      \"data.default.owners@{{datapartitionid}}.{{domain}}\"\n    ],\n    \"viewers\": [\n      \"data.default.viewers@{{datapartitionid}}.{{domain}}\"\n    ]\n  },\n  \"ancestry\": {\n    \"parents\": []\n  },\n  \"createTime\": \"2020-12-16T11:46:20.163Z\",\n  \"createUser\": \"some-user@some-company-cloud.com\",\n  \"data\": {\n    \"Artefacts\": [\n      {\n        \"ResourceID\": \"{{datapartitionid}}:dataset--AnyDataset:SomeUniqueAnyDatasetID:\",\n        \"ResourceKind\": \"{{datapartitionid}}:source_name:group_type--IndividualType:0.0.0\",\n        \"RoleID\": \"{{datapartitionid}}:reference-data--ArtefactRole:AdaptedContent:\"\n      }\n    ],\n    \"AuthorIDs\": [\n      \"Example AuthorIDs\"\n    ],\n    \"AvailableMarkerProperties\": [\n      {\n        \"MarkerPropertyTypeID\": \"partition-id:reference-data--MarkerPropertyType:MissingThickness:\",\n        \"MarkerPropertyUnitID\": \"partition-id:reference-data--UnitOfMeasure:ft:\",\n        \"Name\": \"MissingThickness\"\n      }\n    ],\n    \"BusinessActivities\": [\n      \"Example BusinessActivities\"\n    ],\n    \"CreationDateTime\": \"2020-02-13T09:13:15.55Z\",\n    \"Datasets\": [\n      \"{{datapartitionid}}:dataset--AnyDataset:SomeUniqueAnyDatasetID:\"\n    ],\n    \"Description\": \"Example Description\",\n    \"ExistenceKind\": \"{{datapartitionid}}:reference-data--ExistenceKind:Prototype:\",\n    \"ExtensionProperties\": {},\n    \"GeoContexts\": [\n      {\n        \"BasinID\": \"{{datapartitionid}}:master-data--Basin:SomeUniqueBasinID:\",\n        \"GeoTypeID\": \"{{datapartitionid}}:reference-data--BasinType:ArcWrenchOceanContinent:\"\n      }\n    ],\n    \"IsDiscoverable\": true,\n    \"IsExtendedLoad\": true,\n    \"LineageAssertions\": [\n      {\n        \"ID\": \"{{datapartitionid}}:any-group-type--AnyIndividualType:SomeUniqueAnyIndividualTypeID:\",\n        \"LineageRelationshipType\": \"{{datapartitionid}}:reference-data--LineageRelationshipType:Direct:\"\n      }\n    ],\n    \"Markers\": [\n      {\n        \"FeatureName\": \"Example FeatureName\",\n        \"FeatureTypeID\": \"{{datapartitionid}}:reference-data--FeatureType:Base:\",\n        \"GeologicalAge\": \"Example GeologicalAge\",\n        \"InterpretationID\": \"{{datapartitionid}}:work-product-component--GeobodyBoundaryInterpretation:GeobodyBoundaryInterpretation-911bb71f-06ab-4deb-8e68-b8c9229dc76b:\",\n        \"MarkerDate\": \"2020-02-13T09:13:15.55Z\",\n        \"MarkerID\": \"Example Marker ID\",\n        \"MarkerInterpreter\": \"Example MarkerInterpreter\",\n        \"MarkerMeasuredDepth\": 12345.6,\n        \"MarkerName\": \"Example MarkerName\",\n        \"MarkerObservationNumber\": 12345.6,\n        \"MarkerSubSeaVerticalDepth\": 12345.6,\n        \"MarkerTypeID\": \"{{datapartitionid}}:reference-data--MarkerType:Biostratigraphy:\",\n        \"Missing\": \"Example Missing\",\n        \"NegativeVerticalDelta\": 12345.6,\n        \"PositiveVerticalDelta\": 12345.6,\n        \"SurfaceDipAngle\": 12345.6,\n        \"SurfaceDipAzimuth\": 12345.6\n      }\n    ],\n    \"Name\": \"Example Name\",\n    \"ResourceCurationStatus\": \"{{datapartitionid}}:reference-data--ResourceCurationStatus:CREATED:\",\n    \"ResourceHomeRegionID\": \"{{datapartitionid}}:reference-data--OSDURegion:AWSEastUSA:\",\n    \"ResourceHostRegionIDs\": [\n      \"{{datapartitionid}}:reference-data--OSDURegion:AWSEastUSA:\"\n    ],\n    \"ResourceLifecycleStatus\": \"{{datapartitionid}}:reference-data--ResourceLifecycleStatus:LOADING:\",\n    \"ResourceSecurityClassification\": \"{{datapartitionid}}:reference-data--ResourceSecurityClassification:RESTRICTED:\",\n    \"Source\": \"Example Data Source\",\n    \"SpatialArea\": {\n      \"AppliedOperations\": [\n        \"conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted\",\n        \"transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed\"\n      ],\n      \"AsIngestedCoordinates\": {\n        \"CoordinateReferenceSystemID\": \"{{datapartitionid}}:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n        \"VerticalCoordinateReferenceSystemID\": \"{{datapartitionid}}:reference-data--CoordinateReferenceSystem:Vertical:EPSG::5714:\",\n        \"bbox\": [\n          12345.6,\n          12345.6,\n          12345.6,\n          12345.6\n        ],\n        \"features\": [\n          {\n            \"bbox\": [\n              12345.6,\n              12345.6,\n              12345.6,\n              12345.6\n            ],\n            \"geometry\": {\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ],\n              \"coordinates\": [\n                12345.6,\n                12345.6\n              ],\n              \"type\": \"AnyCrsPoint\"\n            },\n            \"properties\": {},\n            \"type\": \"AnyCrsFeature\"\n          }\n        ],\n        \"persistableReferenceCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"OSDU\\\",\\\"code\\\":\\\"32021079\\\"},\\\"lateBoundCRS\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"32021\\\"},\\\"name\\\":\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"PROJCS[\\\\\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Lambert_Conformal_Conic\\\\\\\"],PARAMETER[\\\\\\\"False_Easting\\\\\\\",2000000.0],PARAMETER[\\\\\\\"False_Northing\\\\\\\",0.0],PARAMETER[\\\\\\\"Central_Meridian\\\\\\\",-100.5],PARAMETER[\\\\\\\"Standard_Parallel_1\\\\\\\",46.18333333333333],PARAMETER[\\\\\\\"Standard_Parallel_2\\\\\\\",47.48333333333333],PARAMETER[\\\\\\\"Latitude_Of_Origin\\\\\\\",45.66666666666666],UNIT[\\\\\\\"Foot_US\\\\\\\",0.3048006096012192],AUTHORITY[\\\\\\\"EPSG\\\\\\\",32021]]\\\"},\\\"name\\\":\\\"NAD27 * OGP-Usa Conus / North Dakota CS27 South zone [32021,15851]\\\",\\\"singleCT\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"15851\\\"},\\\"name\\\":\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",\\\"type\\\":\\\"ST\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"GEOGTRAN[\\\\\\\"NAD_1927_To_WGS_1984_79_CONUS\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],GEOGCS[\\\\\\\"GCS_WGS_1984\\\\\\\",DATUM[\\\\\\\"D_WGS_1984\\\\\\\",SPHEROID[\\\\\\\"WGS_1984\\\\\\\",6378137.0,298.257223563]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],METHOD[\\\\\\\"NADCON\\\\\\\"],PARAMETER[\\\\\\\"Dataset_conus\\\\\\\",0.0],OPERATIONACCURACY[5.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",15851]]\\\"},\\\"type\\\":\\\"EBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\"}\",\n        \"persistableReferenceUnitZ\": \"{\\\"scaleOffset\\\":{\\\"scale\\\":1.0,\\\"offset\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"Length\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"USO\\\"}\",\n        \"persistableReferenceVerticalCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"5714\\\"},\\\"name\\\":\\\"MSL_Height\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"VERTCS[\\\\\\\"MSL_Height\\\\\\\",VDATUM[\\\\\\\"Mean_Sea_Level\\\\\\\"],PARAMETER[\\\\\\\"Vertical_Shift\\\\\\\",0.0],PARAMETER[\\\\\\\"Direction\\\\\\\",1.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",5714]]\\\"}\",\n        \"type\": \"AnyCrsFeatureCollection\"\n      },\n      \"CoordinateQualityCheckDateTime\": \"2020-02-13T09:13:15.55Z\",\n      \"CoordinateQualityCheckPerformedBy\": \"Example CoordinateQualityCheckPerformedBy\",\n      \"CoordinateQualityCheckRemarks\": [\n        \"Example CoordinateQualityCheckRemarks\"\n      ],\n      \"QualitativeSpatialAccuracyTypeID\": \"{{datapartitionid}}:reference-data--QualitativeSpatialAccuracyType:Confirmed:\",\n      \"QuantitativeAccuracyBandID\": \"{{datapartitionid}}:reference-data--QuantitativeAccuracyBand:Length.LessThan1m:\",\n      \"SpatialGeometryTypeID\": \"{{datapartitionid}}:reference-data--SpatialGeometryType:Point:\",\n      \"SpatialLocationCoordinatesDate\": \"2020-02-13T09:13:15.55Z\",\n      \"SpatialParameterTypeID\": \"{{datapartitionid}}:reference-data--SpatialParameterType:Outline:\",\n      \"Wgs84Coordinates\": {\n        \"bbox\": [\n          12345.6,\n          12345.6,\n          12345.6,\n          12345.6\n        ],\n        \"features\": [\n          {\n            \"bbox\": [\n              12345.6,\n              12345.6,\n              12345.6,\n              12345.6\n            ],\n            \"geometry\": {\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ],\n              \"coordinates\": [\n                12345.6,\n                12345.6\n              ],\n              \"type\": \"Point\"\n            },\n            \"properties\": {},\n            \"type\": \"Feature\"\n          }\n        ],\n        \"type\": \"FeatureCollection\"\n      }\n    },\n    \"SpatialPoint\": {\n      \"AppliedOperations\": [\n        \"conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted\",\n        \"transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed\"\n      ],\n      \"AsIngestedCoordinates\": {\n        \"CoordinateReferenceSystemID\": \"{{datapartitionid}}:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n        \"VerticalCoordinateReferenceSystemID\": \"{{datapartitionid}}:reference-data--CoordinateReferenceSystem:Vertical:EPSG::5714:\",\n        \"bbox\": [\n          12345.6,\n          12345.6,\n          12345.6,\n          12345.6\n        ],\n        \"features\": [\n          {\n            \"bbox\": [\n              12345.6,\n              12345.6,\n              12345.6,\n              12345.6\n            ],\n            \"geometry\": {\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ],\n              \"coordinates\": [\n                12345.6,\n                12345.6\n              ],\n              \"type\": \"AnyCrsPoint\"\n            },\n            \"properties\": {},\n            \"type\": \"AnyCrsFeature\"\n          }\n        ],\n        \"persistableReferenceCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"OSDU\\\",\\\"code\\\":\\\"32021079\\\"},\\\"lateBoundCRS\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"32021\\\"},\\\"name\\\":\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"PROJCS[\\\\\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Lambert_Conformal_Conic\\\\\\\"],PARAMETER[\\\\\\\"False_Easting\\\\\\\",2000000.0],PARAMETER[\\\\\\\"False_Northing\\\\\\\",0.0],PARAMETER[\\\\\\\"Central_Meridian\\\\\\\",-100.5],PARAMETER[\\\\\\\"Standard_Parallel_1\\\\\\\",46.18333333333333],PARAMETER[\\\\\\\"Standard_Parallel_2\\\\\\\",47.48333333333333],PARAMETER[\\\\\\\"Latitude_Of_Origin\\\\\\\",45.66666666666666],UNIT[\\\\\\\"Foot_US\\\\\\\",0.3048006096012192],AUTHORITY[\\\\\\\"EPSG\\\\\\\",32021]]\\\"},\\\"name\\\":\\\"NAD27 * OGP-Usa Conus / North Dakota CS27 South zone [32021,15851]\\\",\\\"singleCT\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"15851\\\"},\\\"name\\\":\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",\\\"type\\\":\\\"ST\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"GEOGTRAN[\\\\\\\"NAD_1927_To_WGS_1984_79_CONUS\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],GEOGCS[\\\\\\\"GCS_WGS_1984\\\\\\\",DATUM[\\\\\\\"D_WGS_1984\\\\\\\",SPHEROID[\\\\\\\"WGS_1984\\\\\\\",6378137.0,298.257223563]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],METHOD[\\\\\\\"NADCON\\\\\\\"],PARAMETER[\\\\\\\"Dataset_conus\\\\\\\",0.0],OPERATIONACCURACY[5.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",15851]]\\\"},\\\"type\\\":\\\"EBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\"}\",\n        \"persistableReferenceUnitZ\": \"{\\\"scaleOffset\\\":{\\\"scale\\\":1.0,\\\"offset\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"Length\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"USO\\\"}\",\n        \"persistableReferenceVerticalCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"5714\\\"},\\\"name\\\":\\\"MSL_Height\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"VERTCS[\\\\\\\"MSL_Height\\\\\\\",VDATUM[\\\\\\\"Mean_Sea_Level\\\\\\\"],PARAMETER[\\\\\\\"Vertical_Shift\\\\\\\",0.0],PARAMETER[\\\\\\\"Direction\\\\\\\",1.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",5714]]\\\"}\",\n        \"type\": \"AnyCrsFeatureCollection\"\n      },\n      \"CoordinateQualityCheckDateTime\": \"2020-02-13T09:13:15.55Z\",\n      \"CoordinateQualityCheckPerformedBy\": \"Example CoordinateQualityCheckPerformedBy\",\n      \"CoordinateQualityCheckRemarks\": [\n        \"Example CoordinateQualityCheckRemarks\"\n      ],\n      \"QualitativeSpatialAccuracyTypeID\": \"{{datapartitionid}}:reference-data--QualitativeSpatialAccuracyType:Confirmed:\",\n      \"QuantitativeAccuracyBandID\": \"{{datapartitionid}}:reference-data--QuantitativeAccuracyBand:Length.LessThan1m:\",\n      \"SpatialGeometryTypeID\": \"{{datapartitionid}}:reference-data--SpatialGeometryType:Point:\",\n      \"SpatialLocationCoordinatesDate\": \"2020-02-13T09:13:15.55Z\",\n      \"SpatialParameterTypeID\": \"{{datapartitionid}}:reference-data--SpatialParameterType:Outline:\",\n      \"Wgs84Coordinates\": {\n        \"bbox\": [\n          12345.6,\n          12345.6,\n          12345.6,\n          12345.6\n        ],\n        \"features\": [\n          {\n            \"bbox\": [\n              12345.6,\n              12345.6,\n              12345.6,\n              12345.6\n            ],\n            \"geometry\": {\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ],\n              \"coordinates\": [\n                12345.6,\n                12345.6\n              ],\n              \"type\": \"Point\"\n            },\n            \"properties\": {},\n            \"type\": \"Feature\"\n          }\n        ],\n        \"type\": \"FeatureCollection\"\n      }\n    },\n    \"StratigraphicColumnID\": \"{{datapartitionid}}:work-product-component--StratigraphicColumn:StratigraphicColumn-911bb71f-06ab-4deb-8e68-b8c9229dc76b:\",\n    \"StratigraphicColumnRankInterpretationID\": \"{{datapartitionid}}:work-product-component--StratigraphicColumnRankInterpretation:StratigraphicColumnRankInterpretation-911bb71f-06ab-4deb-8e68-b8c9229dc76b:\",\n    \"SubmitterName\": \"Example SubmitterName\",\n    \"Tags\": [\n      \"Example Tags\"\n    ],\n    \"TechnicalAssuranceID\": \"{{datapartitionid}}:reference-data--TechnicalAssuranceType:Certified:\",\n    \"TechnicalAssurances\": [\n      {\n        \"AcceptableUsage\": [\n          {\n            \"WorkflowPersona\": \"{{datapartitionid}}:reference-data--WorkflowPersonaType:SeismicProcessor:\",\n            \"WorkflowUsage\": \"{{datapartitionid}}:reference-data--WorkflowUsageType:SeismicProcessing:\"\n          }\n        ],\n        \"Comment\": \"This is free form text from reviewer, e.g. restrictions on use\",\n        \"EffectiveDate\": \"2020-02-13\",\n        \"Reviewers\": [\n          {\n            \"Name\": \"Example Name\",\n            \"OrganisationID\": \"{{datapartitionid}}:master-data--Organisation:SomeUniqueOrganisationID:\",\n            \"RoleTypeID\": \"{{datapartitionid}}:reference-data--ContactRoleType:AccountOwner:\"\n          }\n        ],\n        \"TechnicalAssuranceTypeID\": \"{{datapartitionid}}:reference-data--TechnicalAssuranceType:Trusted:\",\n        \"UnacceptableUsage\": [\n          {\n            \"WorkflowPersona\": \"{{datapartitionid}}:reference-data--WorkflowPersonaType:SeismicInterpreter:\",\n            \"WorkflowUsage\": \"{{datapartitionid}}:reference-data--WorkflowUsageType:SeismicInterpretation:\"\n          }\n        ]\n      }\n    ],\n    \"VerticalMeasurement\": {\n      \"EffectiveDateTime\": \"2020-02-13T09:13:15.55Z\",\n      \"TerminationDateTime\": \"2020-02-13T09:13:15.55Z\",\n      \"VerticalCRSID\": \"{{datapartitionid}}:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n      \"VerticalMeasurement\": 12345.6,\n      \"VerticalMeasurementDescription\": \"Example VerticalMeasurementDescription\",\n      \"VerticalMeasurementPathID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementPath:MD:\",\n      \"VerticalMeasurementSourceID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementSource:DRL:\",\n      \"VerticalMeasurementTypeID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementType:PBD:\",\n      \"VerticalMeasurementUnitOfMeasureID\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:m:\",\n      \"VerticalReferenceID\": \"Example VerticalReferenceID\",\n      \"WellboreTVDTrajectoryID\": \"{{datapartitionid}}:work-product-component--WellboreTrajectory:WellboreTrajectory-911bb71f-06ab-4deb-8e68-b8c9229dc76b:\"\n    },\n    \"WellboreID\": \"{{datapartitionid}}:master-data--Wellbore:SomeUniqueWellboreID:\"\n  },\n  \"id\": \"{{datapartitionid}}:work-product-component--WellboreMarkerSet:d5303b79-7904-5bfe-9c44-9a3ff41b6d6c\",\n  \"kind\": \"osdu:wks:work-product-component--WellboreMarkerSet:1.2.1\",\n  \"legal\": {\n    \"legaltags\": [\n      \"{{legaltags}}\"\n    ],\n    \"otherRelevantDataCountries\": [\n      \"FR\",\n      \"US\"\n    ]\n  },\n  \"meta\": [\n    {\n      \"kind\": \"Unit\",\n      \"name\": \"m\",\n      \"persistableReference\": \"{\\\"abcd\\\":{\\\"a\\\":0.0,\\\"b\\\":1.0,\\\"c\\\":1.0,\\\"d\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"L\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"UAD\\\"}\",\n      \"propertyNames\": [\n        \"VerticalMeasurement.VerticalMeasurement\",\n        \"Markers[].MarkerMeasuredDepth\",\n        \"Markers[].MarkerSubSeaVerticalDepth\",\n        \"Markers[].PositiveVerticalDelta\",\n        \"Markers[].NegativeVerticalDelta\"\n      ],\n      \"unitOfMeasureID\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:m:\"\n    },\n    {\n      \"kind\": \"Unit\",\n      \"name\": \"rad\",\n      \"persistableReference\": \"{\\\"abcd\\\":{\\\"a\\\":0.0,\\\"b\\\":1.0,\\\"c\\\":1.0,\\\"d\\\":0.0},\\\"symbol\\\":\\\"rad\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"A\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"UAD\\\"}\",\n      \"propertyNames\": [\n        \"Markers[].SurfaceDipAngle\",\n        \"Markers[].SurfaceDipAzimuth\"\n      ],\n      \"unitOfMeasureID\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:rad:\"\n    }\n  ],\n  \"modifyTime\": \"2020-12-16T11:52:24.477Z\",\n  \"modifyUser\": \"some-user@some-company-cloud.com\",\n  \"tags\": {\n    \"NameOfKey\": \"String value\"\n  }\n}",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{wellboremarkersetid}",
                      "filename": "{wellboremarkersetid}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellboremarkersetid}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete the wellboreMarkerset. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
                          "filename": "Delete the wellboreMarkerset. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wellboremarkersets/:wellboremarkersetid",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellboremarkersetid",
                                "value": "Q.C:work-product-component--WellboreMarkerSet:7zVzZ_GLqc",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Get the WellboreMarkerSet using osdu schema",
                          "filename": "Get the WellboreMarkerSet using osdu schema.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wellboremarkersets/:wellboremarkersetid",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellboremarkersetid",
                                "value": "Q.C:work-product-component--WellboreMarkerSet:7zVzZ_GLqc",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get the WellboreMarkerSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get all versions of the WellboreMarkerSet",
                              "filename": "Get all versions of the WellboreMarkerSet.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/wellboremarkersets/:wellboremarkersetid/versions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "wellboremarkersetid",
                                    "value": "Q.C:work-product-component--WellboreMarkerSet:7zVzZ_GLqc",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the given version of the WellboreMarkerSet using OSDU WellboreMarkerset schema",
                                  "filename": "Get the given version of the WellboreMarkerSet using OSDU WellboreMarkerset schema.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/wellboremarkersets/:wellboremarkersetid/versions/:version",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "wellboremarkersetid",
                                        "value": "Q.C:work-product-component--WellboreMarkerSet:7zVzZ_GLqc",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "version",
                                        "value": "5721",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "\"Get the WellboreMarkerSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "wellboreintervalsets",
                  "filename": "wellboreintervalsets",
                  "seq": 1,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "wellboreintervalsets",
                      "seq": 1
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create or update the WellboreIntervalSet using osdu schema",
                      "filename": "Create or update the WellboreIntervalSet using osdu schema.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/ddms/v3/wellboreintervalsets",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"data.default.owners@{{datapartitionid}}.{{domain}}\"\n      ],\n      \"viewers\": [\n        \"data.default.viewers@{{datapartitionid}}.{{domain}}\"\n      ]\n    },\n    \"ancestry\": {\n      \"parents\": [\n        \"{{datapartitionid}}:zoneSet:techlog-8B14F36E-2297-4BB8-AF09-B73578FD7A02--BEB57B2D-A304-4DE2-94B8-C20117ACA6FB:1678091451598889\"\n      ]\n    },\n    \"data\": {\n      \"Intervals\": [\n        {\n          \"GeologicUnitInterpretationIDs\": [\n            \"{{datapartitionid}}:work-product-component--StratigraphicUnitInterpretation:globalZone-1af0e063fc0315f09166b9e8ca0d8fb3553051c5856dfc7173f8e73143220872:\"\n          ],\n          \"IntervalID\": \"1af0e063fc0315f09166b9e8ca0d8fb3553051c5856dfc7173f8e73143220872\",\n          \"StartMeasuredDepth\": 92,\n          \"StopMeasuredDepth\": 1244\n        },\n        {\n          \"GeologicUnitInterpretationIDs\": [\n            \"{{datapartitionid}}:work-product-component--StratigraphicUnitInterpretation:globalZone-db607cf218b70a1eb3c9601eb0df2586dc5337a823fe227892d20fa130d45619:\"\n          ],\n          \"IntervalID\": \"db607cf218b70a1eb3c9601eb0df2586dc5337a823fe227892d20fa130d45619\",\n          \"StartMeasuredDepth\": 1244,\n          \"StopMeasuredDepth\": 1316\n        },\n        {\n          \"GeologicUnitInterpretationIDs\": [\n            \"{{datapartitionid}}:work-product-component--StratigraphicUnitInterpretation:globalZone-d37153fe7f2f5d16f1e399e5fd3a2f12626a27b6ac0364c07b3bd647af831def:\"\n          ],\n          \"IntervalID\": \"d37153fe7f2f5d16f1e399e5fd3a2f12626a27b6ac0364c07b3bd647af831def\",\n          \"StartMeasuredDepth\": 1316,\n          \"StopMeasuredDepth\": 1680\n        },\n        {\n          \"GeologicUnitInterpretationIDs\": [\n            \"{{datapartitionid}}:work-product-component--StratigraphicUnitInterpretation:globalZone-5eb61a554f0ae898dcaba0b121e6eab1445cb563989de875271d562d0b6533fb:\"\n          ],\n          \"IntervalID\": \"5eb61a554f0ae898dcaba0b121e6eab1445cb563989de875271d562d0b6533fb\",\n          \"StartMeasuredDepth\": 1680,\n          \"StopMeasuredDepth\": 1750\n        }\n      ],\n      \"Name\": \"Stratigraphy\",\n      \"WellboreID\": \"{{datapartitionid}}:master-data--Wellbore:techlog-1E343D72-F814-4E4B-A919-A874B2C9952E--625CD42C-FDD1-466A-968A-0B53DA2D0FA9:\"\n    },\n    \"id\": \"{{datapartitionid}}:work-product-component--WellboreIntervalSet:wellboreintervalsetId\",\n    \"kind\": \"osdu:wks:work-product-component--WellboreIntervalSet:1.0.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"{{legaltags}}\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"meta\": [\n      {\n        \"kind\": \"Unit\",\n        \"name\": \"m\",\n        \"persistableReference\": \"\\\"{\\\\\\\"scaleOffset\\\\\\\":{\\\\\\\"scale\\\\\\\":1.0,\\\\\\\"offset\\\\\\\":0.0},\\\\\\\"symbol\\\\\\\":\\\\\\\"M\\\\\\\",\\\\\\\"baseMeasurement\\\\\\\":{\\\\\\\"ancestry\\\\\\\":\\\\\\\"Length\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"UM\\\\\\\"},\\\\\\\"type\\\\\\\":\\\\\\\"USO\\\\\\\"}\\\"\",\n        \"propertyNames\": [\n          \"Intervals[].StartMeasuredDepth\",\n          \"Intervals[].StopMeasuredDepth\"\n        ],\n        \"unitOfMeasureID\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:m:\"\n      }\n    ]\n  }\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{wellboreintervalsetsid}",
                      "filename": "{wellboreintervalsetsid}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellboreintervalsetsid}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete the WellboreIntervalSetId. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
                          "filename": "Delete the WellboreIntervalSetId. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wellboreintervalsets/:wellboreintervalsetsid",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellboreintervalsetsid",
                                "value": "ELqrqbafL:work-product-component--WellboreIntervalSet::i",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Get the WellboreIntervalSet using osdu schema",
                          "filename": "Get the WellboreIntervalSet using osdu schema.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wellboreintervalsets/:wellboreintervalsetsid",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellboreintervalsetsid",
                                "value": "ELqrqbafL:work-product-component--WellboreIntervalSet::i",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get the WellboreIntervalSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get all versions of the WellboreIntervalSet",
                              "filename": "Get all versions of the WellboreIntervalSet.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/wellboreintervalsets/:wellboreintervalsetsid/versions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "wellboreintervalsetsid",
                                    "value": "ELqrqbafL:work-product-component--WellboreIntervalSet::i",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the given version of the WellboreIntervalSet using OSDU WellboreIntervalSetId schema",
                                  "filename": "Get the given version of the WellboreIntervalSet using OSDU WellboreIntervalSetId schema.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/wellboreintervalsets/:wellboreintervalsetsid/versions/:version",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "wellboreintervalsetsid",
                                        "value": "ELqrqbafL:work-product-component--WellboreIntervalSet::i",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "version",
                                        "value": "5721",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Get the WellboreIntervalSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "wells",
                  "filename": "wells",
                  "seq": 6,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "wells",
                      "seq": 6
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create or update the Wells using osdu schema",
                      "filename": "Create or update the Wells using osdu schema.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/ddms/v3/wells",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"data.default.owners@{{datapartitionid}}.{{domain}}\"\n      ],\n      \"viewers\": [\n        \"data.default.viewers@{{datapartitionid}}.{{domain}}\"\n      ]\n    },\n    \"data\": {\n      \"BusinessIntentionID\": \"{{datapartitionid}}:reference-data--WellBusinessIntention:Appraise:\",\n      \"ConditionID\": \"{{datapartitionid}}:reference-data--WellCondition:Active:\",\n      \"ExtensionProperties\": {},\n      \"FacilityDescription\": \"{{wellDesscription}}\",\n      \"FacilityName\": \"{{wellName}}\",\n      \"FacilityNameAliases\": [\n        {\n          \"AliasName\": \"20-000-00000-00\",\n          \"AliasNameTypeID\": \"{{datapartitionid}}:reference-data--AliasNameType:UniqueIdentifier:\"\n        }\n      ],\n      \"HistoricalInterests\": [\n        {\n          \"EffectiveDateTime\": \"2020-02-13\",\n          \"InterestTypeID\": \"{{datapartitionid}}:reference-data--WellInterestType:Yes:\",\n          \"TerminationDateTime\": \"2020-02-13\"\n        }\n      ],\n      \"OutcomeID\": \"{{datapartitionid}}:reference-data--WellBusinessIntentionOutcome:Achieved:\",\n      \"RoleID\": \"{{datapartitionid}}:reference-data--WellRole:Inject.MultipleProducts:\",\n      \"StatusSummaryID\": \"{{datapartitionid}}:reference-data--WellStatusSummary:Planning:\",\n      \"VerticalMeasurements\": [\n        {\n          \"EffectiveDateTime\": \"2020-02-13T09:13:15.55Z\",\n          \"RigID\": \"{{datapartitionid}}:master-data--Rig:SomeUniqueRigID:\",\n          \"TerminationDateTime\": \"2020-02-13T09:13:15.55Z\",\n          \"VerticalCRSID\": \"{{datapartitionid}}:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n          \"VerticalMeasurement\": 12345.6,\n          \"VerticalMeasurementDescription\": \"Example VerticalMeasurementDescription\",\n          \"VerticalMeasurementID\": \"Example VerticalMeasurementID\",\n          \"VerticalMeasurementPathID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementPath:MD:\",\n          \"VerticalMeasurementSourceID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementSource:DRL:\",\n          \"VerticalMeasurementTypeID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementType:PBD:\",\n          \"VerticalMeasurementUnitOfMeasureID\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:m:\",\n          \"VerticalReferenceEntityID\": \"{{datapartitionid}}:master-data--Rig:SomeUniqueRigID:\",\n          \"VerticalReferenceID\": \"Example VerticalReferenceID\",\n          \"WellboreTVDTrajectoryID\": \"{{datapartitionid}}:work-product-component--WellboreTrajectory:WellboreTrajectory-911bb71f-06ab-4deb-8e68-b8c9229dc76b:\"\n        }\n      ],\n      \"WasBusinessInterestFinancialNonOperated\": true,\n      \"WasBusinessInterestFinancialOperated\": true,\n      \"WasBusinessInterestObligatory\": true,\n      \"WasBusinessInterestTechnical\": true\n    },\n    \"id\": \"{{datapartitionid}}:master-data--Well:{{wellId}}\",\n    \"kind\": \"osdu:wks:master-data--Well:1.2.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"{{legaltags}}\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"FR\",\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    }\n  }\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{wellid}",
                      "filename": "{wellid}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellid}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete the well. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
                          "filename": "Delete the well. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wells/:wellid",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellid",
                                "value": "VwXk:master-data--Well:5m",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Get the Well using osdu schema",
                          "filename": "Get the Well using osdu schema.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wells/:wellid",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellid",
                                "value": "VwXk:master-data--Well:5m",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get the Well object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get all versions of the Well",
                              "filename": "Get all versions of the Well.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/wells/:wellid/versions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "wellid",
                                    "value": "VwXk:master-data--Well:5m",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the given version of the Well using OSDU well schema",
                                  "filename": "Get the given version of the Well using OSDU well schema.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/wells/:wellid/versions/:version",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "wellid",
                                        "value": "VwXk:master-data--Well:5m",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "version",
                                        "value": "5721",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "\"Get the Well object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "wellbores",
                  "filename": "wellbores",
                  "seq": 3,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "wellbores",
                      "seq": 3
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create or update the Wellbores using osdu schema",
                      "filename": "Create or update the Wellbores using osdu schema.bru",
                      "seq": 2,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/ddms/v3/wellbores",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"data.default.owners@{{datapartitionid}}.{{domain}}\"\n      ],\n      \"viewers\": [\n        \"data.default.viewers@{{datapartitionid}}.{{domain}}\"\n      ]\n    },\n    \"data\": {\n      \"ConditionID\": \"{{datapartitionid}}:reference-data--WellCondition:Active:\",\n      \"ExtensionProperties\": {},\n      \"FacilityDescription\": \"{{wellboreDescription}}\",\n      \"FacilityName\": \"{{wellboreName}}\",\n      \"FacilityNameAliases\": [\n        {\n          \"AliasName\": \"33-089-00300-00-01\",\n          \"AliasNameTypeID\": \"{{datapartitionid}}:reference-data--AliasNameType:UniqueIdentifier:\"\n        }\n      ],\n      \"FacilityOperators\": [\n        {\n          \"FacilityOperatorID\": \"OperatorID\",\n          \"Remark\": \"Remark on facility operator\"\n        }\n      ],\n      \"FluidDirectionID\": \"{{datapartitionid}}:reference-data--WellFluidDirection:DualFlow:\",\n      \"FormationNameAtTotalDepth\": \"Example FormationNameAtTotalDepth\",\n      \"GeoContexts\": [\n        {\n          \"GeoPoliticalEntityID\": \"{{datapartitionid}}:master-data--GeoPoliticalEntity:USA:\",\n          \"GeoTypeID\": \"datapartition:reference-data--GeoPoliticalEntityType:Country:\"\n        }\n      ],\n      \"HistoricalInterests\": [\n        {\n          \"EffectiveDateTime\": \"2020-02-13\",\n          \"InterestTypeID\": \"{{datapartitionid}}:reference-data--WellInterestType:Yes:\",\n          \"TerminationDateTime\": \"2020-02-13\"\n        }\n      ],\n      \"InterestTypeID\": \"{{datapartitionid}}:reference-data--WellInterestType:Yes:\",\n      \"OutcomeID\": \"{{datapartitionid}}:reference-data--WellBusinessIntentionOutcome:Achieved:\",\n      \"PrimaryProductTypeID\": \"{{datapartitionid}}:reference-data--WellProductType:Gas:\",\n      \"SecondaryProductTypeID\": \"{{datapartitionid}}:reference-data--WellProductType:Gas:\",\n      \"ShowProductTypeID\": \"{{datapartitionid}}:reference-data--WellProductType:Gas:\",\n      \"SpatialLocation\": {\n        \"Wgs84Coordinates\": {\n          \"features\": [\n            {\n              \"geometry\": {\n                \"coordinates\": [\n                  [\n                    -103.2380248,\n                    46.8925081,\n                    5301\n                  ],\n                  [\n                    -103.2380248,\n                    46.8925081,\n                    2801\n                  ],\n                  [\n                    -103.2378748,\n                    46.892608100000004,\n                    301\n                  ],\n                  [\n                    -103.23742477750001,\n                    46.89270811,\n                    -2199\n                  ],\n                  [\n                    -103.23667470999663,\n                    46.892808120001,\n                    -4699\n                  ],\n                  [\n                    -103.2356245974865,\n                    46.892908130002,\n                    -7199\n                  ]\n                ],\n                \"type\": \"LineString\"\n              },\n              \"properties\": {\n                \"name\": \"Newton 2-31-Lat-1\"\n              },\n              \"type\": \"Feature\"\n            }\n          ],\n          \"type\": \"FeatureCollection\"\n        }\n      },\n      \"StatusSummaryID\": \"{{datapartitionid}}:reference-data--WellStatusSummary:Planning:\",\n      \"TertiaryProductTypeID\": \"{{datapartitionid}}:reference-data--WellProductType:Gas:\",\n      \"TrajectoryTypeID\": \"{{datapartitionid}}:reference-data--WellboreTrajectoryType:Vertical:\",\n      \"VerticalMeasurements\": [\n        {\n          \"EffectiveDateTime\": \"2020-02-13T09:13:15.55Z\",\n          \"RigID\": \"{{datapartitionid}}:master-data--Rig:SomeUniqueRigID:\",\n          \"TerminationDateTime\": \"2020-02-13T09:13:15.55Z\",\n          \"VerticalCRSID\": \"{{datapartitionid}}:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n          \"VerticalMeasurement\": 12345.6,\n          \"VerticalMeasurementDescription\": \"Example VerticalMeasurementDescription\",\n          \"VerticalMeasurementID\": \"Example VerticalMeasurementID\",\n          \"VerticalMeasurementPathID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementPath:MD:\",\n          \"VerticalMeasurementSourceID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementSource:DRL:\",\n          \"VerticalMeasurementTypeID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementType:PBD:\",\n          \"VerticalMeasurementUnitOfMeasureID\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:m:\",\n          \"VerticalReferenceEntityID\": \"{{datapartitionid}}:master-data--Rig:SomeUniqueRigID:\",\n          \"VerticalReferenceID\": \"Example VerticalReferenceID\",\n          \"WellboreTVDTrajectoryID\": \"{{datapartitionid}}:work-product-component--WellboreTrajectory:WellboreTrajectory-911bb71f-06ab-4deb-8e68-b8c9229dc76b:\"\n        }\n      ],\n      \"WasBusinessInterestFinancialNonOperated\": true,\n      \"WasBusinessInterestFinancialOperated\": true,\n      \"WasBusinessInterestObligatory\": true,\n      \"WasBusinessInterestTechnical\": true,\n      \"WellID\": \"{{datapartitionid}}:master-data--Well:{{wellId}}:\",\n      \"WellboreCosts\": [\n        {\n          \"ActivityTypeID\": \"{{datapartitionid}}:reference-data--WellActivityPhaseType:RMOVE:\",\n          \"Cost\": 12345.6\n        }\n      ],\n      \"WellboreReasonID\": \"{{datapartitionid}}:reference-data--WellboreReason:AccidentalSidetrack:\"\n    },\n    \"id\": \"{{datapartitionid}}:master-data--Wellbore:{{wellboreId}}:\",\n    \"kind\": \"osdu:wks:master-data--Wellbore:1.3.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"{{legaltags}}\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"FR\",\n        \"US\"\n      ]\n    },\n    \"meta\": [\n      {\n        \"kind\": \"Unit\",\n        \"name\": \"Measure depth default unit\",\n        \"persistableReference\": \"persistableReference\",\n        \"propertyNames\": [\n          \"symbol\"\n        ]\n      }\n    ]\n  }\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{wellboreid}",
                      "filename": "{wellboreid}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellboreid}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete the wellbore. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
                          "filename": "Delete the wellbore. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wellbores/:wellboreid",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellboreid",
                                "value": "B2R4B5F:master-data--Wellbore:ves86kCZA",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Get the Wellbore using osdu schema",
                          "filename": "Get the Wellbore using osdu schema.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wellbores/:wellboreid",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellboreid",
                                "value": "B2R4B5F:master-data--Wellbore:ves86kCZA",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get the Wellbore object using its **id**.  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get all versions of the Wellbore",
                              "filename": "Get all versions of the Wellbore.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/wellbores/:wellboreid/versions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "wellboreid",
                                    "value": "B2R4B5F:master-data--Wellbore:ves86kCZA",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the given version of the Wellbore using OSDU wellbore schema",
                                  "filename": "Get the given version of the Wellbore using OSDU wellbore schema.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/wellbores/:wellboreid/versions/:version",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "wellboreid",
                                        "value": "B2R4B5F:master-data--Wellbore:ves86kCZA",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "version",
                                        "value": "5721",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "\"Get the Wellbore object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "wellboretrajectories",
                  "filename": "wellboretrajectories",
                  "seq": 4,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "wellboretrajectories",
                      "seq": 4
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create or update the WellboreTrajectories using osdu schema",
                      "filename": "Create or update the WellboreTrajectories using osdu schema.bru",
                      "seq": 3,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/ddms/v3/wellboretrajectories",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"data.default.owners@{{datapartitionid}}.{{domain}}\"\n      ],\n      \"viewers\": [\n        \"data.default.viewers@{{datapartitionid}}.{{domain}}\"\n      ]\n    },\n    \"ancestry\": {\n      \"parents\": []\n    },\n    \"createTime\": \"2020-12-16T11:46:20.163Z\",\n    \"createUser\": \"some-user@some-company-cloud.com\",\n    \"data\": {\n      \"AcquisitionDate\": \"2020-02-13T09:13:15.55Z\",\n      \"AcquisitionRemark\": \"Example Survey Remark\",\n      \"ActiveIndicator\": true,\n      \"AppliedOperations\": [\n        \"Example AppliedOperations\"\n      ],\n      \"Artefacts\": [\n        {\n          \"ResourceID\": \"namespace:dataset--AnyDataset:SomeUniqueAnyDatasetID:\",\n          \"ResourceKind\": \"namespace:source_name:group_type--IndividualType:0.0.0\",\n          \"RoleID\": \"namespace:reference-data--ArtefactRole:AdaptedContent:\"\n        }\n      ],\n      \"AuthorIDs\": [\n        \"Example AuthorIDs\"\n      ],\n      \"AvailableTrajectoryStationProperties\": [\n        {\n          \"Name\": \"AzimuthTN\",\n          \"StationPropertyUnitID\": \"partition-id:reference-data--UnitOfMeasure:dega:\",\n          \"TrajectoryStationPropertyTypeID\": \"partition-id:reference-data--TrajectoryStationPropertyType:AzimuthTN:\"\n        }\n      ],\n      \"AzimuthReferenceType\": \"namespace:reference-data--AzimuthReferenceType:TrueNorth:\",\n      \"BaseDepthMeasuredDepth\": 12345.6,\n      \"BusinessActivities\": [\n        \"Example BusinessActivities\"\n      ],\n      \"CalculationMethodType\": \"namespace:reference-data--CalculationMethodType:MinimumCurvature:\",\n      \"CompanyID\": \"namespace:master-data--Organisation:SomeUniqueOrganisationID:\",\n      \"CreationDateTime\": \"2020-02-13T09:13:15.55Z\",\n      \"Datasets\": [\n        \"namespace:dataset--AnyDataset:SomeUniqueAnyDatasetID:\"\n      ],\n      \"Description\": \"Example Description\",\n      \"ExistenceKind\": \"namespace:reference-data--ExistenceKind:Prototype:\",\n      \"ExtensionProperties\": {},\n      \"ExtrapolatedMeasuredDepth\": 12345.6,\n      \"GeoContexts\": [\n        {\n          \"BasinID\": \"namespace:master-data--Basin:SomeUniqueBasinID:\",\n          \"GeoTypeID\": \"namespace:reference-data--BasinType:ArcWrenchOceanContinent:\"\n        }\n      ],\n      \"GeographicCRSID\": \"namespace:reference-data--CoordinateReferenceSystem:Geographic2D:EPSG::4326:\",\n      \"IsDiscoverable\": true,\n      \"IsExtendedLoad\": true,\n      \"LineageAssertions\": [\n        {\n          \"ID\": \"namespace:any-group-type--AnyIndividualType:SomeUniqueAnyIndividualTypeID:\",\n          \"LineageRelationshipType\": \"namespace:reference-data--LineageRelationshipType:Direct:\"\n        }\n      ],\n      \"Name\": \"Example Name\",\n      \"ProjectedCRSID\": \"namespace:reference-data--CoordinateReferenceSystem:Projected:EPSG::32615:\",\n      \"ResourceCurationStatus\": \"namespace:reference-data--ResourceCurationStatus:CREATED:\",\n      \"ResourceHomeRegionID\": \"namespace:reference-data--OSDURegion:AWSEastUSA:\",\n      \"ResourceHostRegionIDs\": [\n        \"namespace:reference-data--OSDURegion:AWSEastUSA:\"\n      ],\n      \"ResourceLifecycleStatus\": \"namespace:reference-data--ResourceLifecycleStatus:LOADING:\",\n      \"ResourceSecurityClassification\": \"namespace:reference-data--ResourceSecurityClassification:RESTRICTED:\",\n      \"ServiceCompanyID\": \"namespace:master-data--Organisation:SomeUniqueOrganisationID:\",\n      \"Source\": \"Example Data Source\",\n      \"SpatialArea\": {\n        \"AppliedOperations\": [\n          \"conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted\",\n          \"transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed\"\n        ],\n        \"AsIngestedCoordinates\": {\n          \"CoordinateReferenceSystemID\": \"namespace:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n          \"VerticalCoordinateReferenceSystemID\": \"namespace:reference-data--CoordinateReferenceSystem:Vertical:EPSG::5714:\",\n          \"bbox\": [\n            12345.6,\n            12345.6,\n            12345.6,\n            12345.6\n          ],\n          \"features\": [\n            {\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ],\n              \"geometry\": {\n                \"bbox\": [\n                  12345.6,\n                  12345.6,\n                  12345.6,\n                  12345.6\n                ],\n                \"coordinates\": [\n                  12345.6,\n                  12345.6\n                ],\n                \"type\": \"AnyCrsPoint\"\n              },\n              \"properties\": {},\n              \"type\": \"AnyCrsFeature\"\n            }\n          ],\n          \"persistableReferenceCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"OSDU\\\",\\\"code\\\":\\\"32021079\\\"},\\\"lateBoundCRS\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"32021\\\"},\\\"name\\\":\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"PROJCS[\\\\\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Lambert_Conformal_Conic\\\\\\\"],PARAMETER[\\\\\\\"False_Easting\\\\\\\",2000000.0],PARAMETER[\\\\\\\"False_Northing\\\\\\\",0.0],PARAMETER[\\\\\\\"Central_Meridian\\\\\\\",-100.5],PARAMETER[\\\\\\\"Standard_Parallel_1\\\\\\\",46.18333333333333],PARAMETER[\\\\\\\"Standard_Parallel_2\\\\\\\",47.48333333333333],PARAMETER[\\\\\\\"Latitude_Of_Origin\\\\\\\",45.66666666666666],UNIT[\\\\\\\"Foot_US\\\\\\\",0.3048006096012192],AUTHORITY[\\\\\\\"EPSG\\\\\\\",32021]]\\\"},\\\"name\\\":\\\"NAD27 * OGP-Usa Conus / North Dakota CS27 South zone [32021,15851]\\\",\\\"singleCT\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"15851\\\"},\\\"name\\\":\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",\\\"type\\\":\\\"ST\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"GEOGTRAN[\\\\\\\"NAD_1927_To_WGS_1984_79_CONUS\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],GEOGCS[\\\\\\\"GCS_WGS_1984\\\\\\\",DATUM[\\\\\\\"D_WGS_1984\\\\\\\",SPHEROID[\\\\\\\"WGS_1984\\\\\\\",6378137.0,298.257223563]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],METHOD[\\\\\\\"NADCON\\\\\\\"],PARAMETER[\\\\\\\"Dataset_conus\\\\\\\",0.0],OPERATIONACCURACY[5.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",15851]]\\\"},\\\"type\\\":\\\"EBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\"}\",\n          \"persistableReferenceUnitZ\": \"{\\\"scaleOffset\\\":{\\\"scale\\\":1.0,\\\"offset\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"Length\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"USO\\\"}\",\n          \"persistableReferenceVerticalCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"5714\\\"},\\\"name\\\":\\\"MSL_Height\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"VERTCS[\\\\\\\"MSL_Height\\\\\\\",VDATUM[\\\\\\\"Mean_Sea_Level\\\\\\\"],PARAMETER[\\\\\\\"Vertical_Shift\\\\\\\",0.0],PARAMETER[\\\\\\\"Direction\\\\\\\",1.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",5714]]\\\"}\",\n          \"type\": \"AnyCrsFeatureCollection\"\n        },\n        \"CoordinateQualityCheckDateTime\": \"2020-02-13T09:13:15.55Z\",\n        \"CoordinateQualityCheckPerformedBy\": \"Example CoordinateQualityCheckPerformedBy\",\n        \"CoordinateQualityCheckRemarks\": [\n          \"Example CoordinateQualityCheckRemarks\"\n        ],\n        \"QualitativeSpatialAccuracyTypeID\": \"namespace:reference-data--QualitativeSpatialAccuracyType:Confirmed:\",\n        \"QuantitativeAccuracyBandID\": \"namespace:reference-data--QuantitativeAccuracyBand:Length.LessThan1m:\",\n        \"SpatialGeometryTypeID\": \"namespace:reference-data--SpatialGeometryType:Point:\",\n        \"SpatialLocationCoordinatesDate\": \"2020-02-13T09:13:15.55Z\",\n        \"SpatialParameterTypeID\": \"namespace:reference-data--SpatialParameterType:Outline:\",\n        \"Wgs84Coordinates\": {\n          \"bbox\": [\n            12345.6,\n            12345.6,\n            12345.6,\n            12345.6\n          ],\n          \"features\": [\n            {\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ],\n              \"geometry\": {\n                \"bbox\": [\n                  12345.6,\n                  12345.6,\n                  12345.6,\n                  12345.6\n                ],\n                \"coordinates\": [\n                  12345.6,\n                  12345.6\n                ],\n                \"type\": \"Point\"\n              },\n              \"properties\": {},\n              \"type\": \"Feature\"\n            }\n          ],\n          \"type\": \"FeatureCollection\"\n        }\n      },\n      \"SpatialPoint\": {\n        \"AppliedOperations\": [\n          \"conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted\",\n          \"transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed\"\n        ],\n        \"AsIngestedCoordinates\": {\n          \"CoordinateReferenceSystemID\": \"namespace:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n          \"VerticalCoordinateReferenceSystemID\": \"namespace:reference-data--CoordinateReferenceSystem:Vertical:EPSG::5714:\",\n          \"bbox\": [\n            12345.6,\n            12345.6,\n            12345.6,\n            12345.6\n          ],\n          \"features\": [\n            {\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ],\n              \"geometry\": {\n                \"bbox\": [\n                  12345.6,\n                  12345.6,\n                  12345.6,\n                  12345.6\n                ],\n                \"coordinates\": [\n                  12345.6,\n                  12345.6\n                ],\n                \"type\": \"AnyCrsPoint\"\n              },\n              \"properties\": {},\n              \"type\": \"AnyCrsFeature\"\n            }\n          ],\n          \"persistableReferenceCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"OSDU\\\",\\\"code\\\":\\\"32021079\\\"},\\\"lateBoundCRS\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"32021\\\"},\\\"name\\\":\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"PROJCS[\\\\\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Lambert_Conformal_Conic\\\\\\\"],PARAMETER[\\\\\\\"False_Easting\\\\\\\",2000000.0],PARAMETER[\\\\\\\"False_Northing\\\\\\\",0.0],PARAMETER[\\\\\\\"Central_Meridian\\\\\\\",-100.5],PARAMETER[\\\\\\\"Standard_Parallel_1\\\\\\\",46.18333333333333],PARAMETER[\\\\\\\"Standard_Parallel_2\\\\\\\",47.48333333333333],PARAMETER[\\\\\\\"Latitude_Of_Origin\\\\\\\",45.66666666666666],UNIT[\\\\\\\"Foot_US\\\\\\\",0.3048006096012192],AUTHORITY[\\\\\\\"EPSG\\\\\\\",32021]]\\\"},\\\"name\\\":\\\"NAD27 * OGP-Usa Conus / North Dakota CS27 South zone [32021,15851]\\\",\\\"singleCT\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"15851\\\"},\\\"name\\\":\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",\\\"type\\\":\\\"ST\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"GEOGTRAN[\\\\\\\"NAD_1927_To_WGS_1984_79_CONUS\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1927\\\\\\\",DATUM[\\\\\\\"D_North_American_1927\\\\\\\",SPHEROID[\\\\\\\"Clarke_1866\\\\\\\",6378206.4,294.9786982]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],GEOGCS[\\\\\\\"GCS_WGS_1984\\\\\\\",DATUM[\\\\\\\"D_WGS_1984\\\\\\\",SPHEROID[\\\\\\\"WGS_1984\\\\\\\",6378137.0,298.257223563]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],METHOD[\\\\\\\"NADCON\\\\\\\"],PARAMETER[\\\\\\\"Dataset_conus\\\\\\\",0.0],OPERATIONACCURACY[5.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",15851]]\\\"},\\\"type\\\":\\\"EBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\"}\",\n          \"persistableReferenceUnitZ\": \"{\\\"scaleOffset\\\":{\\\"scale\\\":1.0,\\\"offset\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"Length\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"USO\\\"}\",\n          \"persistableReferenceVerticalCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"5714\\\"},\\\"name\\\":\\\"MSL_Height\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_9_1\\\",\\\"wkt\\\":\\\"VERTCS[\\\\\\\"MSL_Height\\\\\\\",VDATUM[\\\\\\\"Mean_Sea_Level\\\\\\\"],PARAMETER[\\\\\\\"Vertical_Shift\\\\\\\",0.0],PARAMETER[\\\\\\\"Direction\\\\\\\",1.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",5714]]\\\"}\",\n          \"type\": \"AnyCrsFeatureCollection\"\n        },\n        \"CoordinateQualityCheckDateTime\": \"2020-02-13T09:13:15.55Z\",\n        \"CoordinateQualityCheckPerformedBy\": \"Example CoordinateQualityCheckPerformedBy\",\n        \"CoordinateQualityCheckRemarks\": [\n          \"Example CoordinateQualityCheckRemarks\"\n        ],\n        \"QualitativeSpatialAccuracyTypeID\": \"namespace:reference-data--QualitativeSpatialAccuracyType:Confirmed:\",\n        \"QuantitativeAccuracyBandID\": \"namespace:reference-data--QuantitativeAccuracyBand:Length.LessThan1m:\",\n        \"SpatialGeometryTypeID\": \"namespace:reference-data--SpatialGeometryType:Point:\",\n        \"SpatialLocationCoordinatesDate\": \"2020-02-13T09:13:15.55Z\",\n        \"SpatialParameterTypeID\": \"namespace:reference-data--SpatialParameterType:Outline:\",\n        \"Wgs84Coordinates\": {\n          \"bbox\": [\n            12345.6,\n            12345.6,\n            12345.6,\n            12345.6\n          ],\n          \"features\": [\n            {\n              \"bbox\": [\n                12345.6,\n                12345.6,\n                12345.6,\n                12345.6\n              ],\n              \"geometry\": {\n                \"bbox\": [\n                  12345.6,\n                  12345.6,\n                  12345.6,\n                  12345.6\n                ],\n                \"coordinates\": [\n                  12345.6,\n                  12345.6\n                ],\n                \"type\": \"Point\"\n              },\n              \"properties\": {},\n              \"type\": \"Feature\"\n            }\n          ],\n          \"type\": \"FeatureCollection\"\n        }\n      },\n      \"SubmitterName\": \"Example SubmitterName\",\n      \"SurveyReferenceIdentifier\": \"Example Survey Reference Identifier\",\n      \"SurveyToolTypeID\": \"namespace:reference-data--SurveyToolType:MWD%2BSRGM_A001Mc:\",\n      \"SurveyType\": \"Example Directional Survey Type\",\n      \"SurveyVersion\": \"Example Survey Version\",\n      \"Tags\": [\n        \"Example Tags\"\n      ],\n      \"TechnicalAssuranceID\": \"namespace:reference-data--TechnicalAssuranceType:Certified:\",\n      \"TieMeasuredDepth\": 12345.6,\n      \"TopDepthMeasuredDepth\": 12345.6,\n      \"VerticalMeasurement\": {\n        \"EffectiveDateTime\": \"2020-02-13T09:13:15.55Z\",\n        \"TerminationDateTime\": \"2020-02-13T09:13:15.55Z\",\n        \"VerticalCRSID\": \"namespace:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:\",\n        \"VerticalMeasurement\": 12345.6,\n        \"VerticalMeasurementDescription\": \"Example VerticalMeasurementDescription\",\n        \"VerticalMeasurementPathID\": \"namespace:reference-data--VerticalMeasurementPath:MD:\",\n        \"VerticalMeasurementSourceID\": \"namespace:reference-data--VerticalMeasurementSource:DRL:\",\n        \"VerticalMeasurementTypeID\": \"namespace:reference-data--VerticalMeasurementType:PBD:\",\n        \"VerticalMeasurementUnitOfMeasureID\": \"namespace:reference-data--UnitOfMeasure:m:\",\n        \"VerticalReferenceID\": \"Example VerticalReferenceID\",\n        \"WellboreTVDTrajectoryID\": \"namespace:work-product-component--WellboreTrajectory:WellboreTrajectory-911bb71f-06ab-4deb-8e68-b8c9229dc76b:\"\n      },\n      \"WellboreID\": \"namespace:master-data--Wellbore:SomeUniqueWellboreID:\"\n    },\n    \"id\": \"namespace:work-product-component--WellboreTrajectory:606f224a-ef1f-5690-9843-d26cd7e33e10\",\n    \"kind\": \"osdu:wks:work-product-component--WellboreTrajectory:1.1.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"{{legaltags}}\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"FR\",\n        \"US\"\n      ]\n    },\n    \"meta\": [\n      {\n        \"kind\": \"Unit\",\n        \"name\": \"m\",\n        \"persistableReference\": \"{\\\"abcd\\\":{\\\"a\\\":0.0,\\\"b\\\":1.0,\\\"c\\\":1.0,\\\"d\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"L\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"UAD\\\"}\",\n        \"propertyNames\": [\n          \"TopDepthMeasuredDepth\",\n          \"ExtrapolatedMeasuredDepth\",\n          \"BaseDepthMeasuredDepth\",\n          \"TieMeasuredDepth\",\n          \"VerticalMeasurement.VerticalMeasurement\"\n        ],\n        \"unitOfMeasureID\": \"namespace:reference-data--UnitOfMeasure:m:\"\n      }\n    ],\n    \"modifyTime\": \"2020-12-16T11:52:24.477Z\",\n    \"modifyUser\": \"some-user@some-company-cloud.com\",\n    \"tags\": {\n      \"NameOfKey\": \"String value\"\n    }\n  }\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{record_id}",
                      "filename": "{record_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{record_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "data",
                          "filename": "data",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "data",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Returns the data according to the specified query parameters.",
                              "filename": "Returns the data according to the specified query parameters.bru",
                              "seq": 1,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:record_id/data?offset=5&limit=100&summary=Select all curves&value=&describe=false&filter=MD:gt:1000&filter=MD:lt:42000&orient=split",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "offset",
                                    "value": "5",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "limit",
                                    "value": "100",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "summary",
                                    "value": "Select all curves",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "value",
                                    "value": "",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "describe",
                                    "value": "false",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "filter",
                                    "value": "MD:gt:1000",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "filter",
                                    "value": "MD:lt:42000",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "orient",
                                    "value": "split",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "record_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Returns the data according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using __describe__ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter __curves__ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "Writes data as a whole bulk, creates a new version.",
                              "filename": "Writes data as a whole bulk, creates a new version.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:record_id/data",
                                "method": "POST",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Content-Type",
                                    "value": "application/json",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "json",
                                  "json": "{\n  \"columns\":[\n    \"Ref\",\n    \"col_1\",\n    \"col_2\"\n  ],\n  \"index\":[\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  \"data\":[\n    [\n      0.0,\n      1111.1,\n      2222.1\n    ],\n    [\n      0.5,\n      1111.2,\n      2222.2\n    ],\n    [\n      1.0,\n      1111.3,\n      2222.3\n    ],\n    [\n      1.5,\n      1111.4,\n      2222.4\n    ],\n    [\n      2.0,\n      1111.5,\n      2222.5\n    ]\n  ]\n}",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Writes data to the associated record. It creates a new version.\nPayload is expected to contain the entire bulk which will replace as latest version\nany previous bulk. Previous bulk versions are accessible via the get bulk data version API.\nSupport JSON and Parquet format ('Content_Type' must be set accordingly).\nSupport http chunked encoding transfer.\n  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins\n  \n**Important**: In order to minimize writing time, it's necessary to:  \n- Double check whether bulk data is big enough to be sent with chunking APIs: meaning > 10 millions values or > 500 columns\n    - If no, use instead POST /ddms/v3/welllogs/MY_RECORD_ID/data API\n- Ensure all curve's values are in the same chunk to be sent\n- Each chunk should contain as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "sessions",
                          "filename": "sessions",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "sessions",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Create a new session on the given record for writing bulk data.",
                              "filename": "Create a new session on the given record for writing bulk data.bru",
                              "seq": 3,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:record_id/sessions",
                                "method": "POST",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Content-Type",
                                    "value": "application/json",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "json",
                                  "json": "{\n  \"fromVersion\": 123456789,\n  \"mode\": \"update\"\n}",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Initiate a session based on record version provided. The session is isolated from any other modifications. \nInside a session, individual chunk doesn't generate new individual record version.  \n \nA new single version is created only at session completion 'aggregating' all updates.\n A typical workflow is:\n 1. create a session\n 2. send X chunks (can be parallelized)\n 3. commit the session  \n   \nSession has an expiry time.\nIf the session is not completed before, it's automatically dropped. \nThe session duration is specified in the request but cannot exceeds 24 hours.\n\n**Note**: For `WellLog` and `WellboreTrajectory` kind, the attribute **extendedLoadCompleted** can be set into session.meta \nto set \"record.data.IsExtendedLoad\" to **False** after completing the session \n(with _PATCH /{record_id}/sessions/{session_id}_ API). See swagger examples for details.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "list session of the given record.",
                              "filename": "list session of the given record.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:record_id/sessions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{session_id}",
                              "filename": "{session_id}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{session_id}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "data",
                                  "filename": "data",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "data",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Send a data chunk. Session must be complete/commit once all chunks are sent.",
                                      "filename": "Send a data chunk. Session must be complete-commit once all chunks are sent.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:record_id/sessions/:session_id/data",
                                        "method": "POST",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "string",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Content-Type",
                                            "value": "application/json",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "record_id",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "session_id",
                                            "value": "84396aaa-1a7a-9d8b-08e5-a07719d55483",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "json",
                                          "json": "{\n  \"columns\":[\n    \"Ref\",\n    \"col_1\",\n    \"col_2\"\n  ],\n  \"index\":[\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  \"data\":[\n    [\n      0.0,\n      1111.1,\n      2222.1\n    ],\n    [\n      0.5,\n      1111.2,\n      2222.2\n    ],\n    [\n      1.0,\n      1111.3,\n      2222.3\n    ],\n    [\n      1.5,\n      1111.4,\n      2222.4\n    ],\n    [\n      2.0,\n      1111.5,\n      2222.5\n    ]\n  ]\n}",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Send a data chunk. Session must be complete/commit once all chunks are sent. This will create a new and single version aggregating all and previous bulk.Support JSON and Parquet format ('Content_Type' must be set accordingly). Support http chunked encoding.  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "type": "http",
                                  "name": "get session.",
                                  "filename": "get session.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:record_id/sessions/:session_id",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "session_id",
                                        "value": "84396aaa-1a7a-9d8b-08e5-a07719d55483",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "http",
                                  "name": "Update a session, either commit or abandon.",
                                  "filename": "Update a session, either commit or abandon.bru",
                                  "seq": 3,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:record_id/sessions/:session_id",
                                    "method": "PATCH",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Content-Type",
                                        "value": "application/json",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "session_id",
                                        "value": "84396aaa-1a7a-9d8b-08e5-a07719d55483",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "json",
                                      "json": "{\n  \"state\": \"abandon\"\n}",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Either validates the session' bulk data, a new version of record will be created with data sent \n                within the session. Either abandon the session, and let record unchanged.  \n                Note: bulk data consistency check will be run when committing bulk data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 3,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 3
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "data",
                                  "filename": "data",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "data",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Returns data of the specified version.",
                                      "filename": "Returns data of the specified version.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:record_id/versions/:version/data?offset=5&limit=100&summary=Select all curves&value=&describe=false&filter=MD:gt:1000&filter=MD:lt:42000&orient=split",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "string",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "offset",
                                            "value": "5",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "limit",
                                            "value": "100",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "summary",
                                            "value": "Select all curves",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "value",
                                            "value": "",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "describe",
                                            "value": "false",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "filter",
                                            "value": "MD:gt:1000",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "filter",
                                            "value": "MD:lt:42000",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "orient",
                                            "value": "split",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "record_id",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "version",
                                            "value": "5721",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Returns the data of a specific version according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using __describe__ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter __curves__ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "{wellboretrajectoryid}",
                      "filename": "{wellboretrajectoryid}",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{wellboretrajectoryid}",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete the wellboreTrajectory. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
                          "filename": "Delete the wellboreTrajectory. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:wellboretrajectoryid?purge=false",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "purge",
                                "value": "false",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "wellboretrajectoryid",
                                "value": "LO03NUZDVA:work-product-component--WellboreTrajectory:UFn",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Get the WellboreTrajectory using osdu schema",
                          "filename": "Get the WellboreTrajectory using osdu schema.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:wellboretrajectoryid",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "wellboretrajectoryid",
                                "value": "LO03NUZDVA:work-product-component--WellboreTrajectory:UFn",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get the WellboreTrajectory object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get all versions of the WellboreTrajectory",
                              "filename": "Get all versions of the WellboreTrajectory.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:wellboretrajectoryid/versions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "wellboretrajectoryid",
                                    "value": "LO03NUZDVA:work-product-component--WellboreTrajectory:UFn",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the given version of the WellboreTrajectory using OSDU wellboreTrajectory schema",
                                  "filename": "Get the given version of the WellboreTrajectory using OSDU wellboreTrajectory schema.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/wellboretrajectories/:wellboretrajectoryid/versions/:version",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "wellboretrajectoryid",
                                        "value": "LO03NUZDVA:work-product-component--WellboreTrajectory:UFn",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "version",
                                        "value": "5721",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "\"Get the WellboreTrajectory object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "folder",
                  "name": "welllogs",
                  "filename": "welllogs",
                  "seq": 5,
                  "root": {
                    "request": {
                      "auth": {
                        "mode": "inherit"
                      }
                    },
                    "meta": {
                      "name": "welllogs",
                      "seq": 5
                    }
                  },
                  "items": [
                    {
                      "type": "http",
                      "name": "Create or update the WellLogs using osdu schema",
                      "filename": "Create or update the WellLogs using osdu schema.bru",
                      "seq": 3,
                      "settings": {
                        "encodeUrl": true
                      },
                      "tags": [],
                      "request": {
                        "url": "{{baseUrl}}/ddms/v3/welllogs",
                        "method": "POST",
                        "headers": [
                          {
                            "name": "data-partition-id",
                            "value": "string",
                            "enabled": true
                          },
                          {
                            "name": "Content-Type",
                            "value": "application/json",
                            "enabled": true
                          },
                          {
                            "name": "Accept",
                            "value": "application/json",
                            "enabled": true
                          }
                        ],
                        "params": [],
                        "body": {
                          "mode": "json",
                          "json": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"data.default.owners@{{datapartitionid}}.{{domain}}\"\n      ],\n      \"viewers\": [\n        \"data.default.viewers@{{datapartitionid}}.{{domain}}\"\n      ]\n    },\n    \"data\": {\n      \"BottomMeasuredDepth\": 13856.2,\n      \"CreationDateTime\": \"2013-03-22T11:16:03Z\",\n      \"Curves\": [\n        {\n          \"CurveDescription\": \"Gamma Ray\",\n          \"CurveID\": \"GR_ID\",\n          \"CurveSampleTypeID\": \"{{datapartitionid}}:reference-data--CurveSampleType:float:\",\n          \"CurveUnit\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:m:\",\n          \"LogCurveFamilyID\": \"{{datapartitionid}}:reference-data--LogCurveFamily:GammaRay:\",\n          \"Mnemonic\": \"GR\",\n          \"NumberOfColumns\": 1\n        },\n        {\n          \"CurveDescription\": \"Neutron Porosity\",\n          \"CurveID\": \"POR_ID\",\n          \"CurveSampleTypeID\": \"{{datapartitionid}}:reference-data--CurveSampleType:float:\",\n          \"CurveUnit\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:m:\",\n          \"LogCurveFamilyID\": \"{{datapartitionid}}:reference-data--LogCurveFamily:NeutronPorosity:\",\n          \"Mnemonic\": \"NPOR\",\n          \"NumberOfColumns\": 1\n        },\n        {\n          \"CurveID\": \"Bulk Density\",\n          \"CurveSampleTypeID\": \"{{datapartitionid}}:reference-data--CurveSampleType:float:\",\n          \"CurveUnit\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:m:\",\n          \"LogCurveFamilyID\": \"{{datapartitionid}}:reference-data--LogCurveFamily:BulkDensity:\",\n          \"Mnemonic\": \"RHOB\"\n        }\n      ],\n      \"IsRegular\": true,\n      \"LogRemark\": \"example data for API documentation\",\n      \"Name\": \"{{welllogName}}\",\n      \"SamplingDomainTypeID\": \"{{datapartitionid}}:reference-data--WellLogSamplingDomainType:Depth:\",\n      \"SamplingInterval\": 0.1,\n      \"TopMeasuredDepth\": 12345.6,\n      \"VerticalMeasurement\": {\n        \"VerticalMeasurement\": 2680.5,\n        \"VerticalMeasurementPathID\": \"{{datapartitionid}}:reference-data--VerticalMeasurementPath:MD:\",\n        \"VerticalMeasurementUnitOfMeasureID\": \"{{datapartitionid}}:reference-data--UnitOfMeasure:ft:\"\n      },\n      \"WellboreID\": \"{{datapartitionid}}:master-data--Wellbore:{{wellboreId}}:\"\n    },\n    \"id\": \"{{datapartitionid}}:work-product-component--WellLog:{{welllogId}}\",\n    \"kind\": \"osdu:wks:work-product-component--WellLog:1.2.0\",\n    \"legal\": {\n      \"legaltags\": [\n        \"{{legaltags}}\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\",\n        \"FR\"\n      ]\n    },\n    \"meta\": [\n      {\n        \"kind\": \"Unit\",\n        \"name\": \"ft\",\n        \"persistableReference\": \"{\\\"scaleOffset\\\":{\\\"scale\\\":0.3048,\\\"offset\\\":0.0},\\\"symbol\\\":\\\"ft\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"Length\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"USO\\\"}\",\n        \"propertyNames\": [\n          \"TopMeasuredDepth\",\n          \"BottomMeasuredDepth\",\n          \"SamplingInterval\"\n        ]\n      },\n      {\n        \"kind\": \"DateTime\",\n        \"name\": \"datetime\",\n        \"persistableReference\": \"{\\\"format\\\":\\\"yyyy-MM-ddTHH:mm:ssZ\\\",\\\"timeZone\\\":\\\"UTC\\\",\\\"type\\\":\\\"DTM\\\"}\",\n        \"propertyNames\": [\n          \"dateModified\",\n          \"dateCreated\"\n        ]\n      }\n    ]\n  }\n]",
                          "formUrlEncoded": [],
                          "multipartForm": [],
                          "file": []
                        },
                        "script": {},
                        "vars": {},
                        "assertions": [],
                        "tests": "",
                        "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                        "auth": {
                          "mode": "inherit"
                        }
                      }
                    },
                    {
                      "type": "folder",
                      "name": "{record_id}",
                      "filename": "{record_id}",
                      "seq": 1,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{record_id}",
                          "seq": 1
                        }
                      },
                      "items": [
                        {
                          "type": "folder",
                          "name": "data",
                          "filename": "data",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "data",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Returns the data according to the specified query parameters.",
                              "filename": "Returns the data according to the specified query parameters.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/data?offset=5&limit=100&summary=Select all curves&value=&describe=false&filter=MD:gt:1000&filter=MD:lt:42000&orient=split",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "offset",
                                    "value": "5",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "limit",
                                    "value": "100",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "summary",
                                    "value": "Select all curves",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "value",
                                    "value": "",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "describe",
                                    "value": "false",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "filter",
                                    "value": "MD:gt:1000",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "filter",
                                    "value": "MD:lt:42000",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "orient",
                                    "value": "split",
                                    "type": "query",
                                    "enabled": true
                                  },
                                  {
                                    "name": "record_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Returns the data according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using __describe__ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter __curves__ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "statistics",
                              "filename": "statistics",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "statistics",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Returns statistics of record's data for selected curves",
                                  "filename": "Returns statistics of record's data for selected curves.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/data/statistics?summary=Select all curves&value=",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "summary",
                                        "value": "Select all curves",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "value",
                                        "value": "",
                                        "type": "query",
                                        "enabled": true
                                      },
                                      {
                                        "name": "record_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Returns the statistics on bulk data identified by the record in its last version. \n\n    \nIf wanted curves is an array:  \n    - requests \"ARRAY\" retrieves all dimensions of the array  \n    - requests \"ARRAY[M:N]\", retrieves all dimensions between M and N.\n  \n    \n    \nData types supported:  \n            - int  \n            - float  \n            - date  \n  \n      \n    No unit conversion is supported. Statistics will be returned using the same units as recorded in Curves[].CurveUnit",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "type": "http",
                              "name": "Writes data as a whole bulk, creates a new version.",
                              "filename": "Writes data as a whole bulk, creates a new version.bru",
                              "seq": 3,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/data",
                                "method": "POST",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Content-Type",
                                    "value": "application/json",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "json",
                                  "json": "{\n  \"columns\":[\n    \"Ref\",\n    \"col_1\",\n    \"col_2\"\n  ],\n  \"index\":[\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  \"data\":[\n    [\n      0.0,\n      1111.1,\n      2222.1\n    ],\n    [\n      0.5,\n      1111.2,\n      2222.2\n    ],\n    [\n      1.0,\n      1111.3,\n      2222.3\n    ],\n    [\n      1.5,\n      1111.4,\n      2222.4\n    ],\n    [\n      2.0,\n      1111.5,\n      2222.5\n    ]\n  ]\n}",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Writes data to the associated record. It creates a new version.\nPayload is expected to contain the entire bulk which will replace as latest version\nany previous bulk. Previous bulk versions are accessible via the get bulk data version API.\nSupport JSON and Parquet format ('Content_Type' must be set accordingly).\nSupport http chunked encoding transfer.\n  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins\n  \n**Important**: In order to minimize writing time, it's necessary to:  \n- Double check whether bulk data is big enough to be sent with chunking APIs: meaning > 10 millions values or > 500 columns\n    - If no, use instead POST /ddms/v3/welllogs/MY_RECORD_ID/data API\n- Ensure all curve's values are in the same chunk to be sent\n- Each chunk should contain as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "sessions",
                          "filename": "sessions",
                          "seq": 2,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "sessions",
                              "seq": 2
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Create a new session on the given record for writing bulk data.",
                              "filename": "Create a new session on the given record for writing bulk data.bru",
                              "seq": 3,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/sessions",
                                "method": "POST",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Content-Type",
                                    "value": "application/json",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "json",
                                  "json": "{\n  \"fromVersion\": 123456789,\n  \"mode\": \"update\"\n}",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Initiate a session based on record version provided. The session is isolated from any other modifications. \nInside a session, individual chunk doesn't generate new individual record version.  \n \nA new single version is created only at session completion 'aggregating' all updates.\n A typical workflow is:\n 1. create a session\n 2. send X chunks (can be parallelized)\n 3. commit the session  \n   \nSession has an expiry time.\nIf the session is not completed before, it's automatically dropped. \nThe session duration is specified in the request but cannot exceeds 24 hours.\n\n**Note**: For `WellLog` and `WellboreTrajectory` kind, the attribute **extendedLoadCompleted** can be set into session.meta \nto set \"record.data.IsExtendedLoad\" to **False** after completing the session \n(with _PATCH /{record_id}/sessions/{session_id}_ API). See swagger examples for details.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "http",
                              "name": "list session of the given record.",
                              "filename": "list session of the given record.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/sessions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "record_id",
                                    "value": "string",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{session_id}",
                              "filename": "{session_id}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{session_id}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "data",
                                  "filename": "data",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "data",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Send a data chunk. Session must be complete/commit once all chunks are sent.",
                                      "filename": "Send a data chunk. Session must be complete-commit once all chunks are sent.bru",
                                      "seq": 1,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/sessions/:session_id/data",
                                        "method": "POST",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "string",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Content-Type",
                                            "value": "application/json",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "record_id",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "session_id",
                                            "value": "84396aaa-1a7a-9d8b-08e5-a07719d55483",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "json",
                                          "json": "{\n  \"columns\":[\n    \"Ref\",\n    \"col_1\",\n    \"col_2\"\n  ],\n  \"index\":[\n    0,\n    1,\n    2,\n    3,\n    4\n  ],\n  \"data\":[\n    [\n      0.0,\n      1111.1,\n      2222.1\n    ],\n    [\n      0.5,\n      1111.2,\n      2222.2\n    ],\n    [\n      1.0,\n      1111.3,\n      2222.3\n    ],\n    [\n      1.5,\n      1111.4,\n      2222.4\n    ],\n    [\n      2.0,\n      1111.5,\n      2222.5\n    ]\n  ]\n}",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Send a data chunk. Session must be complete/commit once all chunks are sent. This will create a new and single version aggregating all and previous bulk.Support JSON and Parquet format ('Content_Type' must be set accordingly). Support http chunked encoding.  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "type": "http",
                                  "name": "get session.",
                                  "filename": "get session.bru",
                                  "seq": 2,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/sessions/:session_id",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "session_id",
                                        "value": "84396aaa-1a7a-9d8b-08e5-a07719d55483",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                },
                                {
                                  "type": "http",
                                  "name": "Update a session, either commit or abandon.",
                                  "filename": "Update a session, either commit or abandon.bru",
                                  "seq": 3,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/sessions/:session_id",
                                    "method": "PATCH",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Content-Type",
                                        "value": "application/json",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "record_id",
                                        "value": "string",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "session_id",
                                        "value": "84396aaa-1a7a-9d8b-08e5-a07719d55483",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "json",
                                      "json": "{\n  \"state\": \"abandon\"\n}",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "Either validates the session' bulk data, a new version of record will be created with data sent \n                within the session. Either abandon the session, and let record unchanged.  \n                Note: bulk data consistency check will be run when committing bulk data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 3,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 3
                            }
                          },
                          "items": [
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "folder",
                                  "name": "data",
                                  "filename": "data",
                                  "seq": 1,
                                  "root": {
                                    "request": {
                                      "auth": {
                                        "mode": "inherit"
                                      }
                                    },
                                    "meta": {
                                      "name": "data",
                                      "seq": 1
                                    }
                                  },
                                  "items": [
                                    {
                                      "type": "http",
                                      "name": "Returns data of the specified version.",
                                      "filename": "Returns data of the specified version.bru",
                                      "seq": 2,
                                      "settings": {
                                        "encodeUrl": true
                                      },
                                      "tags": [],
                                      "request": {
                                        "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/versions/:version/data?offset=5&limit=100&summary=Select all curves&value=&describe=false&filter=MD:gt:1000&filter=MD:lt:42000&orient=split",
                                        "method": "GET",
                                        "headers": [
                                          {
                                            "name": "data-partition-id",
                                            "value": "string",
                                            "enabled": true
                                          },
                                          {
                                            "name": "Accept",
                                            "value": "application/json",
                                            "enabled": true
                                          }
                                        ],
                                        "params": [
                                          {
                                            "name": "offset",
                                            "value": "5",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "limit",
                                            "value": "100",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "summary",
                                            "value": "Select all curves",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "value",
                                            "value": "",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "describe",
                                            "value": "false",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "filter",
                                            "value": "MD:gt:1000",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "filter",
                                            "value": "MD:lt:42000",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "orient",
                                            "value": "split",
                                            "type": "query",
                                            "enabled": true
                                          },
                                          {
                                            "name": "record_id",
                                            "value": "string",
                                            "type": "path",
                                            "enabled": true
                                          },
                                          {
                                            "name": "version",
                                            "value": "5721",
                                            "type": "path",
                                            "enabled": true
                                          }
                                        ],
                                        "body": {
                                          "mode": "none",
                                          "formUrlEncoded": [],
                                          "multipartForm": [],
                                          "file": []
                                        },
                                        "script": {},
                                        "vars": {},
                                        "assertions": [],
                                        "tests": "",
                                        "docs": "Returns the data of a specific version according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using __describe__ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter __curves__ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)",
                                        "auth": {
                                          "mode": "inherit"
                                        }
                                      }
                                    },
                                    {
                                      "type": "folder",
                                      "name": "statistics",
                                      "filename": "statistics",
                                      "seq": 1,
                                      "root": {
                                        "request": {
                                          "auth": {
                                            "mode": "inherit"
                                          }
                                        },
                                        "meta": {
                                          "name": "statistics",
                                          "seq": 1
                                        }
                                      },
                                      "items": [
                                        {
                                          "type": "http",
                                          "name": "Returns statistics of record's data for selected curves at requested version",
                                          "filename": "Returns statistics of record's data for selected curves at requested version.bru",
                                          "seq": 1,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/versions/:version/data/statistics?summary=Select all curves&value=",
                                            "method": "GET",
                                            "headers": [
                                              {
                                                "name": "data-partition-id",
                                                "value": "string",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "summary",
                                                "value": "Select all curves",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "value",
                                                "value": "",
                                                "type": "query",
                                                "enabled": true
                                              },
                                              {
                                                "name": "record_id",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "version",
                                                "value": "5721",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "Returns the statistics on bulk data identified by the record and given version.  \n    \nIf wanted curves is an array:  \n    - requests \"ARRAY\" retrieves all dimensions of the array  \n    - requests \"ARRAY[M:N]\", retrieves all dimensions between M and N.\n  \n      \n    \nData types supported:  \n            - int  \n            - float  \n            - date  \n  \n    \n    No unit conversion is supported. Statistics will be returned using the same units as recorded in Curves[].CurveUnit",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        },
                                        {
                                          "type": "http",
                                          "name": "Trigger computations of record's data statistics of record's data",
                                          "filename": "Trigger computations of record's data statistics of record's data.bru",
                                          "seq": 2,
                                          "settings": {
                                            "encodeUrl": true
                                          },
                                          "tags": [],
                                          "request": {
                                            "url": "{{baseUrl}}/ddms/v3/welllogs/:record_id/versions/:version/data/statistics",
                                            "method": "POST",
                                            "headers": [
                                              {
                                                "name": "data-partition-id",
                                                "value": "string",
                                                "enabled": true
                                              },
                                              {
                                                "name": "Accept",
                                                "value": "application/json",
                                                "enabled": true
                                              }
                                            ],
                                            "params": [
                                              {
                                                "name": "record_id",
                                                "value": "string",
                                                "type": "path",
                                                "enabled": true
                                              },
                                              {
                                                "name": "version",
                                                "value": "5721",
                                                "type": "path",
                                                "enabled": true
                                              }
                                            ],
                                            "body": {
                                              "mode": "none",
                                              "formUrlEncoded": [],
                                              "multipartForm": [],
                                              "file": []
                                            },
                                            "script": {},
                                            "vars": {},
                                            "assertions": [],
                                            "tests": "",
                                            "docs": "Trigger the computation of statistics on bulk data for \n    the record identified by the record_id at its last version   \n\n    No unit conversion is supported. Statistics will be returned using the same units as recorded in Curves[].CurveUnit",
                                            "auth": {
                                              "mode": "inherit"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "folder",
                      "name": "{welllogid}",
                      "filename": "{welllogid}",
                      "seq": 2,
                      "root": {
                        "request": {
                          "auth": {
                            "mode": "inherit"
                          }
                        },
                        "meta": {
                          "name": "{welllogid}",
                          "seq": 2
                        }
                      },
                      "items": [
                        {
                          "type": "http",
                          "name": "Delete the welllog. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
                          "filename": "Delete the welllog. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds.bru",
                          "seq": 2,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/welllogs/:welllogid?purge=false",
                            "method": "DELETE",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "purge",
                                "value": "false",
                                "type": "query",
                                "enabled": true
                              },
                              {
                                "name": "welllogid",
                                "value": "Xzn8vE:work-product-component--WellLog:4",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Required roles: 'users.datalake.editors' or 'users.datalake.admins",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "http",
                          "name": "Get the WellLog using osdu schema",
                          "filename": "Get the WellLog using osdu schema.bru",
                          "seq": 3,
                          "settings": {
                            "encodeUrl": true
                          },
                          "tags": [],
                          "request": {
                            "url": "{{baseUrl}}/ddms/v3/welllogs/:welllogid",
                            "method": "GET",
                            "headers": [
                              {
                                "name": "data-partition-id",
                                "value": "string",
                                "enabled": true
                              },
                              {
                                "name": "Accept",
                                "value": "application/json",
                                "enabled": true
                              }
                            ],
                            "params": [
                              {
                                "name": "welllogid",
                                "value": "Xzn8vE:work-product-component--WellLog:4",
                                "type": "path",
                                "enabled": true
                              }
                            ],
                            "body": {
                              "mode": "none",
                              "formUrlEncoded": [],
                              "multipartForm": [],
                              "file": []
                            },
                            "script": {},
                            "vars": {},
                            "assertions": [],
                            "tests": "",
                            "docs": "Get the WellLog object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                            "auth": {
                              "mode": "inherit"
                            }
                          }
                        },
                        {
                          "type": "folder",
                          "name": "versions",
                          "filename": "versions",
                          "seq": 1,
                          "root": {
                            "request": {
                              "auth": {
                                "mode": "inherit"
                              }
                            },
                            "meta": {
                              "name": "versions",
                              "seq": 1
                            }
                          },
                          "items": [
                            {
                              "type": "http",
                              "name": "Get all versions of the WellLog",
                              "filename": "Get all versions of the WellLog.bru",
                              "seq": 2,
                              "settings": {
                                "encodeUrl": true
                              },
                              "tags": [],
                              "request": {
                                "url": "{{baseUrl}}/ddms/v3/welllogs/:welllogid/versions",
                                "method": "GET",
                                "headers": [
                                  {
                                    "name": "data-partition-id",
                                    "value": "string",
                                    "enabled": true
                                  },
                                  {
                                    "name": "Accept",
                                    "value": "application/json",
                                    "enabled": true
                                  }
                                ],
                                "params": [
                                  {
                                    "name": "welllogid",
                                    "value": "Xzn8vE:work-product-component--WellLog:4",
                                    "type": "path",
                                    "enabled": true
                                  }
                                ],
                                "body": {
                                  "mode": "none",
                                  "formUrlEncoded": [],
                                  "multipartForm": [],
                                  "file": []
                                },
                                "script": {},
                                "vars": {},
                                "assertions": [],
                                "tests": "",
                                "docs": "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                "auth": {
                                  "mode": "inherit"
                                }
                              }
                            },
                            {
                              "type": "folder",
                              "name": "{version}",
                              "filename": "{version}",
                              "seq": 1,
                              "root": {
                                "request": {
                                  "auth": {
                                    "mode": "inherit"
                                  }
                                },
                                "meta": {
                                  "name": "{version}",
                                  "seq": 1
                                }
                              },
                              "items": [
                                {
                                  "type": "http",
                                  "name": "Get the given version of the WellLog using OSDU welllog schema",
                                  "filename": "Get the given version of the WellLog using OSDU welllog schema.bru",
                                  "seq": 1,
                                  "settings": {
                                    "encodeUrl": true
                                  },
                                  "tags": [],
                                  "request": {
                                    "url": "{{baseUrl}}/ddms/v3/welllogs/:welllogid/versions/:version",
                                    "method": "GET",
                                    "headers": [
                                      {
                                        "name": "data-partition-id",
                                        "value": "string",
                                        "enabled": true
                                      },
                                      {
                                        "name": "Accept",
                                        "value": "application/json",
                                        "enabled": true
                                      }
                                    ],
                                    "params": [
                                      {
                                        "name": "welllogid",
                                        "value": "Xzn8vE:work-product-component--WellLog:4",
                                        "type": "path",
                                        "enabled": true
                                      },
                                      {
                                        "name": "version",
                                        "value": "5721",
                                        "type": "path",
                                        "enabled": true
                                      }
                                    ],
                                    "body": {
                                      "mode": "none",
                                      "formUrlEncoded": [],
                                      "multipartForm": [],
                                      "file": []
                                    },
                                    "script": {},
                                    "vars": {},
                                    "assertions": [],
                                    "tests": "",
                                    "docs": "\"Get the WellLog object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.",
                                    "auth": {
                                      "mode": "inherit"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "about",
          "filename": "about",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "about",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Get About",
              "filename": "Get About.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/about",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "metrics",
          "filename": "metrics",
          "seq": 5,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "metrics",
              "seq": 5
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Metrics",
              "filename": "Metrics.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/metrics",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "Endpoint that serves Prometheus metrics.",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "log-recognition",
          "filename": "log-recognition",
          "seq": 4,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "log-recognition",
              "seq": 4
            }
          },
          "items": [
            {
              "type": "folder",
              "name": "family",
              "filename": "family",
              "seq": 1,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "family",
                  "seq": 1
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Recognize family and unit",
                  "filename": "Recognize family and unit.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/log-recognition/family",
                    "method": "POST",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"description\": \"LDTD Gamma Ray\",\n  \"label\": \"GRD\",\n  \"log_unit\": \"GAPI\"\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Find the most probable family and unit using family assignment rule based catalogs. User defined catalog will have the priority.",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            },
            {
              "type": "folder",
              "name": "upload-catalog",
              "filename": "upload-catalog",
              "seq": 2,
              "root": {
                "request": {
                  "auth": {
                    "mode": "inherit"
                  }
                },
                "meta": {
                  "name": "upload-catalog",
                  "seq": 2
                }
              },
              "items": [
                {
                  "type": "http",
                  "name": "Upload user-defined catalog with family assignment rules",
                  "filename": "Upload user-defined catalog with family assignment rules.bru",
                  "seq": 1,
                  "settings": {
                    "encodeUrl": true
                  },
                  "tags": [],
                  "request": {
                    "url": "{{baseUrl}}/log-recognition/upload-catalog",
                    "method": "PUT",
                    "headers": [
                      {
                        "name": "data-partition-id",
                        "value": "string",
                        "enabled": true
                      },
                      {
                        "name": "Content-Type",
                        "value": "application/json",
                        "enabled": true
                      },
                      {
                        "name": "Accept",
                        "value": "application/json",
                        "enabled": true
                      }
                    ],
                    "params": [],
                    "body": {
                      "mode": "json",
                      "json": "{\n  \"acl\": {\n    \"owners\": [\n      \"abc@domain.com, cde@domain.com\"\n    ],\n    \"viewers\": [\n      \"abc@domain.com, cde@domain.com\"\n    ]\n  },\n  \"data\": {\n    \"family_catalog\": [\n      {\n        \"family\": \"Medium Resistivity\",\n        \"rule\": \"MEDR\",\n        \"unit\": \"ohm.m\"\n      }\n    ],\n    \"main_family_catalog\": [\n      {\n        \"Family\": \"Medium Resistivity\",\n        \"MainFamily\": \"Resistivity\",\n        \"Unit\": \"OHMM\"\n      }\n    ]\n  },\n  \"legal\": {\n    \"legaltags\": [\n      \"opendes-public-usa-dataset-1\"\n    ],\n    \"otherRelevantDataCountries\": [\n      \"US\"\n    ]\n  }\n}",
                      "formUrlEncoded": [],
                      "multipartForm": [],
                      "file": []
                    },
                    "script": {},
                    "vars": {},
                    "assertions": [],
                    "tests": "",
                    "docs": "Upload user-defined catalog with family assignment rules for specific partition ID. \n            If there is an existing catalog, it will be replaced. It takes maximum of 5 mins to replace the existing catalog. \n            Hence, any call to retrieve the family should be made after 5 mins of uploading the catalog.   \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins",
                    "auth": {
                      "mode": "inherit"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "folder",
          "name": "version",
          "filename": "version",
          "seq": 6,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "version",
              "seq": 6
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Get Version",
              "filename": "Get Version.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{baseUrl}}/version",
                "method": "GET",
                "headers": [
                  {
                    "name": "Accept",
                    "value": "application/json",
                    "enabled": true
                  }
                ],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "inherit"
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "environments": [],
  "root": {
    "request": {
      "auth": {
        "mode": "oauth2",
        "oauth2": {
          "grantType": "authorization_code",
          "callbackUrl": "",
          "authorizationUrl": "{{authorizationEndpoint}}",
          "accessTokenUrl": "{{tokenEndpoint}}",
          "refreshTokenUrl": "",
          "clientId": "{{clientId}}",
          "clientSecret": "{{clientSecret}}",
          "scope": "{{scope}}",
          "state": "",
          "pkce": true,
          "credentialsPlacement": "basic_auth_header",
          "credentialsId": "credentials",
          "tokenPlacement": "header",
          "tokenHeaderPrefix": "",
          "tokenQueryKey": "access_token",
          "autoFetchToken": true,
          "autoRefreshToken": false
        }
      },
      "script": {
        "req": "// Auto-refresh token if needed\n// This will be handled by Postman's OAuth2 implementation"
      }
    },
    "docs": "Unified collection for ADME M25 API specifications",
    "meta": {
      "name": "ADME (M25)"
    }
  },
  "brunoConfig": {
    "version": "1",
    "name": "ADME (M25)",
    "type": "collection",
    "ignore": [
      "node_modules",
      ".git"
    ]
  }
}