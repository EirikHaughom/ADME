openapi: 3.0.3
info:
  title: Azure Data Manager for Energy - Legal Service
  version: 1.0.0
  description: Legal Service provides APIs to help with legal data governance in the Data Lake. See [Legal Service Documentation](https://osdu.pages.opengroup.org/platform/security-and-compliance/legal).
  contact:
    name: Microsoft Support
    email: support@microsoft.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: /api/legal/v1
tags:
  - name: health
    description: Health related endpoints
  - name: legaltag
    description: LegalTags related endpoints
  - name: legaltag-status-job
    description: LegalTags status Job related endpoints
  - name: info
    description: Version info endpoint
security:
  - Authorization: []
paths:
  /_ah/liveness_check:
    get:
      tags:
        - health
      summary: Liveness Check endpoint
      description: For deployment available public `/liveness_check` endpoint, which provides `Legal service is alive` message.
      operationId: GetLivenessCheck
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: Legal service is alive
          content:
            text/plain:
              schema:
                type: string
                example: Legal service is alive
      security: [] # Explicitly public
  /_ah/readiness_check:
    get:
      tags:
        - health
      summary: Readiness Check endpoint
      description: For deployment available public `/readiness_check` endpoint, which provides `Legal service is ready` message.
      operationId: GetReadinessCheck
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: Legal service is ready
          content:
            text/plain:
              schema:
                type: string
                example: Legal service is ready
      security: [] # Explicitly public
  /info:
    get:
      tags:
        - info
      summary: Version info
      description: For deployment available public `/info` endpoint, which provides build and git related information.
      operationId: GetInfo
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: Version info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
      security: [] # Explicitly public
  /jobs/updateLegalTagStatus:
    get:
      tags:
        - legaltag-status-job
      summary: Check LegalTag Compliance Job Status
      description: To check LegalTag Compliance Job Status.
      operationId: GetUpdateLegalTagStatusJob
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: OK. The body contains the current status of the LegalTag Compliance Job.
          content:
            application/json:
              schema:
                type: string
                description: Current status of the LegalTag Compliance Job.
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 EARLY_HINTS
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /legaltags:
    get:
      tags:
        - legaltag
      summary: Gets all LegalTags.
      description: This allows for the retrieval of all LegalTags.
      operationId: ListLegalTags
      parameters:
        - name: valid
          in: query
          description: If true returns only valid LegalTags, if false returns only invalid LegalTags. Default value is true.
          required: false
          schema:
            type: boolean
            default: true
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: Retrieved LegalTags successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalTagDtos'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Requested LegalTag to update was not found. # Specific 404 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - legaltag
      summary: Creates the LegalTag for the given `name`.
      description: This allows for the creation of your LegalTag. There can only be 1 LegalTag per `name`. A LegalTag must be created before you can start ingesting data for that name.
      operationId: CreateLegalTag
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: LegalTag to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalTagDto'
      responses:
        '201':
          description: Created LegalTag successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalTagDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      tags:
        - legaltag
      summary: Updates the LegalTag for the given `name`.
      description: This allows to update certain properties of your LegalTag using the `name` associated with it.
      operationId: UpdateLegalTag
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: LegalTag properties to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLegalTag'
      responses:
        '200':
          description: Updated LegalTag successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalTagDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Requested LegalTag to update was not found. # Specific 404 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '409':
          $ref: '#/components/responses/Conflict' # Assuming 409 can occur here too
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /legaltags/{name}:
    get:
      tags:
        - legaltag
      summary: Gets a LegalTag for the given `name`.
      description: This allows for the retrieval of your LegalTag using the `name` associated with it.
      operationId: GetLegalTagByName
      parameters:
      - name: name
        in: path
        description: Name of the LegalTag
        required: true
        schema:
          type: string
        example: OSDU-Private-USA-EHC
      - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: Retrieved LegalTag successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalTagDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Requested LegalTag was not found. # Specific 404 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - legaltag
      summary: Deletes a LegalTag for the given `name`.
      description: This allows for the deletion of your LegalTag with the given `name`. This makes the given legaltags data invalid.
      operationId: DeleteLegalTagByName
      parameters:
      - name: name
        in: path
        description: Name of the LegalTag
        required: true
        schema:
          type: string
        example: OSDU-Private-USA-EHC
      - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '204':
          description: LegalTag deleted successfully. # No content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Requested LegalTag to delete was not found. # Specific 404 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /legaltags:batchRetrieve:
    post:
      tags:
        - legaltag
      summary: Retrieves the LegalTags for the given `names`.
      description: This allows for the retrieval of your LegalTags using the `name` associated with it. A maximum of 25 can be retrieved at once.
      operationId: BatchRetrieveLegalTags
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: List of LegalTag names to retrieve.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestLegalTags'
      responses:
        '200':
          description: Retrieved LegalTags successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalTagDtos'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: One or more requested LegalTags were not found. # Specific 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /legaltags:properties:
    get:
      tags:
        - legaltag
      summary: Gets LegalTag property values.
      description: This allows for the retrieval of allowed values for LegalTag properties.
      operationId: GetLegalTagProperties
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: Retrieved LegalTag properties successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadablePropertyValues'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /legaltags:query:
    post:
      tags:
        - legaltag
      summary: Retrieves the legaltags which matches query criteria or none if there is no match.
      description: This allows query for specific attributes of legaltags including the attributes of extensionproperties. See [https://osdu.pages.opengroup.org/platform/security-and-compliance/legal/api/#legal-query](https://osdu.pages.opengroup.org/platform/security-and-compliance/legal/api/#legal-query) for more details.
      operationId: QueryLegalTags
      parameters:
        - name: valid
          in: query
          description: If true returns only valid LegalTags, if false returns only invalid LegalTags. Default value is true.
          required: false
          schema:
            type: boolean
            default: true
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: Query criteria for LegalTags.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryLegalTag'
      responses:
        '200':
          description: Retrieved LegalTags successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalTagDtos'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Requested LegalTag to update was not found. # Specific 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '405': # Method Not Allowed
          description: Method not allowed. Legal Query API is disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /legaltags:validate:
    post:
      tags:
        - legaltag
      summary: Retrieves the invalid LegalTag names with reasons for the given `names`.
      description: This allows for the retrieval of the reason why your LegalTag is not valid. A maximum of 25 can be retrieved at once.
      operationId: ValidateLegalTags
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: List of LegalTag names to validate.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestLegalTags'
      responses:
        '200':
          description: Retrieved LegalTag names with reason successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagsWithReason'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: LegalTag names were not found. # Specific 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
components:
  schemas:
    AppError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Invalid input provided."
        reason:
          type: string
          example: "Validation failed for field 'name'."
    ConnectedOuterService:
      type: object
      properties:
        name:
          type: string
          example: "Compliance Service"
        version:
          type: string
          example: "1.2.0"
    InvalidTagWithReason:
      type: object
      description: Represents a single invalid LegalTag.
      properties:
        name:
          type: string
          description: The name of the LegalTag.
          example: "OSDU-Expired-ContractData"
        reason:
          type: string
          description: The reason the LegalTag is currently invalid.
          example: "Expiration date has passed."
    InvalidTagsWithReason:
      type: object
      description: Represents a collection of invalid LegalTags.
      properties:
        invalidLegalTags:
          type: array
          description: A collection of invalid LegalTags
          items:
            $ref: '#/components/schemas/InvalidTagWithReason'
    LegalTagDto:
      type: object
      description: Represents a single LegalTag
      properties:
        name:
          type: string
          description: The name of the LegalTag
          example: OSDU-Private-EHCData
        description:
          type: string
          description: The description of the LegalTag
          example: "Private data related to EHC project."
        properties:
          $ref: '#/components/schemas/Properties'
    LegalTagDtos:
      type: object
      description: Represents a collection of LegalTags.
      properties:
        legalTags:
          type: array
          description: A collection of complete LegalTags
          items:
            $ref: '#/components/schemas/LegalTagDto'
    Properties:
      type: object
      description: LegalTag properties
      properties:
        contractId:
          type: string
          example: "CTR-2023-001"
        countryOfOrigin:
          type: array
          items:
            type: string
          example: ["US", "CA"]
        dataType:
          type: string
          example: "Well Log"
        expirationDate:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"
          nullable: true
        exportClassification:
          type: string
          example: "EAR99"
          nullable: true
        originator:
          type: string
          example: "Partner A"
        personalData:
          type: string
          example: "No Personal Data"
        securityClassification:
          type: string
          example: "Confidential"
        extensionProperties:
          type: object
          description: The optional object field to attach any company specific attributes.
          additionalProperties:
            type: object # Can be any valid JSON object
          example: {"customField1": "customValue1", "customObject": {"key": "value"}}
          nullable: true
    QueryLegalTag:
      type: object
      description: Represents the Search Query objects for Legaltags.
      required:
        - queryList
      properties:
        queryList:
          type: array
          description: Filter condition query
          items:
            type: string
            description: Filter condition query
            example: "properties.countryOfOrigin = 'US'"
        operatorList:
          type: array
          description: If there are multiple conditions need to be joined in by logical operators
          items:
            type: string
            description: If there are multiple conditions need to be joined in by logical operators
            example: "AND"
          nullable: true
        sortBy:
          type: string
          example: "name"
          nullable: true
        sortOrder:
          type: string
          example: "ASC"
          nullable: true
        limit:
          type: integer
          format: int32
          example: 100
          nullable: true
    ReadablePropertyValues:
      type: object
      description: Shows the allowed values of the fields of a LegalTag.
      properties:
        countriesOfOrigin:
          type: object
          description: The values of all the allowed Countries of Origin with the ISO Alpha 2 code and country name.
          additionalProperties:
            type: string
            description: The values of all the allowed Countries of Origin with the ISO Alpha 2 code and country name.
            example: "United States"
          example: {"US": "United States", "CA": "Canada"}
        dataTypes:
          type: array
          uniqueItems: true
          description: The name of all the allowed Data Type values.
          items:
            type: string
            description: The name of all the allowed Data Type values.
            example: "Seismic"
        exportClassificationControlNumbers:
          type: array
          uniqueItems: true
          description: The name of all the allowed Export Classifications.
          items:
            type: string
            description: The name of all the allowed Export Classifications.
            example: "EAR99"
        otherRelevantDataCountries:
          type: object
          description: The values of all the allowed Other Relevant Data Countries with the ISO Alpha 2 code and country name.
          additionalProperties:
            type: string
            description: The values of all the allowed Other Relevant Data Countries with the ISO Alpha 2 code and country name.
            example: "Norway"
          example: {"NO": "Norway"}
        personalDataTypes:
          type: array
          uniqueItems: true
          description: The name of all the allowed Personal Data Type values.
          items:
            type: string
            description: The name of all the allowed Personal Data Type values.
            example: "No Personal Data"
        securityClassifications:
          type: array
          uniqueItems: true
          description: The values of all the allowed Security Classifications.
          items:
            type: string
            description: The values of all the allowed Security Classifications.
            example: "Restricted"
    RequestLegalTags:
      type: object
      description: The model to retrieve multiple LegalTags in batch.
      required:
        - names
      properties:
        names:
          type: array
          description: The name of all the LegalTags to retrieve.
          items:
            type: string
            description: The name of all the LegalTags to retrieve.
            example: "OSDU-Public-GenericData"
          minItems: 1
          maxItems: 25
    UpdateLegalTag:
      type: object
      description: The model to update an existing LegalTag
      properties:
        name:
          type: string
          description: The name of the LegalTag
          example: OSDU-Private-EHCData
        description:
          type: string
          description: The optional description if the LegalTag to allow for easier discoverability of Legaltags overtime.
          example: "Updated description for EHC data."
          nullable: true
        contractId:
          type: string
          description: The Id of the physical contract associated with the data being ingested.
          example: No Contract Related
          nullable: true
        expirationDate:
          type: string
          format: date-time
          description: The optional expiration date of the contract in the format YYYY-MM-DD
          example: "2026-01-01T00:00:00Z"
          nullable: true
        extensionProperties:
          type: object
          description: The optional object field to attach any company specific attributes.
          additionalProperties:
            type: object
            description: The optional object field to attach any company specific attributes.
          example: {"department": "Exploration"}
          nullable: true
    VersionInfo:
      type: object
      properties:
        groupId:
          type: string
          example: "org.osdu"
        artifactId:
          type: string
          example: "legal-service"
        version:
          type: string
          example: "1.0.0"
        buildTime:
          type: string
          example: "2023-10-26T10:30:00Z"
        branch:
          type: string
          example: "main"
        commitId:
          type: string
          example: "a1b2c3d4e5f6"
        commitMessage:
          type: string
          example: "feat: Initial release of Legal Service v1"
        connectedOuterServices:
          type: array
          items:
            $ref: '#/components/schemas/ConnectedOuterService'
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT # Or "Authorization" as in original, though JWT is common for bearer
      description: Bearer token for authorization.
  parameters:
    DataPartitionIdHeader:
      name: data-partition-id
      in: header
      description: Tenant Id (Data Partition ID)
      required: true
      schema:
        type: string
        example: "osdu"
  responses:
    BadRequest:
      description: Bad Request. The request was invalid or cannot be otherwise served.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    Unauthorized:
      description: Unauthorized. Authentication is required and has failed or has not yet been provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    Forbidden:
      description: Forbidden. The server understood the request but refuses to authorize it.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    NotFound:
      description: Not Found. The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    Conflict:
      description: Conflict. The request could not be completed due to a conflict with the current state of the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    InternalServerError:
      description: Internal Server Error. An unexpected condition was encountered on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    BadGateway:
      description: Bad Gateway. The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    ServiceUnavailable:
      description: Service Unavailable. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'