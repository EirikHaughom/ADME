openapi: 3.0.3
info:
  title: Azure Data Manager for Energy - Unit Service API
  version: v3.0.0 # From original info and server path convention
  description: >-
    Unit Service API for Azure Data Manager for Energy. It provides
    functionalities for managing and converting units of measure, measurements,
    and unit systems, adhering to Energistics standards.
  contact:
    name: Microsoft Support
    email: support@microsoft.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://contoso.energy.azure.com/api/unit # Base URL
    description: Azure Data Manager for Energy - Contoso Environment
tags:
  - name: UnitManagement
    description: Operations related to units of measure.
  - name: MeasurementManagement
    description: Operations related to measurements (quantities).
  - name: UnitSystemManagement
    description: Operations related to unit systems.
  - name: Conversion
    description: Operations for converting values between units.
  - name: CatalogManagement
    description: Operations for managing the entire unit and measurement catalog.
  - name: ServiceInformation
    description: Endpoints for service health and version information.

components:
  schemas:
    AppError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: HTTP error status code.
          example: 400
        message:
          type: string
          description: A human-readable error message.
          example: "Invalid unit symbol provided."
        reason:
          type: string
          description: A more specific reason for the error, if available.
          example: "Unit symbol 'XYZ' not found in the catalog."

    ABCD:
      type: object
      description: Coefficients for the Energistics standard parameterization y = (A+Bx)/(C+Dx).
      properties:
        a:
          type: number
          format: double
          description: Coefficient A.
        b:
          type: number
          format: double
          description: Coefficient B.
        c:
          type: number
          format: double
          description: Coefficient C.
        d:
          type: number
          format: double
          description: Coefficient D.
      example:
        a: 0.0
        b: 1.0
        c: 1.0
        d: 0.0

    ScaleOffset:
      type: object
      description: Parameters for the scale-offset parameterization y = scale * (x - offset).
      properties:
        scale:
          type: number
          format: double
          description: The scale factor.
        offset:
          type: number
          format: double
          description: The offset value.
      example:
        scale: 1000.0
        offset: 0.0

    MeasurementEssence:
      type: object
      description: The core identifying information for a measurement.
      properties:
        ancestry:
          type: string
          description: The measurement ancestry (e.g., "Length.Drilling").
          example: "Length.MeasuredDepth"
        type:
          type: string
          description: The type string for this measurement.
          example: "UM" # Unit of Measurement
      required:
        - ancestry
        - type

    UnitEssence:
      type: object
      description: The core identifying information and parameterization for a unit.
      properties:
        symbol:
          type: string
          description: The symbol for the unit (e.g., "m", "ft", "psi").
          example: "m"
        type:
          type: string
          enum: [USO, UAD] # UnitScaleOffset, UnitAbcdEnergistics
          description: "The type string for this unit essence: 'USO' for ScaleOffset or 'UAD' for ABCD."
          example: "USO"
        baseMeasurementEssence:
          $ref: '#/components/schemas/MeasurementEssence'
          description: The base measurement to which this unit applies.
        scaleOffset:
          $ref: '#/components/schemas/ScaleOffset'
          nullable: true
        abcd:
          $ref: '#/components/schemas/ABCD'
          nullable: true
      required:
        - symbol
        - type
        - baseMeasurementEssence

    UnitDeprecationInfo:
      type: object
      description: Information about the deprecation status of a unit.
      properties:
        state:
          type: string
          enum: [ACTIVE, DEPRECATED, OBSOLETE] # Example states
          description: The deprecation state of the unit.
          example: "DEPRECATED"
        remarks:
          type: string
          description: Remarks regarding the deprecation.
          example: "Superseded by a more precise definition."
          nullable: true
        supersededByUnit: # This would ideally be a $ref to another Unit or its essence/ID
          type: string # Persistable reference or symbol of the superseding unit
          description: The unit that supersedes this deprecated unit.
          example: "m_ আন্তর্জাতিক" # Example of a symbol
          nullable: true

    Unit:
      type: object
      description: Represents a unit of measure.
      properties:
        name:
          type: string
          description: The full name of the unit.
          example: "meter"
        namespace: # Added for clarity as it's often part of identification
          type: string
          description: The namespace to which this unit belongs (e.g., "energistics", "posc").
          example: "energistics"
        displaySymbol:
          type: string
          description: The common display symbol for the unit.
          example: "m"
        description:
          type: string
          description: A textual description of the unit.
          example: "SI base unit of length."
          nullable: true
        source:
          type: string
          description: The source or authority defining this unit.
          example: "Energistics Unit of Measure Standard V1.0"
          nullable: true
        essenceJson:
          type: string # JSON string representation of UnitEssence
          description: The JSON serialized 'essence' of the unit, defining its parameterization.
          example: '{"symbol":"m","type":"USO","baseMeasurementEssence":{"ancestry":"Length","type":"UM"},"scaleOffset":{"scale":1.0,"offset":0.0}}'
          readOnly: true
        essence: # The actual object form
          $ref: '#/components/schemas/UnitEssence'
          readOnly: true
        deprecationInfo:
          $ref: '#/components/schemas/UnitDeprecationInfo'
          nullable: true
        lastModified:
          type: string
          format: date-time
          description: Timestamp of the last modification.
          example: "2023-01-15T10:00:00Z"
          readOnly: true
      required:
        - name
        - namespace
        - displaySymbol
        - essenceJson # Or essence, depending on how it's stored/retrieved
        - lastModified

    MeasurementDeprecationInfo:
      type: object
      description: Information about the deprecation status of a measurement.
      properties:
        state:
          type: string
          enum: [ACTIVE, DEPRECATED, OBSOLETE]
          description: The deprecation state.
        remarks:
          type: string
          description: Remarks regarding deprecation.
          nullable: true
        supersededByUnitMeasurement: # Could be a reference string
          type: string
          description: The measurement that supersedes this one.
          nullable: true

    Measurement:
      type: object
      description: Represents a quantity or type of measurement.
      properties:
        name:
          type: string
          description: The full name of the measurement.
          example: "Length"
        code: # Often used for identification, like "L" for Length
          type: string
          description: A code or short identifier for the measurement.
          example: "L"
        namespace:
          type: string
          description: The namespace to which this measurement belongs.
          example: "energistics"
        description:
          type: string
          description: A textual description of the measurement.
          example: "The measure of distance."
          nullable: true
        dimensionCode:
          type: string
          description: The dimensional analysis code (e.g., from POSC).
          example: "L"
        dimensionAnalysis:
          type: string # e.g., M0 L1 T0 I0 TH0 N0 J0
          description: The full dimensional analysis string.
          example: "L"
        unitQuantityCode:
          type: string
          description: Associated unit quantity code, if applicable.
          example: "length"
        baseMeasurement:
          type: boolean
          description: True if this is a base measurement.
        baseMeasurementEssenceJson:
          type: string
          description: JSON essence of the base measurement, if this is derived.
          nullable: true
        parentEssenceJson:
          type: string
          description: JSON essence of the parent measurement, if applicable.
          nullable: true
        childMeasurementEssenceJsons:
          type: array
          items:
            type: string
          description: JSON essences of child measurements.
          nullable: true
        preferredUnitEssenceJsons:
          type: array
          items:
            type: string # JSON essence of preferred units
          description: JSON essences of preferred units for this measurement.
          nullable: true
        unitEssenceJsons:
          type: array
          items:
            type: string # JSON essence of all applicable units
          description: JSON essences of all units applicable to this measurement.
          nullable: true
        essenceJson:
          type: string
          description: The JSON serialized 'essence' of the measurement.
          example: '{"ancestry":"Length","type":"UM"}'
          readOnly: true
        essence:
          $ref: '#/components/schemas/MeasurementEssence'
          readOnly: true
        deprecationInfo:
          $ref: '#/components/schemas/MeasurementDeprecationInfo'
          nullable: true
        lastModified:
          type: string
          format: date-time
          description: Timestamp of the last modification.
          readOnly: true
      required:
        - name
        - code
        - namespace
        - essenceJson
        - lastModified

    MapState:
      type: object
      description: Represents the state of a mapping between namespaces.
      properties:
        source:
          type: string
          description: The source of the map state information.
          example: "UserDefined"
        state:
          type: string
          enum: [VALIDATED, PROPOSED, REJECTED] # Example states
          description: The current state of the mapping.
          example: "VALIDATED"
        description:
          type: string
          description: A description or notes about the map state.
          example: "Mapping confirmed by domain expert."
          nullable: true
      required:
        - source
        - state

    MeasurementMapItem:
      type: object
      description: A single item in a measurement map, linking two measurements.
      properties:
        fromNamespace:
          type: string
          description: Namespace of the source measurement.
        fromMeasurement:
          $ref: '#/components/schemas/Measurement' # Could be just essence/ID for brevity
          description: The source measurement.
        toNamespace:
          type: string
          description: Namespace of the target measurement.
        toMeasurement:
          $ref: '#/components/schemas/Measurement' # Could be just essence/ID
          description: The target measurement.
        state:
          type: string # e.g., "EQUIVALENT", "RELATED"
          description: The state or type of mapping.
          example: "EQUIVALENT"
        note:
          type: string
          description: Notes about this specific mapping item.
          nullable: true
      required:
        - fromNamespace
        - fromMeasurement
        - toNamespace
        - toMeasurement
        - state

    MeasurementMap:
      type: object
      description: A collection of mappings between measurements from different namespaces.
      properties:
        fromNamespace:
          type: string
          description: The source namespace for this map.
        toNamespace:
          type: string
          description: The target namespace for this map.
        measurementMapItems:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementMapItem'
        measurementMapItemCount:
          type: integer
          format: int32
          description: Total number of items in this measurement map.
          readOnly: true
      required:
        - fromNamespace
        - toNamespace

    UnitMapItem:
      type: object
      description: A single item in a unit map, linking two units.
      properties:
        fromNamespace:
          type: string
        fromUnit:
          $ref: '#/components/schemas/Unit' # Or essence/ID
        toNamespace:
          type: string
        toUnit:
          $ref: '#/components/schemas/Unit' # Or essence/ID
        state:
          type: string # e.g., "EQUIVALENT", "CONTEXTUAL"
        note:
          type: string
          nullable: true
      required:
        - fromNamespace
        - fromUnit
        - toNamespace
        - toUnit
        - state

    UnitMap:
      type: object
      description: A collection of mappings between units from different namespaces.
      properties:
        fromNamespace:
          type: string
        toNamespace:
          type: string
        unitMapItems:
          type: array
          items:
            $ref: '#/components/schemas/UnitMapItem'
        unitMapItemCount:
          type: integer
          format: int32
          readOnly: true
      required:
        - fromNamespace
        - toNamespace

    UnitSystemInfo:
      type: object
      description: Basic information about a unit system.
      properties:
        name:
          type: string
          description: The name of the unit system.
          example: "SI"
        ancestry:
          type: string
          description: The unit system ancestry (e.g., "ProjectX.SI").
          example: "Energistics.SI"
        description:
          type: string
          description: A textual description of the unit system.
          example: "International System of Units"
          nullable: true
        persistableReference:
          type: string # JSON string representation of UnitSystemEssence
          description: The persistable reference string for the unit system.
          readOnly: true
      required:
        - name
        - ancestry # If always present
        - persistableReference

    Catalog:
      type: object
      description: Represents the entire catalog of units, measurements, maps, and systems.
      properties:
        lastModified:
          type: string
          format: date-time
          description: Timestamp of the last modification to any part of the catalog.
          readOnly: true
        totalUnitCount:
          type: integer
          format: int32
          readOnly: true
        units:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
          description: "List of all units in the catalog (can be paginated in practice)."
        totalMeasurementCount:
          type: integer
          format: int32
          readOnly: true
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
        totalUnitSystemCount:
          type: integer
          format: int32
          readOnly: true
        unitSystemInfos: # Name changed to Infos for consistency
          type: array
          items:
            $ref: '#/components/schemas/UnitSystemInfo'
        totalUnitMapCount:
          type: integer
          format: int32
          readOnly: true
        unitMaps:
          type: array
          items:
            $ref: '#/components/schemas/UnitMap'
        totalMeasurementMapCount:
          type: integer
          format: int32
          readOnly: true
        measurementMaps:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementMap'
        totalMapStateCount:
          type: integer
          format: int32
          readOnly: true
        mapStates:
          type: array
          items:
            $ref: '#/components/schemas/MapState'
      # required: - lastModified # If always present

    CatalogLastModified:
      type: object
      description: Timestamp of the last catalog modification.
      properties:
        lastModified:
          type: string
          format: date-time
      required:
        - lastModified

    ConversionRequestBase: # Base for conversion requests
      type: object
      properties:
        fromUnitPersistableReference:
          type: string
          description: >-
            Persistable reference string (JSON serialized Unit 'essence') for the 'from' unit.
            Either this or 'fromUnit' (essence object) must be provided.
          example: '{"symbol":"ft","type":"USO",...}'
        fromUnit:
          $ref: '#/components/schemas/UnitEssence' # Changed from UnitEssenceImpl
          description: >-
            Unit essence object for the 'from' unit.
            Either this or 'fromUnitPersistableReference' must be provided.
        toUnitPersistableReference:
          type: string
          description: >-
            Persistable reference string for the 'to' unit.
            Either this or 'toUnit' (essence object) must be provided.
        toUnit:
          $ref: '#/components/schemas/UnitEssence' # Changed from UnitEssenceImpl
          description: >-
            Unit essence object for the 'to' unit.
            Either this or 'toUnitPersistableReference' must be provided.
      # Logic for oneOf (fromUnit OR fromUnitPersistableReference) needs to be handled by client/server.
      # OpenAPI 3.0 oneOf applies to direct properties, not complex mutual exclusivity like this.

    ConversionABCDRequest:
      allOf:
        - $ref: '#/components/schemas/ConversionRequestBase'
      description: Request for an ABCD-style unit conversion.

    ConversionScaleOffsetRequest:
      allOf:
        - $ref: '#/components/schemas/ConversionRequestBase'
      description: Request for a scale-offset style unit conversion.

    ConversionResult:
      type: object
      description: Result of a unit conversion, providing parameters for both styles.
      properties:
        fromUnit:
          $ref: '#/components/schemas/Unit' # Full unit object
          description: The fully resolved 'from' unit.
        toUnit:
          $ref: '#/components/schemas/Unit' # Full unit object
          description: The fully resolved 'to' unit.
        scaleOffset:
          $ref: '#/components/schemas/ScaleOffset'
          description: Scale and offset parameters for y = scale * (x - offset).
        abcd:
          $ref: '#/components/schemas/ABCD'
          description: ABCD parameters for y = (A+Bx)/(C+Dx).
      required:
        - fromUnit
        - toUnit
        # Depending on the conversion, either scaleOffset or abcd (or both if a direct conversion exists in both forms) would be populated.

    MeasurementRequest:
      type: object
      description: Request to retrieve a specific measurement.
      properties:
        persistableReference:
          type: string
          description: >-
            Persistable reference string for the measurement.
            Either this or 'essence' must be provided.
        essence:
          $ref: '#/components/schemas/MeasurementEssence' # Changed from MeasurementEssenceImpl
          description: >-
            Measurement essence object.
            Either this or 'persistableReference' must be provided.

    UnitRequest:
      type: object
      description: Request to retrieve a specific unit.
      properties:
        persistableReference:
          type: string
          description: >-
            Persistable reference string for the unit.
            Either this or 'essence' must be provided.
        essence:
          $ref: '#/components/schemas/UnitEssence' # Changed from UnitEssenceImpl
          description: >-
            Unit essence object.
            Either this or 'persistableReference' must be provided.

    QueryResult: # Generic query result structure
      type: object
      description: Paginated result for list queries.
      properties:
        offset:
          type: integer
          format: int32
          description: The offset (page number * limit) of the returned items.
        count:
          type: integer
          format: int32
          description: The number of items returned in this page.
        totalCount:
          type: integer
          format: int32
          description: The total number of items available across all pages.
        # Specific result types will be in 'oneOf' or the specific response schema
        units:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
          nullable: true
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measurement'
          nullable: true
        unitMapItems: # Renamed from unitMapItem for consistency
          type: array
          items:
            $ref: '#/components/schemas/UnitMapItem'
          nullable: true
        measurementMapItems: # Renamed from measurementMapItem for consistency
          type: array
          items:
            $ref: '#/components/schemas/MeasurementMapItem'
          nullable: true
        mapStates:
          type: array
          items:
            $ref: '#/components/schemas/MapState'
          nullable: true
      required:
        - offset
        - count
        - totalCount

    SearchRequest:
      type: object
      description: Request containing a Lucene-style query string.
      properties:
        query:
          type: string
          description: The Lucene-style query string.
          example: "name:meter AND namespace:energistics"
      required:
        - query

    UnitAssignment:
      type: object
      description: Assignment of a specific unit to a measurement within a unit system.
      properties:
        measurement:
          $ref: '#/components/schemas/Measurement' # Or essence/ID
        unit:
          $ref: '#/components/schemas/Unit' # Or essence/ID
        lastModified:
          type: string
          format: date-time
          readOnly: true
      required:
        - measurement
        - unit
        - lastModified

    UnitSystemEssence: # Renamed from UnitSystemEssenceImpl
      type: object
      description: The core identifying information for a unit system.
      properties:
        ancestry:
          type: string
          description: The full ancestry of this unit system (e.g., "Global.CompanyA.Metric").
          example: "Common.SI"
      required:
        - ancestry

    UnitSystem:
      type: object
      description: Represents a system of units with specific unit assignments for measurements.
      properties:
        name:
          type: string
          description: The name of the unit system.
          example: "SI"
        description:
          type: string
          description: A textual description.
          example: "International System of Units with common oilfield extensions."
          nullable: true
        ancestry:
          type: string
          description: Ancestry path of the unit system.
          example: "Common.SI"
          readOnly: true
        source:
          type: string
          description: The source or authority defining this unit system.
          example: "OSDU Standard"
          nullable: true
        persistableReference:
          type: string
          description: Persistable reference string for the unit system.
          readOnly: true
        referenceUnitSystem: # Name of a parent or reference system
          type: string
          description: Name of a reference unit system from which this system might inherit.
          example: "EnergisticsBase"
          nullable: true
        unitAssignments:
          type: array
          items:
            $ref: '#/components/schemas/UnitAssignment'
          description: List of unit assignments for measurements within this system.
        unitAssignmentCount: # Count of items in unitAssignments for current page
          type: integer
          format: int32
          readOnly: true
        unitAssignmentCountInResponse: # Seems redundant with 'count' if paginated
          type: integer
          format: int32
          readOnly: true
        unitAssignmentCountTotal: # Total assignments for this system
          type: integer
          format: int32
          readOnly: true
        offset: # For paginating unitAssignments
          type: integer
          format: int32
          readOnly: true
        lastModified:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - ancestry
        - persistableReference
        - lastModified

    UnitSystemInfoResponse:
      type: object
      description: Paginated list of unit system information.
      properties:
        offset:
          type: integer
          format: int32
          description: The offset (page number * limit) of the returned items.
        count:
          type: integer
          format: int32
          description: The number of unit system infos returned in this page.
        totalCount:
          type: integer
          format: int32
          description: The total number of unit system infos available.
        unitSystemInfoList:
          type: array
          items:
            $ref: '#/components/schemas/UnitSystemInfo'
          description: List of unit system information objects.
      required:
        - offset
        - count
        - totalCount
        - unitSystemInfoList

    UnitSystemRequest:
      type: object
      description: Request to retrieve a specific unit system.
      properties:
        persistableReference:
          type: string
          description: >-
            Persistable reference string for the unit system.
            Either this or 'essence' must be provided.
        essence:
          $ref: '#/components/schemas/UnitSystemEssence' # Changed from UnitSystemEssenceImpl
          description: >-
            Unit system essence object.
            Either this or 'persistableReference' must be provided.

    ConnectedOuterService:
      type: object
      properties:
        name:
          type: string
          example: "ReferenceDataService"
        version:
          type: string
          example: "1.2.0"
    VersionInfo:
      type: object
      properties:
        version:
          type: string
          example: "3.0.0"
        commitId:
          type: string
          example: "a1b2c3d4e5f67890"
        buildTime:
          type: string
          format: date-time
          example: "2023-10-26T14:30:00Z"
        branch:
          type: string
          example: "main"
        commitMessage:
          type: string
          example: "Release 3.0 with new catalog features"
        groupId:
          type: string
          example: "org.osdu"
        artifactId:
          type: string
          example: "unit-service"
        connectedOuterServices:
          type: array
          items:
            $ref: '#/components/schemas/ConnectedOuterService'

  parameters:
    DataPartitionIdHeader:
      name: data-partition-id
      in: header
      description: >-
        Specifies the data partition ID for the request. This is typically the tenant or account ID.
      required: true
      schema:
        type: string
      example: 'contoso-opendes'
    OffsetQueryParam:
      name: offset
      in: query
      description: Number of initial records to skip for pagination.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
      example: 0
    LimitQueryParam:
      name: limit
      in: query
      description: Maximum number of records to return per page.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000 # Or service defined max
        default: 100
      example: 50

  securitySchemes:
    oAuth2AuthCode:
      type: oauth2
      description: OAuth2 authentication using Authorization Code flow with Azure AD.
      flows:
        authorizationCode:
          authorizationUrl: https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/authorize
          tokenUrl: https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token
          scopes:
            'api://contoso.energy.azure.com/data.read': Read access to ADME data.
            'api://contoso.energy.azure.com/data.write': Write access (if applicable to Unit service).
            # 'api://contoso.energy.azure.com/UnitService.Read': Specific scope if available
            # 'api://contoso.energy.azure.com/UnitService.Write': Specific scope if available

  responses: # Common responses
    AppErrorResponse:
      description: An error occurred. See response body for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    UnauthorizedError:
      description: Unauthorized. Authentication credentials missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError' # Assuming AppError used for 401/403
    ForbiddenError:
      description: Forbidden. Authenticated user lacks permission for this action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    NotFoundError:
      description: Not Found. The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    BadRequestError:
      description: Bad Request. The request was malformed or contained invalid parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    ConflictError:
      description: Conflict with the current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    InternalServerError:
      description: Internal Server Error. An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    BadGatewayError:
      description: Bad Gateway. Error communicating with an upstream service.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    ServiceUnavailableError:
      description: Service Unavailable. The service is temporarily unavailable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'

security:
  - oAuth2AuthCode:
      - 'api://contoso.energy.azure.com/data.read'
      # - 'api://contoso.energy.azure.com/data.write' # If service has write operations

paths:
  /v3/_ah/liveness_check: # Keeping original path structure
    get:
      tags:
        - ServiceInformation
      summary: Perform Liveness Check
      description: Checks if the Unit Service is alive and responding.
      operationId: GetLivenessCheck # Renamed
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader' # Typically not needed for liveness
      security: [] # Usually public
      responses:
        '200':
          description: Unit Service is alive.
          content:
            text/plain: # As per original
              schema:
                type: string
                example: "Unit Service is alive"
        '400': { $ref: '#/components/responses/BadRequestError' } # Original listed 400/401/403 for liveness, unusual.
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /v3/_ah/readiness_check:
    get:
      tags:
        - ServiceInformation
      summary: Perform Readiness Check
      description: Checks if the Unit Service is ready to accept traffic (e.g., dependencies are available).
      operationId: GetReadinessCheck # Renamed
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader' # Typically not needed for readiness
      security: [] # Usually public
      responses:
        '200':
          description: Unit Service is ready.
          content:
            text/plain:
              schema:
                type: string
                example: "Unit Service is ready"
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  /v3/info:
    get:
      tags:
        - ServiceInformation
      summary: Get Service Version Information
      description: Provides build and git related information about the deployed Unit Service.
      operationId: GetServiceInformation # Renamed from 'info' to be more descriptive
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader' # Might not be needed if info is truly global
      security: [] # Typically public
      responses:
        '200':
          description: Successfully retrieved version information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        default: { $ref: '#/components/responses/AppErrorResponse' }

  /v3/catalog:
    get:
      tags:
        - CatalogManagement
      summary: Get Entire Unit and Measurement Catalog
      description: Retrieves the complete catalog of units, measurements, maps, and systems.
      operationId: GetCatalog
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: Successfully retrieved the catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '409': { $ref: '#/components/responses/ConflictError' } # Original: "A LegalTag with the given name already exists." - seems out of place here
        '500': { $ref: '#/components/responses/InternalServerError' }
        '502': { $ref: '#/components/responses/BadGatewayError' }
        '503': { $ref: '#/components/responses/ServiceUnavailableError' }

  /v3/catalog/lastmodified:
    get:
      tags:
        - CatalogManagement
      summary: Get Catalog Last Modified Timestamp
      description: Retrieves the timestamp of the last modification to any part of the catalog.
      operationId: GetCatalogLastModifiedTimestamp
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: Successfully retrieved the last modified timestamp.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLastModified'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v3/catalog/mapstates:
    get:
      tags:
        - CatalogManagement # Or a specific MapManagement tag
      summary: List All Map States
      description: Retrieves a paginated list of all map states in the catalog.
      operationId: ListMapStates
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/OffsetQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
      responses:
        '200':
          description: Successfully retrieved map states.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult' # Assuming mapStates are returned within QueryResult
                # Example of how QueryResult could be used here:
                # properties:
                #   mapStates:
                #     type: array
                #     items:
                #       $ref: '#/components/schemas/MapState'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v3/catalog/search:
    post:
      tags:
        - CatalogManagement
      summary: Search Catalog Items
      description: >-
        Performs a search across the catalog (units, measurements, etc.) using a Lucene-style query string.
        Results are paginated.
      operationId: SearchCatalog
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/OffsetQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
      requestBody:
        description: Search query.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200': # Changed from 201 on POST for search
          description: Search completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult' # Generic result, actual items depend on search scope
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v3/conversion/abcd:
    get:
      tags:
        - Conversion
      summary: Get ABCD Conversion Parameters by Unit Symbols
      description: Retrieves ABCD conversion parameters between two units identified by their symbols and namespaces.
      operationId: GetAbcdConversionParametersBySymbols
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - name: namespaces # Assuming comma-separated or repeated query param for multiple namespaces
          in: query
          description: Namespace(s) for the units (e.g., "energistics,posc" or "energistics").
          required: true
          schema:
            type: string # Or array if supported with style/explode
          example: "energistics"
        - name: fromSymbol
          in: query
          description: Symbol of the unit to convert from.
          required: true
          schema:
            type: string
          example: "ft"
        - name: toSymbol
          in: query
          description: Symbol of the unit to convert to.
          required: true
          schema:
            type: string
          example: "m"
      responses:
        '200':
          description: Successfully retrieved ABCD conversion parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionResult'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' } # If units not found or no conversion path
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags:
        - Conversion
      summary: Get ABCD Conversion Parameters by Unit Essence
      description: Retrieves ABCD conversion parameters between two units defined by their essence or persistable references.
      operationId: GetAbcdConversionParametersByEssence
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: Request specifying the 'from' and 'to' units for ABCD conversion.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversionABCDRequest'
      responses:
        '200': # Changed from 201 for a GET-like operation via POST
          description: Successfully retrieved ABCD conversion parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionResult'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v3/conversion/scale:
    get:
      tags:
        - Conversion
      summary: Get Scale/Offset Conversion Parameters by Unit Symbols
      description: Retrieves Scale/Offset conversion parameters between two units identified by their symbols and namespaces.
      operationId: GetScaleOffsetConversionParametersBySymbols
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - name: namespaces
          in: query
          description: Namespace(s) for the units.
          required: true
          schema:
            type: string
          example: "energistics"
        - name: fromSymbol
          in: query
          description: Symbol of the unit to convert from.
          required: true
          schema:
            type: string
          example: "degC"
        - name: toSymbol
          in: query
          description: Symbol of the unit to convert to.
          required: true
          schema:
            type: string
          example: "degF"
      responses:
        '200':
          description: Successfully retrieved Scale/Offset conversion parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionResult'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags:
        - Conversion
      summary: Get Scale/Offset Conversion Parameters by Unit Essence
      description: Retrieves Scale/Offset conversion parameters between two units defined by their essence or persistable references.
      operationId: GetScaleOffsetConversionParametersByEssence
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: Request specifying the 'from' and 'to' units for Scale/Offset conversion.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversionScaleOffsetRequest'
      responses:
        '200': # Changed from 201
          description: Successfully retrieved Scale/Offset conversion parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionResult'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  # ... (Remaining paths for /measurement, /unit, /unitsystem would follow similar refactoring logic)
  # For brevity, providing one example from each category:

  /v3/measurement:
    get:
      tags:
        - MeasurementManagement
      summary: Get Measurement by Ancestry
      description: Retrieves a specific measurement definition based on its ancestry string.
      operationId: GetMeasurementByAncestry
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - name: ancestry
          in: query
          description: The ancestry string of the measurement (e.g., "Length.MeasuredDepth").
          required: true
          schema:
            type: string
          example: "Pressure.GaugePressure"
      responses:
        '200':
          description: Successfully retrieved the measurement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Measurement'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags:
        - MeasurementManagement
      summary: Get Measurement by Essence or Reference
      description: Retrieves a measurement definition based on its essence object or persistable reference string.
      operationId: GetMeasurementByEssenceOrReference
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: Request containing either the measurement essence or its persistable reference.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementRequest'
      responses:
        '200': # Changed from 201
          description: Successfully retrieved the measurement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Measurement'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v3/unit/list: # Assuming /v3/unit was for single unit, and this is for list. Original was just /v3/unit with GET
    get:
      tags:
        - UnitManagement
      summary: List All Units
      description: Retrieves a paginated list of all defined units of measure.
      operationId: ListUnits
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/OffsetQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
      responses:
        '200':
          description: Successfully retrieved the list of units.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult' # Assuming units are within QueryResult
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v3/unitsystem/list:
    get:
      tags:
        - UnitSystemManagement
      summary: List Unit System Information
      description: Retrieves a paginated list of information for all defined unit systems.
      operationId: ListUnitSystemInfos # Renamed from getUnitSystemInfoList
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/OffsetQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
      responses:
        '200':
          description: Successfully retrieved unit system information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitSystemInfoResponse'
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '500': { $ref: '#/components/responses/InternalServerError' }