openapi: 3.0.3
info:
  title: OSDU Wellbore DDMS
  version: v0.2.0 # Aligned with ADME practice, assuming patch for refinement
  description: >-
    Wellbore Domain Data Management Service (DDMS) API for Azure Data Manager
    for Energy. This service provides endpoints for managing well-related data
    entities such as Wells, Wellbores, Well Logs, Trajectories, Markers, and
    DipSets, including their bulk data and metadata. It also includes
    functionalities for log recognition and data sessions.
  contact:
    name: OSDU Forum
    email: membership@opengroup.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
x-ms-connector-metadata:
  - propertyName: Website
    propertyValue: https://osduforum.org
  - propertyName: Privacy policy
    propertyValue: https://www.opengroup.org/privacy
  - propertyName: Categories
    propertyValue: Data
servers:
  - url: https://contoso.energy.azure.com/api/os-wellbore-ddms
    description: Azure Data Manager for Energy - Contoso Environment
tags:
  - name: ServiceInformation
    description: Endpoints for service health, version, and general information.
  - name: LogManagementV3
    description: Operations for managing Well Log records and their data (V3).
  - name: LogDataSessionV3
    description: Operations for managing data upload sessions for Well Logs (V3).
  - name: TrajectoryManagementV3
    description: Operations for managing Wellbore Trajectory records and their data (V3).
  - name: TrajectoryDataSessionV3
    description: Operations for managing data upload sessions for Wellbore Trajectories (V3).
  - name: WellManagementV2
    description: Deprecated operations for managing Well master data records (V2).
  - name: WellboreManagementV2
    description: Deprecated operations for managing Wellbore master data records (V2).
  - name: WellboreMarkerSetManagementV3
    description: Operations for managing Wellbore Marker Set records (V3).
  - name: WellboreIntervalSetManagementV3
    description: Operations for managing Wellbore Interval Set records (V3).
  - name: DipSetManagementV2
    description: Deprecated operations for managing Dip Set records and dip data (V2).
  - name: LogRecognition
    description: Services for recognizing log family and units.
  - name: DeprecatedWellLogAndTrajectory
    description: Deprecated operations for Well Logs and Trajectories (Alpha/v2 paths).
  - name: DeprecatedQuery
    description: Deprecated query endpoints.

components:
  schemas:
    #region Error and Validation Schemas
    AppError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: HTTP error status code.
          example: 400
        message:
          type: string
          description: A human-readable error message.
          example: "Invalid input provided."
        reason:
          type: string
          description: A more specific reason for the error, if available.
          example: "Record ID format is incorrect."
    ValidationError:
      title: ValidationError
      type: object
      properties:
        loc:
          type: array
          items:
            oneOf:
              - type: string
              - type: integer
          title: Location
          description: The location of the validation error.
          example: ["query", "record_id"]
        msg:
          type: string
          title: Message
          description: A human-readable error message.
          example: "Field required"
        type:
          type: string
          title: Error Type
          description: The type of validation error.
          example: "value_error.missing"
      required:
        - loc
        - msg
        - type
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Errors
          description: A list of validation error details.
    #endregion

    #region Core OSDU & Service Schemas
    AboutResponse:
      title: AboutResponse
      type: object
      properties:
        service: { type: string, title: Service Name, example: "Wellbore DDMS" }
        version: { type: string, title: Service Version, example: "0.2.0" }
        release: { type: string, title: Release Identifier, nullable: true, example: "Spring2024_Hotfix1" }
        buildNumber: { type: string, title: Build Number or Commit Hash, nullable: true, example: "20240315.1" }
        cloudEnvironment: { type: string, title: Cloud Environment Name, nullable: true, example: "AzureCloud" }
    StorageAcl:
      type: object
      title: StorageAcl
      description: Access Control List defining owners and viewers.
      properties:
        owners:
          type: array
          items: { type: string, format: email }
          description: List of owner identifiers (e.g., user or group emails).
          example: ["data.default.owners@contoso.energy"]
        viewers:
          type: array
          items: { type: string, format: email }
          description: List of viewer identifiers (e.g., user or group emails).
          example: ["data.default.viewers@contoso.energy"]
      required: [owners, viewers]
    Legal:
      type: object
      title: Legal
      description: Legal metadata for a record.
      properties:
        legaltags:
          type: array
          items: { type: string }
          uniqueItems: true
          description: List of legal tags associated with the record.
          example: ["OSDU-Public-US-Free"]
        otherRelevantDataCountries:
          type: array
          items: { type: string, pattern: "^[A-Z]{2}$" }
          uniqueItems: true
          description: List of other relevant data countries (ISO 3166-1 alpha-2).
          example: ["CA", "NO"]
        status:
          type: string
          enum: [compliant, incompliant, pending]
          description: The compliance status of the record.
          example: compliant
      required: [legaltags, otherRelevantDataCountries]
    RecordAncestry:
      type: object
      title: RecordAncestry
      description: Defines the parentage of a record for lineage and legal purposes.
      properties:
        parents:
          type: array
          items:
            type: string
            pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+:\d+$
          uniqueItems: true
          description: List of parent record IDs, including their versions.
          example: ["contoso-opendes:seismic-trace-data:TRACE_SET_001:1622500000000"]
    Record:
      type: object
      title: Record
      description: Represents a generic OSDU data record.
      properties:
        id: { type: string, description: Unique record identifier., example: "contoso-opendes:wks:master-data--Well:WELL-001", readOnly: true }
        version: { type: integer, format: int64, description: Record version (timestamp)., example: 1622548800000, readOnly: true }
        kind: { type: string, description: OSDU schema kind., example: "osdu:wks:master-data--Well:1.2.0" }
        acl: { $ref: '#/components/schemas/StorageAcl' }
        legal: { $ref: '#/components/schemas/Legal' }
        data: { type: object, additionalProperties: true, description: The actual data payload of the record. }
        ancestry: { $ref: '#/components/schemas/RecordAncestry', nullable: true }
        tags: { type: object, additionalProperties: { type: string }, description: Arbitrary key-value pairs for tagging the record., nullable: true }
        createTime: { type: string, format: date-time, description: Timestamp of when the record version was created., readOnly: true }
        createUser: { type: string, format: email, description: User who created this record version., readOnly: true }
        modifyTime: { type: string, format: date-time, description: Timestamp of when this record version was last modified., readOnly: true }
        modifyUser: { type: string, format: email, description: User who last modified this record version., readOnly: true }
        meta: { type: array, items: { $ref: '#/components/schemas/MetaItem' }, description: "Frame of Reference metadata, defining units, CRS, etc., for properties within 'data'.", nullable: true }
      required: [kind, acl, legal, data]
    MetaItem:
      type: object
      properties:
        kind: { $ref: '#/components/schemas/Kind' }
        name: { type: string }
        persistableReference: { type: string }
        propertyNames: { type: array, items: { type: string } }
        propertyValues: { type: array, items: { type: string } }
        uncertainty: { type: number }
      required: [kind, persistableReference]
    #endregion

    #region Data & DataFrame Schemas
    DataFrameResponse:
      description: Represents data in a DataFrame-like structure.
      oneOf:
        - $ref: '#/components/schemas/DataFrameSplitOrient'
        - $ref: '#/components/schemas/DataFrameColumnsOrient'
    DataFrameSplitOrient:
      title: SplitOrientFormat
      type: object
      properties:
        columns: { type: array, items: { type: string } }
        index: { type: array, items: { oneOf: [{type: string},{type: integer},{type: number}]} }
        data: { type: array, items: { type: array, items: { oneOf: [{type: string},{type: integer},{type: number}, {type: boolean}] } } }
      required: [columns, index, data]
    DataFrameColumnsOrient:
      title: ColumnsOrientFormat
      type: object
      additionalProperties: { type: object, additionalProperties: { oneOf: [{type: string},{type: integer},{type: number}, {type: boolean}]} }
    WellLogDataResponse: { $ref: '#/components/schemas/DataFrameResponse' }
    WellboreTrajectoryDataResponse: { $ref: '#/components/schemas/DataFrameResponse' }
    BulkDataStatisticsResponse:
      description: 'Response for bulk data statistics and its meta-data '
      properties:
        computationStartDatetime: { type: string, format: 'date-time' }
        computationStatus: { $ref: '#/components/schemas/BulkStatisticsStatus' }
        data: { type: object, additionalProperties: { $ref: '#/components/schemas/CurveStatistics' } }
        recordId: { type: string }
        recordVersion: { type: integer, format: int64 }
      required: [computationStartDatetime, recordId, recordVersion, computationStatus, data]
    CurveStatistics:
      type: object
      properties:
        '10%': { type: string }
        '50%': { type: string }
        '90%': { type: string }
        max: { type: string }
        mean: { type: string }
        min: { type: string }
        nonAbsentValuesCount: { type: string }
        std: { type: string }
        totalCount: { type: string }
      required: [mean, std, min, '10%', '50%', '90%', max, totalCount, nonAbsentValuesCount]
    DataframeBasicDescribe:
      type: object
      properties:
        rowCount: { type: integer }
        columnCount: { type: integer }
        columns: { type: array, items: { type: string } }
        indexStart: { type: string }
        indexEnd: { type: string }
        indexType: { type: string }
      required: [rowCount, columnCount, columns, indexStart, indexEnd, indexType]
    #endregion

    #region Session Schemas
    Session:
      type: object
      properties:
        id: { type: string, format: uuid }
        recordId: { type: string }
        fromVersion: { type: integer, format: int64 }
        mode: { $ref: '#/components/schemas/SessionUpdateMode' }
        state: { $ref: '#/components/schemas/SessionState' }
        expiry: { type: string, format: 'date-time' }
        createdTime: { type: string, format: 'date-time' }
        updatedTime: { type: string, format: 'date-time' }
        meta: { type: object, additionalProperties: { type: string }, nullable: true }
      required: [id, recordId, fromVersion, mode, expiry, createdTime, updatedTime, state]
    CreateDataSessionRequest:
      type: object
      properties:
        fromVersion: { type: integer, format: int64, default: 0 }
        meta: { type: object, additionalProperties: { type: string }, nullable: true }
        mode: { $ref: '#/components/schemas/SessionUpdateMode' }
        timeToLive: { type: integer, default: 1440, description: "Time to live in minutes." }
      required: [mode]
    CommitSessionResponse:
      allOf:
        - $ref: '#/components/schemas/Session'
      properties:
        version: { type: integer, format: int64, description: "Record version after successful commit." }
    UpdateSessionState:
      type: object
      properties:
        state: { $ref: '#/components/schemas/UpdateSessionStateValue' }
      required: [state]
    #endregion
    
    #region NEWLY ADDED (Missing) Schemas
    LogDataUploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: The log data file (e.g., LAS, DLIS).
        metadata:
          type: object
          additionalProperties: true
          description: Optional metadata to associate with the upload.
      required:
        - file
    SearchQueryRequest:
      type: object
      properties:
        query:
          type: string
          description: The search query string (e.g., using Lucene syntax).
          example: 'data.WellName:"MyWell-1"'
        limit:
          type: integer
          format: int32
          default: 100
        cursor:
          type: string
          description: A cursor for fetching the next page of results.
      required:
        - query
    CreateUpdateRecordsResponse:
      type: object
      properties:
        recordCount:
          type: integer
          description: Total number of records processed.
        recordIds:
          type: array
          items:
            type: string
          description: List of record IDs that were successfully created or updated.
        skippedRecordIds:
          type: array
          items:
            type: string
          description: List of record IDs that were skipped (e.g., no changes).
        errors:
          type: array
          items:
            type: object
            properties:
              recordId: { type: string }
              error: { type: string }
          description: Details of records that failed processing.
    RecordVersions:
      type: object
      properties:
        versions:
          type: array
          items:
            type: object
            properties:
              version: { type: integer, format: int64 }
              timestamp: { type: string, format: 'date-time' }
    CursorQueryResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Record'
        nextCursor:
          type: string
          nullable: true
          description: The cursor to use for the next page of results. Null if no more results.
        totalCount:
          type: integer
          format: int64
          description: The total count of matching records, if available.
    GuessResponse:
      type: object
      description: Guessed family and unit for a log curve.
      properties:
        family:
          type: string
          example: "Gamma Ray"
        unit:
          type: string
          example: "gAPI"
        confidence:
          type: number
          format: float
          example: 0.95
      required: [family, unit]
    #endregion

    #region Enum & Utility Schemas
    GeoJsonPoint:
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/GeoJsonType'
          default: Point
          example: Point
    GeoJsonType:
      title: GeoJsonType, description: Standard GeoJSON geometry types.
      type: string
      enum: [Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature, FeatureCollection]
    DataType:
      title: DataType, description: Basic data types for schema properties or log curve values.
      type: string
      enum: [string, number, integer, boolean, "date-time"]
    DataFormat:
      title: DataFormat, description: Specific data formats, often refining basic types.
      type: string
      enum: [date, date-time, time, byte, binary, boolean, email, uuid, uri, int8, int16, int32, int64, float32, float64, float128]
    JSONOrient:
      title: JSONOrient, description: Specifies the orientation for JSON data responses for DataFrames.
      type: string
      enum: [split, columns]
    Kind:
      title: Kind, description: The kind of reference within a MetaItem.
      type: string
      enum: [CRS, Unit, Measurement, AzimuthReference, DateTime]
    BulkStatisticsStatus:
      type: string
      enum: [error, started, running, complete]
    SessionUpdateMode:
      type: string
      enum: [overwrite, update]
    SessionState:
      type: string
      enum: [open, committing, abandoning, committed, abandoned]
    UpdateSessionStateValue:
      type: string
      enum: [commit, abandon]
    #endregion
  
  parameters:
    DataPartitionIdHeader:
      name: data-partition-id
      in: header
      description: Specifies the data partition ID for the request.
      required: true
      schema: { type: string }
      example: 'contoso-opendes'
    RecordIdPathParameter:
      name: record_id
      in: path
      description: The unique OSDU identifier of the record.
      required: true
      schema: { type: string, pattern: '^[\w\-\.]+:[\w\-\.\-\_]+:[\w\-\.\:\%\_]+$' }
      example: "osdu:work-product-component--WellLog:mywelllog_123"
    VersionPathParameter:
      name: version
      in: path
      description: The specific version of the record.
      required: true
      schema: { type: integer, format: int64 }
      example: 1678886400000
    SessionIdPathParameter:
      name: session_id
      in: path
      description: The unique identifier of the data upload session.
      required: true
      schema: { type: string, format: uuid }
      example: "123e4567-e89b-12d3-a456-426614174000"
    WellIdPathParameter:
      name: well_id
      in: path
      description: The identifier of the Well.
      required: true
      schema: { type: string }
      example: "osdu:master-data--Well:W-001"
    WellboreIdPathParameter:
      name: wellbore_id
      in: path
      description: The identifier of the Wellbore.
      required: true
      schema: { type: string }
      example: "osdu:master-data--Wellbore:WB-001"
    LogIdPathParameter:
      name: log_id
      in: path
      description: The identifier of the WellLog record (deprecated path).
      required: true
      schema: { type: string }
      example: "osdu:wpc--WellLog:LOG-001-v2"
    TrajectoryIdPathParameter:
      name: trajectory_id
      in: path
      description: The identifier of the WellboreTrajectory record.
      required: true
      schema: { type: string }
      example: "osdu:wpc--WellboreTrajectory:TRAJ-001"
    WellboreAttributePathParameter:
      name: wellboreAttribute
      in: path
      description: The attribute of the wellbore to query by. Note: Using an attribute name as a path parameter is an unconventional design; this would typically be a query parameter.
      required: true
      schema: { type: string }
      example: "FacilityName"
    DipsetIdPathParameter:
      name: dipset_id
      in: path
      description: The identifier of the DipSet record.
      required: true
      schema: { type: string }
      example: "osdu:wpc--DipSet:DS-001"
    DipIndexPathParam:
      name: index
      in: path
      description: The index of the dip within the DipSet.
      required: true
      schema: { type: integer, format: int32, minimum: 0 }
    MarkerIdPathParameter:
      name: marker_id
      in: path
      description: The identifier of the Marker record.
      required: true
      schema: { type: string }
      example: "osdu:wpc--WellboreMarkerSet:MARKERSET-001"
    WellboreIntervalSetIdPathParameter:
      name: wellbore_intervalset_id
      in: path
      description: The identifier of the WellboreIntervalSet record.
      required: true
      schema: { type: string, pattern: '^[\w\-\.]+:work-product-component\-\-WellboreIntervalSet:[\w\-\.\:\%]+$' }
      example: "osdu:wpc--WellboreIntervalSet:INTERVALSET-001"
    WellboreMarkerSetIdPathParameter:
      name: wellbore_markerset_id
      in: path
      description: The identifier of the WellboreMarkerSet record.
      required: true
      schema: { type: string, pattern: '^[\w\-\.]+:work-product-component\-\-WellboreMarkerSet:[\w\-\.\:\%]+$' }
      example: "osdu:wpc--WellboreMarkerSet:MARKERSET-XYZ"
    OffsetQueryParam:
      name: offset
      in: query
      description: The number of initial items to skip for pagination.
      schema: { type: integer, format: int32, minimum: 0, default: 0 }
    LimitQueryParam:
      name: limit
      in: query
      description: The maximum number of items to return in a single response page.
      schema: { type: integer, format: int32, minimum: 1, maximum: 1000, default: 100 }
    CurvesQueryParam:
      name: curves
      in: query
      description: Comma-separated list of curve mnemonics or array curve expressions to include in the response.
      schema: { type: string }
      example: "MD,GR,DTCO,ARR[0:5]"
    DescribeQueryParam:
      name: describe
      in: query
      description: If true, requests a description of the data instead of the actual data.
      schema: { type: boolean, default: false }
    FilterQueryParam:
      name: filter
      in: query
      description: Row filter expressions (e.g., "MD:gt:1000,MD:lt:2000").
      schema: { type: array, items: { type: string, pattern: '^(".+"|[^:]+):(lt|lte|gt|gte|eq|neq|in):.*$' } }
      style: form
      explode: false
      example: ["MD:gte:1000", "MD:lte:1500"]
    OrientQueryParam:
      name: orient
      in: query
      description: Specifies the orientation for JSON data responses for DataFrames.
      schema: { $ref: '#/components/schemas/JSONOrient', default: split }

  requestBodies:
    LogDataUploadRequest:
      description: Log data file to upload.
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/LogDataUploadRequest'
    SearchQueryRequest:
      description: Search query parameters.
      required: true
      content: { application/json: { schema: { $ref: '#/components/schemas/SearchQueryRequest' } } }
    CreateDataSessionRequest:
      description: Parameters to create a data upload session.
      required: true
      content: { application/json: { schema: { $ref: '#/components/schemas/CreateDataSessionRequest' } } }
    UpdateSessionStateRequest:
      description: Request to update the state of a session (commit or abandon).
      required: true
      content: { application/json: { schema: { $ref: '#/components/schemas/UpdateSessionState' } } }
    WellLogArrayUploadRequest:
      description: Array of WellLog records to create or update.
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Record'
            example:
              - id: "contoso:wks:work-product-component--WellLog:LOG-001"
                kind: "osdu:wks:work-product-component--WellLog:1.2.0"
                # ... other fields

  responses:
    AppErrorResponse:
      description: An error occurred. See response body for details.
      content: { application/json: { schema: { $ref: '#/components/schemas/AppError' } } }
    BadRequestError:
      description: Bad Request. The server cannot process the request due to a client error.
      content: { application/json: { schema: { $ref: '#/components/schemas/AppError' } } }
    ValidationProblem:
      description: Validation Error. The request was malformed or contained invalid parameters.
      content: { application/json: { schema: { $ref: '#/components/schemas/HTTPValidationError' } } }
    UnauthorizedError:
      description: Unauthorized. Authentication credentials missing or invalid.
      content: { application/json: { schema: { $ref: '#/components/schemas/AppError' } } }
    ForbiddenError:
      description: Forbidden. Authenticated user lacks permission for this action.
      content: { application/json: { schema: { $ref: '#/components/schemas/AppError' } } }
    NotFoundError:
      description: Not Found. The requested resource could not be found.
      content: { application/json: { schema: { $ref: '#/components/schemas/AppError' } } }
    InternalServerError:
      description: Internal Server Error. An unexpected error occurred on the server.
      content: { application/json: { schema: { $ref: '#/components/schemas/AppError' } } }
    WellLogDataJsonResponse:
      description: Well log data in JSON format.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/WellLogDataResponse' }
          examples:
            split:
              summary: Example in 'split' orient
              value:
                columns: [MD, GR]
                index: [0, 1]
                data: [[1000.0, 50.0], [1000.5, 52.1]]
    WellLogDataParquetResponse:
      description: Well log data in Apache Parquet format.
      content: { application/x-parquet: { schema: { type: string, format: binary } } }
    DataFrameDescriptionResponse:
      description: Description of the dataframe structure (e.g., columns, row count).
      content: { application/json: { schema: { $ref: '#/components/schemas/DataframeBasicDescribe' } } }
    SessionResponse:
      description: Details of a data upload session.
      content: { application/json: { schema: { $ref: '#/components/schemas/Session' } } }
    SessionListResponse:
      description: A list of data upload sessions.
      content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Session' } } } }
    CommitSessionResponse:
      description: Response after committing or abandoning a session.
      content: { application/json: { schema: { $ref: '#/components/schemas/CommitSessionResponse' } } }
    RecordResponse:
      description: A single OSDU record.
      content: { application/json: { schema: { $ref: '#/components/schemas/Record' } } }
    CreateUpdateRecordsResponse:
      description: Response for creating or updating multiple records.
      content: { application/json: { schema: { $ref: '#/components/schemas/CreateUpdateRecordsResponse' } } }
    RecordVersionsResponse:
      description: List of versions for a record.
      content: { application/json: { schema: { $ref: '#/components/schemas/RecordVersions' } } }
    CursorQueryResponse:
      description: Paginated query results.
      content: { application/json: { schema: { $ref: '#/components/schemas/CursorQueryResponse' } } }
    BulkDataStatisticsResponse:
      description: Statistics for bulk data.
      content: { application/json: { schema: { $ref: '#/components/schemas/BulkDataStatisticsResponse' } } }
    GuessResponse:
      description: Response from log recognition containing family and unit guess.
      content: { application/json: { schema: { $ref: '#/components/schemas/GuessResponse' } } }

  securitySchemes:
    oAuth2AuthCode:
      type: oauth2
      description: OAuth2 authentication using Authorization Code flow with Azure AD.
      flows:
        authorizationCode:
          authorizationUrl: https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/authorize
          tokenUrl: https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token
          scopes:
            'api://contoso.energy.azure.com/data.read': Read access to ADME data.
            'api://contoso.energy.azure.com/data.write': Write access to ADME data.
            'api://contoso.energy.azure.com/WellboreDDMS.Read': Read access to Wellbore DDMS.
            'api://contoso.energy.azure.com/WellboreDDMS.Write': Write access to Wellbore DDMS.

security:
  - oAuth2AuthCode:
      - 'api://contoso.energy.azure.com/WellboreDDMS.Read'
      - 'api://contoso.energy.azure.com/WellboreDDMS.Write'

paths:
  /about:
    get:
      tags: [ServiceInformation]
      summary: Get Service Build and Environment Information
      description: Retrieves details about the current build, release, and environment of the Wellbore DDMS service.
      operationId: getServiceAboutInformation
      security: [] # Public endpoint
      responses:
        '200':
          description: Successful Response.
          content: { application/json: { schema: { $ref: '#/components/schemas/AboutResponse' } } }
        '500':
          $ref: '#/components/responses/InternalServerError'

  /alpha/ddms/v2/logs/{record_id}/data:
    get:
      tags: [DeprecatedWellLogAndTrajectory]
      summary: Get WellLog Data (Alpha v2 - Deprecated)
      description: (DEPRECATED) Returns bulk data for a specific WellLog record.
      operationId: getWellLogDataAlphaV2
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/RecordIdPathParameter'
        - $ref: '#/components/parameters/OffsetQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/CurvesQueryParam'
        - $ref: '#/components/parameters/DescribeQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/OrientQueryParam'
      responses:
        '200': { $ref: '#/components/responses/WellLogDataJsonResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '413': { description: Payload Too Large., content: { application/json: { schema: { $ref: '#/components/schemas/AppError'}}}}
        '422': { $ref: '#/components/responses/ValidationProblem' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [DeprecatedWellLogAndTrajectory]
      summary: Upload WellLog Data (Alpha v2 - Deprecated)
      description: (DEPRECATED) Writes or overwrites bulk data for a WellLog record.
      operationId: uploadWellLogDataAlphaV2
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/RecordIdPathParameter'
      requestBody:
        description: WellLog data payload as a DataFrame structure or Parquet file.
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/WellLogDataResponse' } }
          application/x-parquet: { schema: { type: string, format: binary } }
      responses:
        '201': { $ref: '#/components/responses/RecordResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '413': { description: Payload Too Large., content: { application/json: { schema: { $ref: '#/components/schemas/AppError'}}}}
        '422': { $ref: '#/components/responses/ValidationProblem' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /ddms/v3/welllogs/{record_id}/data:
    get:
      tags: [LogManagementV3]
      summary: Get WellLog Data
      description: Returns bulk data for a specific WellLog record.
      operationId: getWellLogRecordData
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/RecordIdPathParameter'
        - $ref: '#/components/parameters/OffsetQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/CurvesQueryParam'
        - $ref: '#/components/parameters/DescribeQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/OrientQueryParam'
      responses:
        '200': { $ref: '#/components/responses/WellLogDataJsonResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '413': { description: Payload Too Large., content: { application/json: { schema: { $ref: '#/components/schemas/AppError'}}}}
        '422': { $ref: '#/components/responses/ValidationProblem' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [LogManagementV3]
      summary: Upload WellLog Data
      description: Writes or overwrites bulk data for a WellLog record.
      operationId: uploadWellLogRecordData
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/RecordIdPathParameter'
      requestBody:
        description: WellLog data payload.
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/WellLogDataResponse' } }
          application/x-parquet: { schema: { type: string, format: binary } }
      responses:
        '201': { $ref: '#/components/responses/RecordResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '413': { description: Payload Too Large., content: { application/json: { schema: { $ref: '#/components/schemas/AppError'}}}}
        '422': { $ref: '#/components/responses/ValidationProblem' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /ddms/v3/welllogs/{record_id}/data/statistics:
    get:
      tags: [LogManagementV3]
      summary: Get WellLog Data Statistics
      description: Returns statistical information for curves in the latest version of a WellLog record.
      operationId: getWellLogDataStatistics
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/RecordIdPathParameter'
        - $ref: '#/components/parameters/CurvesQueryParam'
      responses:
        '200': { $ref: '#/components/responses/BulkDataStatisticsResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '422': { $ref: '#/components/responses/ValidationProblem' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /ddms/v3/welllogs/{record_id}/versions/{version}/data/statistics:
    get:
      tags: [LogManagementV3]
      summary: Get WellLog Data Statistics for a Specific Version
      description: Returns statistical information for curves in a specific version of a WellLog record.
      operationId: getWellLogDataStatisticsByVersion
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/RecordIdPathParameter'
        - $ref: '#/components/parameters/VersionPathParameter'
        - $ref: '#/components/parameters/CurvesQueryParam'
      responses:
        '200': { $ref: '#/components/responses/BulkDataStatisticsResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '422': { $ref: '#/components/responses/ValidationProblem' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [LogManagementV3]
      summary: Trigger WellLog Data Statistics Computation for a Version
      description: Triggers the asynchronous computation of statistical information for a specific version.
      operationId: triggerWellLogDataStatisticsByVersion
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/RecordIdPathParameter'
        - $ref: '#/components/parameters/VersionPathParameter'
      responses:
        '202':
          description: Statistics computation successfully initiated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  recordId: { type: string }
                  recordVersion: { type: integer, format: int64 }
                  status: { type: string, example: "started" }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '409': { description: Conflict. Statistics computation already running or complete., content: { application/json: { schema: { $ref: '#/components/schemas/AppError' } } } }
        '422': { $ref: '#/components/responses/ValidationProblem' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /ddms/v3/welllogs/{record_id}/sessions:
    get:
      tags: [LogDataSessionV3]
      summary: List Active Data Upload Sessions for a WellLog
      description: Retrieves a list of active (open) data upload sessions for the specified WellLog record.
      operationId: listWellLogDataSessions
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/RecordIdPathParameter'
      responses:
        '200': { $ref: '#/components/responses/SessionListResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [LogDataSessionV3]
      summary: Create Data Upload Session for a WellLog
      description: Initiates a new data upload session for a WellLog record.
      operationId: createWellLogDataSession
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/RecordIdPathParameter'
      requestBody:
        $ref: '#/components/requestBodies/CreateDataSessionRequest'
      responses:
        '201': { $ref: '#/components/responses/SessionResponse' }
        '400': { $ref: '#/components/responses/BadRequestError' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '403': { $ref: '#/components/responses/ForbiddenError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '500': { $ref: '#/components/responses/InternalServerError' }