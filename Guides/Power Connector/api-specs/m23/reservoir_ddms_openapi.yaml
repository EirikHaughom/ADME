openapi: 3.0.3
info:
  title: Azure Data Manager for Energy - Reservoir DMS API
  version: '1.1'
  description: REST API for managing Energistics dataspaces, resources, arrays, and generating OSDU manifests within the Azure Data Manager for Energy platform. Also includes Petrel DMS project management functionalities.
  contact:
    name: Microsoft Support
    email: support@microsoft.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: /api/reservoir-ddms/v2 # Base for Reservoir DMS specific endpoints
    description: Reservoir DMS Server
  - url: / # Assuming Petrel DMS is at root
    description: Petrel DMS Server (if different base path)
tags:
  - name: Dataspaces
    description: Operations related to managing dataspaces.
  - name: Resources
    description: Operations for listing, graphing, and retrieving Energistics resources and their arrays.
  - name: Manifests
    description: Operations for building OSDU manifests from Energistics resources.
  - name: Health
    description: Service health and information endpoints.
  - name: Projects # For Petrel DMS
    description: Operations related to Petrel DMS projects.

paths:
  # === Reservoir DMS Endpoints ===
  /dataspaces:
    get:
      tags:
        - Dataspaces
      summary: List all available dataspaces
      description: Lists the dataspaces available on the server. Output can be paginated and filtered by last write time.
      operationId: ListDataspaces
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/SkipQueryParam'
        - $ref: '#/components/parameters/TopQueryParam'
        - $ref: '#/components/parameters/StoreLastWriteFilterQueryParam'
      responses:
        '200':
          description: Successfully retrieved the list of dataspaces.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataspaceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError' # Or if no dataspaces exist but not an error
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/graph/all:
    get:
      tags:
        - Resources
      summary: Get a graph of all resources within a dataspace
      description: Creates a graph representation of all resources within a specified dataspace. Output can be paginated and filtered by types, content, and last update time.
      operationId: GraphAllResourcesInDataspace
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/SkipQueryParam'
        - $ref: '#/components/parameters/TopQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/StoreLastWriteFilterQueryParam'
        - $ref: '#/components/parameters/DataObjectTypesQueryParam'
        - $ref: '#/components/parameters/CountObjectsQueryParam'
      responses:
        '200':
          description: Successfully retrieved the graph of resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/graph/{dataObjectType}/{guid}/sources:
    get:
      tags:
        - Resources
      summary: Get a graph of resources that are sources to a given resource
      description: Graphs all resources that reference a specific target resource (sources). Supports recursive graphing, pagination, and filtering.
      operationId: GraphSourceResources
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/DataObjectTypePathParam'
        - $ref: '#/components/parameters/GuidPathParam'
        - $ref: '#/components/parameters/VersionQueryParam'
        - $ref: '#/components/parameters/SkipQueryParam'
        - $ref: '#/components/parameters/TopQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/StoreLastWriteFilterQueryParam'
        - $ref: '#/components/parameters/DataObjectTypesQueryParam'
        - $ref: '#/components/parameters/DepthQueryParam'
        - $ref: '#/components/parameters/IncludeSecondaryTargetsQueryParam'
        - $ref: '#/components/parameters/CountObjectsQueryParam'
      responses:
        '200':
          description: Successfully retrieved the graph of source resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/graph/{dataObjectType}/{guid}/targets:
    get:
      tags:
        - Resources
      summary: Get a graph of resources that are targets of a given resource
      description: Graphs all resources referenced by a specific source resource (targets). Supports recursive graphing, pagination, and filtering.
      operationId: GraphTargetResources
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/DataObjectTypePathParam'
        - $ref: '#/components/parameters/GuidPathParam'
        - $ref: '#/components/parameters/VersionQueryParam'
        - $ref: '#/components/parameters/SkipQueryParam'
        - $ref: '#/components/parameters/TopQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/StoreLastWriteFilterQueryParam'
        - $ref: '#/components/parameters/DataObjectTypesQueryParam'
        - $ref: '#/components/parameters/DepthQueryParam'
        - $ref: '#/components/parameters/IncludeSecondarySourcesQueryParam'
        - $ref: '#/components/parameters/CountObjectsQueryParam'
      responses:
        '200':
          description: Successfully retrieved the graph of target resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/info:
    get:
      tags:
        - Dataspaces
      summary: Get information about a specific dataspace
      description: Retrieves detailed information about a single dataspace.
      operationId: GetDataspaceInfo
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
      responses:
        '200':
          description: Successfully retrieved dataspace information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataspaceDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/lock:
    parameters:
      - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
      - $ref: '#/components/parameters/DataspaceIdPathParam'
    post:
      tags:
        - Dataspaces
      summary: Lock a dataspace (set to read-only)
      description: Sets a dataspace to be read-only, preventing further modifications.
      operationId: LockDataspace
      responses:
        '200':
          description: Dataspace successfully locked (set to read-only).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataspaceLockResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
    delete:
      tags:
        - Dataspaces
      summary: Unlock a dataspace (set to read-write)
      description: Sets a dataspace to be read-write, allowing modifications.
      operationId: UnlockDataspace
      responses:
        '200':
          description: Dataspace successfully unlocked (set to read-write).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataspaceLockResponse' # Assuming same response structure
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/resources:
    get:
      tags:
        - Resources
      summary: List resource types and their counts within a dataspace
      description: Lists the Energistics resource types present in the specified dataspace and the number of items for each type.
      operationId: ListResourceTypesInDataspace
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/SkipQueryParam'
        - $ref: '#/components/parameters/TopQueryParam'
      responses:
        '200':
          description: Successfully retrieved the list of resource types and counts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataspaceTypeListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/resources/all:
    get:
      tags:
        - Resources
      summary: List all resources within a dataspace
      description: Lists all Energistics resources in a specified dataspace. Output can be paginated and filtered.
      operationId: ListAllResourcesInDataspace
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/SkipQueryParam'
        - $ref: '#/components/parameters/TopQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/StoreLastWriteFilterQueryParam'
        - $ref: '#/components/parameters/DataObjectTypesQueryParam'
        - $ref: '#/components/parameters/CountObjectsQueryParam'
      responses:
        '200':
          description: Successfully retrieved the list of all resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/resources/{dataObjectType}:
    get:
      tags:
        - Resources
      summary: List resources of a specific type within a dataspace
      description: Lists all Energistics resources of a given type within a specified dataspace. Output can be paginated and filtered.
      operationId: ListResourcesByTypeInDataspace
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/DataObjectTypePathParam'
        - $ref: '#/components/parameters/SkipQueryParam'
        - $ref: '#/components/parameters/TopQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/StoreLastWriteFilterQueryParam'
        - $ref: '#/components/parameters/CountObjectsQueryParam'
      responses:
        '200':
          description: Successfully retrieved the list of resources for the specified type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/resources/{dataObjectType}/{guid}:
    get:
      tags:
        - Resources
      summary: Get the content of a specific data object
      description: Retrieves the actual content of a data object (e.g., RESQML, WITSML entity) in XML or JSON format.
      operationId: GetDataObjectContent
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/DataObjectTypePathParam'
        - $ref: '#/components/parameters/GuidPathParam'
        - $ref: '#/components/parameters/VersionQueryParam'
        - $ref: '#/components/parameters/FormatQueryParam'
        - $ref: '#/components/parameters/ArrayMetadataQueryParam'
        - $ref: '#/components/parameters/ArrayValuesQueryParam'
        - $ref: '#/components/parameters/ReferencedContentQueryParam'
      responses:
        '200':
          description: Successfully retrieved the data object content.
          content:
            application/json: # Default format
              schema:
                $ref: '#/components/schemas/DataObjectContentResponse'
            application/x-resqml+xml: # Example for XML, other Energistics types might have different media types
              schema:
                type: string
                format: xml # Indicate it's XML content
                example: "<resqmlDataObject>...</resqmlDataObject>"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/resources/{dataObjectType}/{guid}/arrays:
    get:
      tags:
        - Resources
      summary: Get metadata for all arrays referenced by a data object
      description: Retrieves metadata (type and dimensions) for all arrays referenced by a specific data object.
      operationId: GetAllArrayMetadataForObject
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/DataObjectTypePathParam'
        - $ref: '#/components/parameters/GuidPathParam'
        - $ref: '#/components/parameters/VersionQueryParam'
      responses:
        '200':
          description: Successfully retrieved metadata for all arrays.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayMetadataListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/resources/{dataObjectType}/{guid}/arrays/{pathInResource}:
    get:
      tags:
        - Resources
      summary: Get the content of a specific array or its slice
      description: "Retrieves the content of a specific array, identified by its path within a data object. Supports slicing for large arrays. Note that `starts` and `counts` must be used together or not at all."
      operationId: GetArrayContent
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/DataObjectTypePathParam' # Path parameter for the container object type
        - $ref: '#/components/parameters/GuidPathParam' # Path parameter for the container object GUID
        - $ref: '#/components/parameters/PathInResourcePathParam'
        - $ref: '#/components/parameters/VersionQueryParam' # For the container object
        - $ref: '#/components/parameters/StartsQueryParam'
        - $ref: '#/components/parameters/CountsQueryParam'
        - $ref: '#/components/parameters/FormatQueryParam' # For array data format (json/base64)
      responses:
        '200':
          description: Successfully retrieved the array content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayContentResponse'
        '400': # Specific error for inconsistent starts/counts
          description: Invalid request, e.g., `starts` and `counts` dimensions do not match array dimensions or are used inconsistently.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel' # Or ErrorDetails if preferred
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/resources/{dataObjectType}/{guid}/arrays/{pathInResource}/metadata:
    get:
      tags:
        - Resources
      summary: Get metadata for a specific array
      description: Retrieves metadata (type and dimensions) for a specific array identified by its path within a data object.
      operationId: GetSpecificArrayMetadata
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/DataObjectTypePathParam' # Path parameter for the container object type
        - $ref: '#/components/parameters/GuidPathParam' # Path parameter for the container object GUID
        - $ref: '#/components/parameters/PathInResourcePathParam'
        - $ref: '#/components/parameters/VersionQueryParam' # For the container object
      responses:
        '200':
          description: Successfully retrieved array metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleArrayMetadataResponse' # Using a single object response
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/resources/{dataObjectType}/{guid}/sources: # Original path, same as graph sources
    get:
      tags:
        - Resources
      summary: List resources that are sources to a given resource (alternative to graph)
      description: Lists all resources that reference a specific target resource. Output can be paginated and filtered. (This seems to duplicate graph functionality).
      operationId: ListSourceResources # Differentiating from GraphSourceResources
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/DataObjectTypePathParam'
        - $ref: '#/components/parameters/GuidPathParam'
        - $ref: '#/components/parameters/VersionQueryParam'
        - $ref: '#/components/parameters/SkipQueryParam'
        - $ref: '#/components/parameters/TopQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/StoreLastWriteFilterQueryParam'
        - $ref: '#/components/parameters/DataObjectTypesQueryParam'
        - $ref: '#/components/parameters/DepthQueryParam' # Kept from original
        - $ref: '#/components/parameters/IncludeSecondaryTargetsQueryParam' # Kept from original
        - $ref: '#/components/parameters/CountObjectsQueryParam'
      responses:
        '200':
          description: Successfully retrieved the list of source resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /dataspaces/{dataspaceId}/resources/{dataObjectType}/{guid}/targets: # Original path, same as graph targets
    get:
      tags:
        - Resources
      summary: List resources that are targets of a given resource (alternative to graph)
      description: Lists all resources referenced by a specific source resource. Output can be paginated and filtered. (This seems to duplicate graph functionality).
      operationId: ListTargetResources # Differentiating from GraphTargetResources
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
        - $ref: '#/components/parameters/DataspaceIdPathParam'
        - $ref: '#/components/parameters/DataObjectTypePathParam'
        - $ref: '#/components/parameters/GuidPathParam'
        - $ref: '#/components/parameters/VersionQueryParam'
        - $ref: '#/components/parameters/SkipQueryParam'
        - $ref: '#/components/parameters/TopQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/StoreLastWriteFilterQueryParam'
        - $ref: '#/components/parameters/DataObjectTypesQueryParam'
        - $ref: '#/components/parameters/DepthQueryParam' # Kept from original
        - $ref: '#/components/parameters/IncludeSecondarySourcesQueryParam' # Kept from original
        - $ref: '#/components/parameters/CountObjectsQueryParam'
      responses:
        '200':
          description: Successfully retrieved the list of target resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []
  /health/info:
    get:
      tags:
        - Health
      summary: Get service health and build information
      description: Used to check server availability and retrieve build information. Can be used by orchestrators for service health monitoring.
      operationId: GetHealthInfo
      responses:
        '200':
          description: Successfully retrieved health and build information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealthInfoResponse' # Using a more specific response
        '404':
          $ref: '#/components/responses/NotFoundError' # If the info endpoint itself isn't found
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security: [] # Public endpoint
  /manifests/build:
    post:
      tags:
        - Manifests
      summary: Create an OSDU manifest from specified Energistics resources
      description: Generates an OSDU manifest document based on a list of Energistics resource URIs and other input parameters.
      operationId: BuildOsduManifest
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeaderInternal'
      requestBody:
        description: Input parameters for building the OSDU manifest.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManifestInputDto'
      responses:
        '200': # Or 201 if a manifest resource is created
          description: Successfully built the OSDU manifest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestResponse' # Using a more specific response
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError' # If some input URIs are not found
        '406':
          $ref: '#/components/responses/NotAcceptableError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerErrorRDM'
        default:
          $ref: '#/components/responses/DefaultErrorRDM'
      security:
        - access-token: []

  # === Petrel DMS Endpoints (copied from previous file, paths are different) ===
  /api/petreldms/v1/projects/{projectId}:
    parameters:
      - $ref: '#/components/parameters/DataPartitionIdHeaderPetrel' # Using Petrel specific header ref
      - $ref: '#/components/parameters/AuthorizationHeaderPetrel' # Using Petrel specific header ref
      - $ref: '#/components/parameters/ProjectIdPathParamPetrel' # Using Petrel specific path ref
    get:
      tags:
        - Projects
      summary: Get a specific Petrel project record by its ID
      description: Retrieves the metadata record for a single Petrel project.
      operationId: GetPetrelProjectById
      parameters:
        - $ref: '#/components/parameters/AttributeQueryParamPetrel'
      responses:
        '200':
          description: The project metadata was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OsduRecord' # From Petrel DMS file
        '400':
          $ref: '#/components/responses/BadRequestPetrel'
        '403':
          $ref: '#/components/responses/ForbiddenPetrel'
        '404':
          $ref: '#/components/responses/NotFoundPetrel'
      security: # Petrel DMS specific security
        - login: ["963f2cc6915e479fa0fcb73ec2ec90e7", "openid"]
        - manual: []
    patch:
      tags:
        - Projects
      summary: Update specific properties of a Petrel project
      description: Partially updates a Petrel project's properties using a set of field operations.
      operationId: PatchPetrelProjectById
      requestBody:
        description: The patch operations to apply to the project.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPatchRequest' # From Petrel DMS file
      responses:
        '200':
          description: The project was successfully updated.
        '400':
          $ref: '#/components/responses/BadRequestPetrel'
        '403':
          $ref: '#/components/responses/ForbiddenPetrel'
        '404':
          $ref: '#/components/responses/NotFoundPetrel'
      security:
        - login: ["963f2cc6915e479fa0fcb73ec2ec90e7", "openid"]
        - manual: []
    post:
      tags:
        - Projects
      summary: Delete specific records within a Petrel project
      description: Deletes specified records within a Petrel project.
      operationId: DeletePetrelProjectRecordsById
      requestBody:
        description: An array of record identifiers to be deleted.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: The specified records were successfully deleted.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/BadRequestPetrel'
        '403':
          $ref: '#/components/responses/ForbiddenPetrel' # Original had ErrorDetails here
        '404':
          description: The project or some records do not exist. # Original had no content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
      security:
        - login: ["963f2cc6915e479fa0fcb73ec2ec90e7", "openid"]
        - manual: []
  /api/petreldms/v1/projects/{projectId}/download:
    parameters:
      - $ref: '#/components/parameters/DataPartitionIdHeaderPetrel'
      - $ref: '#/components/parameters/AuthorizationHeaderPetrel'
      - $ref: '#/components/parameters/ProjectIdPathParamPetrel'
    get:
      tags:
        - Projects
      summary: Get a download URL for a specific Petrel project
      description: Generates a time-limited signed URL for downloading Petrel project data.
      operationId: GetPetrelProjectDownloadUrl
      responses:
        '200':
          description: The project download URL was successfully generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDownloadResponse' # From Petrel DMS file
        '400':
          $ref: '#/components/responses/BadRequestPetrel'
        '403':
          $ref: '#/components/responses/ForbiddenPetrel'
        '404':
          $ref: '#/components/responses/NotFoundPetrel'
      security:
        - login: ["963f2cc6915e479fa0fcb73ec2ec90e7", "openid"]
        - manual: []
  /api/petreldms/v1/projects/{projectId}/update:
    parameters:
      - $ref: '#/components/parameters/DataPartitionIdHeaderPetrel'
      - $ref: '#/components/parameters/AuthorizationHeaderPetrel'
      - $ref: '#/components/parameters/ProjectIdPathParamPetrel'
    put:
      tags:
        - Projects
      summary: Update an entire Petrel project
      description: Updates an existing Petrel project, typically involving replacement of data or metadata.
      operationId: UpdatePetrelProjectById
      requestBody:
        description: The project update request.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest' # From Petrel DMS file
      responses:
        '201':
          description: The project was successfully updated or created.
        '400':
          $ref: '#/components/responses/BadRequestPetrel'
        '403':
          $ref: '#/components/responses/ForbiddenPetrel'
        '404':
          $ref: '#/components/responses/NotFoundPetrel'
      security:
        - login: ["963f2cc6915e479fa0fcb73ec2ec90e7", "openid"]
        - manual: []
  /api/petreldms/v1/projects/{projectId}/upload:
    parameters:
      - $ref: '#/components/parameters/DataPartitionIdHeaderPetrel'
      - $ref: '#/components/parameters/AuthorizationHeaderPetrel'
      - $ref: '#/components/parameters/ProjectIdPathParamPetrel'
    post:
      tags:
        - Projects
      summary: Get upload and download URLs for a Petrel project
      description: Generates signed URLs for uploading data to and downloading data from a Petrel project.
      operationId: GetPetrelProjectUploadAndDownloadUrls
      responses:
        '200':
          description: The project upload/download URLs were successfully generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUploadResponse' # From Petrel DMS file
        '400':
          $ref: '#/components/responses/BadRequestPetrel'
        '403':
          $ref: '#/components/responses/ForbiddenPetrel' # Original had ErrorDetails here
        '404':
          description: The project does not exist. # Original had no content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
      security:
        - login: ["963f2cc6915e479fa0fcb73ec2ec90e7", "openid"]
        - manual: []
  /api/petreldms/v1/projects/{projectId}/versions/{versionId}:
    parameters:
      - $ref: '#/components/parameters/DataPartitionIdHeaderPetrel'
      - $ref: '#/components/parameters/AuthorizationHeaderPetrel'
      - $ref: '#/components/parameters/ProjectIdPathParamPetrel'
      - $ref: '#/components/parameters/VersionIdPathParamPetrel' # Using Petrel specific path ref
    get:
      tags:
        - Projects
      summary: Get a specific version of a Petrel project record
      description: Retrieves a specific version of a Petrel project's metadata record.
      operationId: GetPetrelProjectVersionById
      parameters:
        - $ref: '#/components/parameters/AttributeQueryParamPetrel'
      responses:
        '200':
          description: The project version metadata was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OsduRecord' # From Petrel DMS file
        '400':
          $ref: '#/components/responses/BadRequestPetrel'
        '403':
          $ref: '#/components/responses/ForbiddenPetrel'
        '404':
          $ref: '#/components/responses/NotFoundPetrel'
      security:
        - login: ["963f2cc6915e479fa0fcb73ec2ec90e7", "openid"]
        - manual: []

components:
  schemas:
    # === Reservoir DMS Schemas ===
    DataspaceDto:
      type: object
      description: Details of a dataspace.
      required:
        - uri
        - path
        - storeCreated
        - storeLastWrite
      properties:
        uri:
          type: string
          format: uri
          pattern: ^(?:eml:\/\/\/|^eml:\/\/\/dataspace\('[^'"]*?(?:''[^'"]*?)*'\))$
          example: "eml:///dataspace('demo/Volve')"
          maxLength: 2048
          description: The unique URI of the dataspace.
        path:
          type: string
          pattern: ^[^\r\n'"]+$
          example: "demo/Volve"
          maxLength: 2048
          description: The path identifier of the dataspace.
        storeCreated:
          type: string
          format: date-time
          pattern: ^((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:.\d+)?))(Z|[+-]\d{2}:\d{2})?)$
          example: '2021-07-14T10:22:07.228Z'
          maxLength: 2048
          description: Timestamp of when the dataspace was created in the store.
        storeLastWrite:
          type: string
          format: date-time
          pattern: ^((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:.\d+)?))(Z|[+-]\d{2}:\d{2})?)$
          example: '2021-09-06T16:06:31.000Z'
          maxLength: 2048
          description: Timestamp of the last write operation to the dataspace.
        customData:
          type: object
          additionalProperties: # Corrected from string to boolean/object based on typical usage
            type: string # Or more specific if known, original had pattern: ^[a-zA-Z0-9 ]*$
            maxLength: 2048
          description: Extra metadata associated with the dataspace.
          example: {"ProjectLead": "Jane Doe", "Region": "North Sea"}
          nullable: true
    DataspaceListResponse:
      type: array
      description: A list of available dataspaces.
      items:
        $ref: '#/components/schemas/DataspaceDto'
      maxItems: 256 # From original
    ResourceItem:
      type: object
      description: Represents a single resource within a dataspace.
      required:
        - uri
        - name
        - lastChanged
        - storeCreated
        - storeLastWrite
      properties:
        uri:
          type: string
          format: uri
          pattern: ^(?:eml:\/\/\/|^eml:\/\/\/dataspace\('[^'"]*?(?:''[^'"]*?)*'\)\/?)(witsml|resqml|prodml|eml)[1-9]\d\.\w+(?:\((?:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|uuid=[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12},version='[^']*?(?:''[^']*?)*')\))?$
          example: "eml:///dataspace('demo/Volve')/resqml20.obj_TriangulatedSetRepresentation(a3f31b20-c93a-4682-8f6c-71be087202a4)"
          maxLength: 2048
          description: Unique URI of the resource.
        name:
          type: string
          pattern: ^[^\r\n]+$
          example: "Depth_Hugin_Fm_Top_t"
          maxLength: 2048
          description: User-friendly title or name of the resource.
        lastChanged:
          type: string
          format: date-time
          example: '2021-09-06T16:06:31.000Z'
          maxLength: 2048
          description: Timestamp of the last modification to the resource.
        storeCreated:
          type: string
          format: date-time
          example: '2021-09-14T20:25:17.128Z'
          maxLength: 2048
          description: Timestamp of when the resource was first created in the store.
        storeLastWrite:
          type: string
          format: date-time
          example: '2021-09-14T20:26:16.128Z'
          maxLength: 2048
          description: Timestamp of the last write operation for this resource in the store.
        activeStatus:
          type: string
          enum: [Active, Inactive]
          example: Active
          description: Indicates if the resource is currently active or inactive.
          nullable: true
        alternateUris:
          type: array
          items:
            type: string
            format: uri
            pattern: ^(?<protocol>(?:[^:]+)s?)?:\/\/(?:(?<user>[^:\n\r]+):(?<pass>[^@\n\r]+)@)?(?<host>(?:www\.)?(?:[^:\/\n\r]+))(?::(?<port>\d+))?\/?(?<request>[^?#\n\r]+)?\??(?<query>[^#\n\r]*)?\#?(?<anchor>[^\n\r]*)?$
            maxLength: 2048
          maxItems: 100000
          description: List of alternative URIs for the resource.
          nullable: true
        customData:
          type: object
          additionalProperties:
            type: string
            pattern: ^[a-zA-Z0-9 ]*$ # From original
            maxLength: 2048
          description: Extra metadata associated with the resource.
          example: {"QualityCheck": "Passed", "Reviewer": "JohnSmith"}
          nullable: true
        sourceCount:
          type: number # Was integer in original, but number allows for more flexibility if needed
          format: integer
          minimum: 0
          maximum: 1000000
          description: Number of other resources that reference this resource.
          example: 5
          nullable: true
        targetCount:
          type: number # Was integer
          format: integer
          minimum: 0
          maximum: 1000000
          description: Number of other resources that this resource references.
          example: 2
          nullable: true
    ResourceListResponse:
      type: array
      description: A list of resources.
      items:
        $ref: '#/components/schemas/ResourceItem'
      maxItems: 256 # From original
    DataspaceTypeItem:
      type: object
      description: Represents a type of resource within a dataspace and its count.
      required:
        - name
        - count
      properties:
        name:
          type: string
          pattern: ^(?<domainFamily>resqml|eml|witsml|prodml)(?<domainVersion>\d+).(?<dataType>(obj_)?\w+)$
          example: "resqml20.obj_TriangulatedSetRepresentation"
          maxLength: 2048
          description: The Energistics data object type name.
        count:
          type: number # Was integer
          format: integer
          minimum: 1
          maximum: 1000000
          example: 15
          description: The number of resources of this type in the dataspace.
    DataspaceTypeListResponse:
      type: array
      description: A list of resource types and their counts within a dataspace.
      items:
        $ref: '#/components/schemas/DataspaceTypeItem'
      maxItems: 256 # From original
    DataObjectContentItem: # For GET /dataspaces/{dataspaceId}/resources/{dataObjectType}/{guid}
      type: object
      description: Content of a single data object.
      required:
        - Uuid
        - $type # Schema type identifier
        - SchemaVersion
        - Citation
      properties:
        $type: # Using $type as it's common for type discriminators in JSON
          type: string
          pattern: ^(?<domainFamily>resqml|eml|witsml|prodml)(?<domainVersion>\d+).(?<dataType>(obj_)?\w+)$
          example: "eml20.obj_EpcExternalPartReference"
          maxLength: 2048
          description: EML (Energistics Markup Language) data object type.
        Uuid:
          type: string
          pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
          example: "68f2a7d4-f7c1-4a75-95e9-3c6a7029fb23"
          maxLength: 2048
          description: Unique identifier of the object.
        SchemaVersion:
          type: string
          pattern: ^"?[.0-9]+"?$ # Allows optional quotes
          example: "\"2.0.0.20140822\""
          maxLength: 2048
          description: EML schema version of the object.
        Citation:
          type: object
          properties:
            Title:
              type: string
              pattern: ^[^\r\n]+$
              example: "My Grid Representation"
              maxLength: 2048
              description: User-friendly name or title of the object.
            Originator:
              type: string
              pattern: ^[^\r\n]+$
              example: "GeoProcessorApp"
              maxLength: 2048
              description: Creator or originating system of the object.
            Creation:
              type: string
              # format: date-time # Prefer pattern if specific format needed
              pattern: ^((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:.\d+)?))(Z|[+-]\d{2}:\d{2})?)$
              example: '2022-01-12T07:22:00Z'
              maxLength: 2048
              description: Creation timestamp of the object.
            Format:
              type: string
              pattern: ^[^\r\n]+$
              example: "[Vendor:Software:version]"
              maxLength: 2048
              description: Software or format that produced the object.
          nullable: true
        # ... other common Energistics fields can be added here
        # The rest of the properties are dynamic based on the object type
        additionalProperties: true # To allow for specific Energistics object properties
    DataObjectContentResponse:
      type: array # Original spec had this as an array
      description: Content of a data object, potentially an array if multiple parts or always wrapped.
      items:
        $ref: '#/components/schemas/DataObjectContentItem'
      maxItems: 256 # From original
    ArrayIdentifier:
      type: object
      description: Identifiers for an array within a resource.
      properties:
        uri:
          type: string
          format: uri
          pattern: ^(?<protocol>(?:[^:]+)s?)?:\/\/(?:(?<user>[^:\n\r]+):(?<pass>[^@\n\r]+)@)?(?<host>(?:www\.)?(?:[^:\/\n\r]+))(?::(?<port>\d+))?\/?(?<request>[^?#\n\r]+)?\??(?<query>[^#\n\r]*)?\#?(?<anchor>[^\n\r]*)?$
          example: "eml:///dataspace('demo%2FVolve')/eml20.obj_EpcExternalPartReference('53395ada-6f93-4bac-b506-d45997ded2a2')"
          maxLength: 2048
          description: URI of the array container (e.g., EpcExternalPartReference).
        pathInResource:
          type: string
          pattern: ^(\/?[\w-]+)+$
          example: "/RESQML/a3f31b20-c93a-4682-8f6c-71be087202a4/points_patch0"
          maxLength: 2048
          description: Path identifier of the array within its container resource.
    ArrayMetadataItem:
      type: object
      description: Metadata for a single array.
      required:
        - uid
      properties:
        uid:
          $ref: '#/components/schemas/ArrayIdentifier'
        dimensions:
          type: array
          items:
            type: integer # Was number
            format: int32
            minimum: 1
            maximum: 1000000
          example: [100, 120, 130]
          maxItems: 1000
          description: Number of items in each dimension of the array.
          nullable: true
        arrayType: # Energistics HDF5 data types
          type: string
          enum:
            - Int8Array
            - Uint8Array
            - Int16Array
            - Uint16Array
            - Int32Array
            - Uint32Array
            - BigInt64Array # JavaScript BigInt64Array
            - BigUint64Array # JavaScript BigUint64Array
            - Float32Array
            - Float64Array
          example: Float32Array
          description: The data type of the array elements.
          nullable: true
        preferredSubarrayDimensions:
          type: array
          items:
            type: integer # Was number
            format: int32
            minimum: 1
            maximum: 1000000
          example: [100, 10, 1]
          maxItems: 1000
          description: Recommended slice dimensions for efficient access.
          nullable: true
        storeLastWrite:
          type: string
          format: date-time
          example: '2021-09-06T16:06:31.000Z'
          maxLength: 2048
          description: Timestamp of the last write to the store for this array.
          nullable: true
        customData:
          type: object
          additionalProperties:
            type: string
            pattern: ^[a-zA-Z0-9 ]*$ # From original
            maxLength: 2048
          description: Extra metadata associated with the array.
          example: {"Unit": "meters", "NullValue": -999.25}
          nullable: true
    ArrayMetadataListResponse:
      type: array
      description: A list of array metadata.
      items:
        $ref: '#/components/schemas/ArrayMetadataItem'
      maxItems: 256 # From original
    SingleArrayMetadataResponse: # For GET .../arrays/{pathInResource}/metadata
        $ref: '#/components/schemas/ArrayMetadataItem'
    ArrayContentData:
      type: object
      description: Contains the actual array data and its dimensions.
      properties:
        dimensions:
          type: array
          items:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000000
          maxItems: 1000
          description: Number of items in each dimension of the returned (potentially sliced) array data.
          example: [10, 10, 1]
          nullable: true
        data:
          oneOf:
            - type: string # For base64 encoded data
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              maxLength: 100000000 # From original
              description: Base64 encoded string of the array data.
            - type: array # For JSON array of numbers
              items:
                type: number
                minimum: -1000000000 # From original
                maximum: 1000000000 # From original
              maxItems: 100000000 # From original
              description: Array of numerical data.
            - type: array # For JSON array of booleans
              items:
                type: boolean
              maxItems: 100000000 # From original
              description: Array of boolean data.
            - type: array # For JSON array of strings
              items:
                type: string
                pattern: ^.*$ # From original
                maxLength: 100000000 # From original
              maxItems: 100000000 # From original
              description: Array of string data.
          description: The array data, either as a JSON array or a base64 encoded string, depending on the 'format' query parameter.
          example: [1.0, 2.5, 3.7] # Example for JSON numbers
    ArrayContentResponse:
      type: object
      description: Response containing the content of an array or its slice.
      required:
        - uid
      properties:
        uid:
          $ref: '#/components/schemas/ArrayIdentifier'
        data:
          $ref: '#/components/schemas/ArrayContentData'
          nullable: true
    DataspaceLockResponse:
      type: object
      description: Response indicating the success of a lock or unlock operation on a dataspace.
      properties:
        locked:
          type: boolean
          description: True if the dataspace is now locked (read-only), false if unlocked (read-write).
          example: true
    ServiceHealthInfoResponse: # For /health/info
      type: object
      description: Health and build information for the service.
      required:
        - groupId
        - artifactId
        - version
        - commitId
        - commitTime
        - buildTime
      properties:
        groupId:
          type: string
          pattern: ^[0-9a-zA-Z.]+$
          example: "org.opengroup.osdu"
          maxLength: 2048
        artifactId:
          type: string
          pattern: ^[0-9a-zA-Z@\-/]+$
          example: "@osdu/reservoir-ddms"
          maxLength: 2048
        version:
          type: string
          pattern: ^[0-9.]+$
          example: "1.1.0"
          maxLength: 2048
        commitId:
          type: string
          pattern: ^[0-9a-fA-F]+$
          example: "a1b2c3d4e5f6g7h8i9j0"
          maxLength: 2048
        commitTime:
          type: string
          # format: date-time # Original pattern is more flexible
          pattern: ^[0-9a-zA-Z \-:]+$
          example: "2023-07-24 20:53:33 -0500"
          maxLength: 2048
        buildTime:
          type: string
          # format: date-time
          pattern: ^[0-9a-zA-Z \-:]+$
          example: "2023-07-24 20:55:00 -0500"
          maxLength: 2048
    ManifestItem: # Schema for items in the manifest response array
      type: object
      description: Represents a single OSDU manifest record.
      required:
        - kind
      properties:
        kind:
          type: string
          pattern: osdu:wks:Manifest:1.0.0 # Specific kind for manifest
          example: "osdu:wks:Manifest:1.0.0"
          maxLength: 2048
          description: OSDU kind identifier for the manifest record.
        # ... other standard OSDU record fields like id, acl, legal, data would go here ...
        # For brevity, only 'kind' is shown from original example.
        # A full manifest would include data about the resource, its associations, files, etc.
        data:
          type: object
          additionalProperties: true
          example:
            ResourceID: "eml:///dataspace('demo/Volve')/resqml20.obj_TriangulatedSetRepresentation(a3f3...)"
            ResourceTypeID: "srn:type:TriangulatedSetRepresentation"
            ResourceSecurityClassification: "srn:reference-data/ResourceSecurityClassification:Restricted:"
            # ... and many other manifest-specific fields
      # Other standard OSDU record fields (id, acl, legal, data, etc.) would be here.
    ManifestResponse:
      type: array
      description: An array of OSDU manifest records.
      items:
        $ref: '#/components/schemas/ManifestItem'
      maxItems: 256 # From original

    # === Schemas copied from Petrel DMS file for its specific endpoints ===
    # These are kept separate to avoid conflict if definitions differ slightly.
    # In a truly unified API, these would be consolidated.
    ErrorDetails: # From Petrel DMS file
      type: object
      additionalProperties: false
      properties:
        statusCode:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          nullable: true
          example: "Invalid project ID format."
        details:
          type: string
          nullable: true
          example: "Project ID must be a valid GUID."
        correlationId:
          type: string
          nullable: true
          example: "b3a9c2d0-7e9a-4b8c-8f2e-1d5a9c0b3e4d"
        error:
          nullable: true
          type: object
          example: {"code": "VALIDATION_ERROR"}
        errorId:
          type: string
          nullable: true
          example: "ERR-PROJECT-001"
    FieldOperation: # From Petrel DMS file
      type: object
      additionalProperties: false
      description: Represents a single operation on a field.
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          example: "data.Description"
        value:
          nullable: true
          example: "Updated project description."
    OsduAcl: # From Petrel DMS file
      type: object
      additionalProperties: false
      description: OSDU Access Control List.
      properties:
        owners:
          type: array
          items:
            type: string
            format: email
            example: "data.default.owners@opendes.contoso.com"
          nullable: true
        viewers:
          type: array
          items:
            type: string
            format: email
            example: "data.default.viewers@opendes.contoso.com"
          nullable: true
    OsduLegalTag: # From Petrel DMS file
      type: object
      additionalProperties: false
      description: OSDU Legal Tags.
      properties:
        legaltags:
          type: array
          items:
            type: string
            example: "opendes-public-usa-dataset"
          nullable: true
        otherRelevantDataCountries:
          type: array
          items:
            type: string
            example: "US"
          nullable: true
    OsduRecord: # From Petrel DMS file
      type: object
      additionalProperties: false
      description: Represents a generic OSDU record structure.
      properties:
        id:
          type: string
          # default: '' # Defaults are unusual in request/response schemas
          nullable: true
          example: "opendes:master-data--PetrelProject:myProject123"
        version:
          type: integer # Assuming numeric version for OSDU records
          format: int64
          # default: '' # Default '' for string is problematic; nullable is better
          nullable: true
          example: 1621350254300957
        kind:
          type: string
          # default: ''
          nullable: true
          example: "opendes:wks:master-data--PetrelProject:1.0.0"
        acl:
          $ref: '#/components/schemas/OsduAcl' # Refers to Petrel's OsduAcl
        legal:
          $ref: '#/components/schemas/OsduLegalTag' # Refers to Petrel's OsduLegalTag
        data:
          type: object
          # default: null
          nullable: true
          additionalProperties: true
          example: {"ProjectName": "Alpha", "Details": "..."}
        meta:
          type: array
          items:
            type: object # Was empty {}
            additionalProperties: true
          nullable: true
        createUser:
          type: string
          # default: ''
          nullable: true
          readOnly: true
        createTime:
          type: string
          format: date-time # Added format
          # default: ''
          nullable: true
          readOnly: true
        modifyUser:
          type: string
          # default: ''
          nullable: true
          readOnly: true
        modifyTime:
          type: string
          format: date-time # Added format
          # default: ''
          nullable: true
          readOnly: true
    ProjectDownloadResponse: # From Petrel DMS file
      type: object
      additionalProperties: false
      properties:
        downloadUrl:
          type: string
          format: url
          nullable: true
          example: "https://storage.example.com/download/projectXYZ?token=abc"
        providerKey:
          type: string
          nullable: true
          readOnly: true
          example: "azure-blob"
    ProjectPatchRequest: # From Petrel DMS file
      type: object
      additionalProperties: false
      required:
      - id
      - fields
      properties:
        id:
          type: string
          minLength: 1
          example: "opendes:master-data--PetrelProject:myProject123"
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldOperation' # Refers to Petrel's FieldOperation
    ProjectUpdateRequest: # From Petrel DMS file
      type: object
      additionalProperties: false
      properties:
        records:
          type: array
          items:
            $ref: '#/components/schemas/OsduRecord' # Refers to Petrel's OsduRecord
          nullable: true
        signedUrl:
          type: string
          format: url
          nullable: true
          example: "https://storage.example.com/upload_package?token=xyz"
    ProjectUploadResponse: # From Petrel DMS file
      type: object
      additionalProperties: false
      properties:
        downloadUrl:
          type: string
          format: url
          nullable: true
          example: "https://storage.example.com/download/projectXYZ?token=abc"
        providerKey:
          type: string
          nullable: true
          readOnly: true
          example: "azure-blob"
        uploadUrl:
          type: string
          format: url
          nullable: true
          example: "https://storage.example.com/upload/projectXYZ?token=def"

    # === Schemas from Reservoir DMS (file being refactored) ===
    ACLDto: # Different from OsduAcl from Petrel DMS file
      type: object
      description: Access Control List for a dataspace or resource.
      required:
        - viewers
        - owners
      properties:
        owners:
          type: array
          description: List of groups or user emails with owner role.
          items:
            type: string
            format: email # Assuming email format
            pattern: ^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$
            maxLength: 2048
            example: "data.default.owners@opendes.contoso.com"
          maxItems: 99999
        viewers:
          type: array
          description: List of groups or user emails with viewer role.
          items:
            type: string
            format: email # Assuming email format
            pattern: ^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$
            maxLength: 2048
            example: "data.default.viewers@opendes.contoso.com"
          maxItems: 99999
    AcceptableUsageDto:
      type: object
      description: Defines acceptable usage context (workflow persona and usage type).
      properties:
        WorkflowPersonaTypeID: # Corrected name from WorkflowPersona
          type: string
          pattern: ^[\w\-\.]+:reference-data\-\-WorkflowPersonaType:[\w\-\.\:\%]+:[0-9]*$
          example: 'opendes:reference-data--WorkflowPersonaType:SeismicInterpreter:1'
          description: SRN of the workflow persona type.
          nullable: true
        WorkflowUsageTypeID: # Corrected name from WorkflowUsage
          type: string
          pattern: ^[\w\-\.]+:reference-data\-\-WorkflowUsageType:[\w\-\.\:\%]+:[0-9]*$
          example: 'opendes:reference-data--WorkflowUsageType:ProspectEvaluation:1'
          description: SRN of the workflow usage type.
          nullable: true
    ContactDto:
      type: object
      description: Contact information.
      properties:
        Name:
          type: string
          pattern: ^[a-zA-Z ]*$ # Allows only letters and spaces
          example: "John Doe"
          maxLength: 2048
          description: Name of the individual contact.
          nullable: true
        EmailAddress:
          type: string
          format: email
          pattern: ^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$
          example: "john.doe@example.com"
          maxLength: 2048
          description: Contact email address.
          nullable: true
        PhoneNumber:
          type: string
          pattern: '[0-9-]+' # Simple pattern for phone numbers
          example: "1-555-123-4567"
          maxLength: 2048
          description: Contact phone number.
          nullable: true
        OrganisationID:
          type: string
          pattern: ^[\w\-\.]+:master-data\-\-Organisation:[\w\-\.\:\%]+:[0-9]*$
          example: 'opendes:master-data--Organisation:ExampleCorp:1'
          maxLength: 2048
          description: SRN reference to the company/organisation.
          nullable: true
        RoleTypeID:
          type: string
          pattern: ^[\w\-\.]+:reference-data\-\-ContactRoleType:[\w\-\.\:\%]+:[0-9]*$
          example: 'opendes:reference-data--ContactRoleType:DataManager:1'
          maxLength: 2048
          description: SRN of the contact's role type.
          nullable: true
        DataGovernanceRoleTypeID:
          type: string
          pattern: ^[\w\-\.]+:reference-data\-\-DataGovernanceRoleType:[\w\-\.\:\%]+:[0-9]*$
          example: 'opendes:reference-data--DataGovernanceRoleType:Steward:1'
          maxLength: 2048
          description: SRN of the data governance role, if applicable.
          nullable: true
        WorkflowPersonaTypeID:
          type: string
          pattern: ^[\w\-\.]+:reference-data\-\-WorkflowPersonaType:[\w\-\.\:\%]+:[0-9]*$
          example: 'opendes:reference-data--WorkflowPersonaType:Geoscientist:1'
          maxLength: 2048
          description: SRN of the workflow persona type associated with this contact.
          nullable: true
    LegaltagsDto: # Different from OsduLegalTag from Petrel DMS file
      type: object
      description: Legal tags and relevant country information.
      required:
        - legaltags
        - otherRelevantDataCountries
      properties:
        legaltags:
          type: array
          description: List of legal tag names.
          items:
            type: string
            maxLength: 2048
            example: "opendes-confidential-data"
          maxItems: 99999
          minItems: 1
        otherRelevantDataCountries:
          type: array
          description: List of other relevant data countries (ISO 3166-1 alpha-2 codes).
          items:
            type: string
            pattern: ^[A-Z]{2}$
            maxLength: 2048 # MaxLength on item seems high for 2-char code
            example: "US"
          maxItems: 99999
          minItems: 1
    ManifestInputDto:
      type: object
      description: Input parameters for building an OSDU manifest.
      required:
        - uris # URIs are essential to build a manifest from
      properties:
        uris:
          type: array
          description: URIs of Energistics resources or dataspaces to include in the manifest.
          items:
            type: string
            format: uri # General URI format
            pattern: ^(?:eml:\/\/\/|^eml:\/\/\/dataspace\('[^'"]*?(?:''[^'"]*?)*'\)\/?)(witsml|resqml|prodml|eml)[1-9]\d\.\w+(?:\((?:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|uuid=[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12},version='[^']*?(?:''[^']*?)*')\))?$|^(?:eml:\/\/\/|^eml:\/\/\/dataspace\('[^'"]*?(?:''[^'"]*?)*'\))$
            maxLength: 2048
            example: "eml:///dataspace('demo/Volve')/resqml20.obj_TriangulatedSetRepresentation(a3f3...)"
          maxItems: 99999
          minItems: 1
        acl:
          allOf: # Using allOf to directly embed, or just $ref if preferred
            - $ref: '#/components/schemas/ACLDto'
          description: OSDU ACL to apply to the manifest and potentially its resources.
          nullable: true
        legal:
          allOf:
            - $ref: '#/components/schemas/LegaltagsDto'
          description: OSDU legal tags to apply.
          nullable: true
        tags:
          type: object
          additionalProperties:
            type: string # Assuming tag values are strings
          description: Additional tags to add to all resources in the manifest.
          example: {"Project": "VolveReimagined", "Status": "Preliminary"}
          nullable: true
        technicalAssurances:
          type: array
          items:
            $ref: '#/components/schemas/TechnicalAssuranceDto'
          maxItems: 1028
          description: List of technical assurance information to apply.
          nullable: true
        typePatterns:
          type: array
          description: Energistics type patterns to restrict resource search (accepts '*' and '.' wildcards).
          items:
            type: string
            pattern: ^[0-9a-zA-Z._*?]+$
            maxLength: 2048
            example: "resqml20.obj_HorizonInterpretation"
          maxItems: 99999
          nullable: true
        fileCollection:
          type: string
          pattern: ^[\w\-\.]+:dataset\-\-[\w\-\.]+:[\w\-\.\:\%]+$
          description: Reference to an OSDU FileCollection record if resources are also part of a file collection.
          example: 'opendes:dataset--FileCollection.Generic:myepcfilecollection:1'
          nullable: true
        createMissingReferences:
          type: boolean
          description: If true, create stub entries for references not currently in OSDU storage; otherwise, report them as errors.
          example: true
          default: false
          nullable: true
    TechnicalAssuranceDto:
      type: object
      description: Technical assurance information for a resource.
      required:
        - TechnicalAssuranceTypeID
      properties:
        TechnicalAssuranceTypeID:
          type: string
          pattern: ^[0-9a-zA-Z /(),.:]+$ # Relaxed pattern to include : from example
          example: 'opendes:reference-data--TechnicalAssuranceType:Certified:1'
          maxLength: 2048
          description: SRN of the technical assurance type.
        Comment:
          type: string
          # pattern: ^[\w\-\.]+:reference-data\-\-TechnicalAssuranceType:[\w\-\.\:\%]+:[0-9]*$ # Pattern seems incorrect for a comment
          example: "Verified by lead geophysicist on 2023-03-10."
          maxLength: 2048
          description: Additional context or comments supporting the assurance determination.
          nullable: true
        EffectiveDate:
          type: string
          format: date-time # Or just 'date' if time is not relevant
          pattern: ^((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:.\d+)?))(Z|[+-]\d{2}:\d{2})?)$
          example: '2023-03-10T00:00:00Z'
          maxLength: 2048
          description: Date when the technical assurance determination was made or became effective.
          nullable: true
        Reviewers:
          type: array
          items:
            $ref: '#/components/schemas/ContactDto'
          maxItems: 99999
          description: Individuals or roles that reviewed and determined the assurance value.
          nullable: true
        AcceptableUsage:
          type: array
          items:
            $ref: '#/components/schemas/AcceptableUsageDto'
          maxItems: 99999
          description: Contexts (workflows, personas) for which this assurance value is valid.
          nullable: true
        UnacceptableUsage:
          type: array
          items:
            $ref: '#/components/schemas/AcceptableUsageDto'
          maxItems: 99999
          description: Contexts for which this assurance value is NOT valid.
          nullable: true
    GenericErrorModel: # Simplified error model for Reservoir DMS
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: "InvalidInput"
          nullable: true
        message:
          type: string
          example: "The provided filter query is malformed."
          nullable: true
  securitySchemes:
    access-token: # Used by Reservoir DMS endpoints
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Standard JWT Bearer token for API authorization.
    # Petrel DMS security schemes (copied for completeness if these paths remain)
    login:
      type: oauth2
      description: OAuth2 Authorization Code flow.
      flows:
        authorizationCode:
          authorizationUrl: https://p4d.csi.cloud.slb-ds.com/v2/auth
          tokenUrl: https://p4d.csi.cloud.slb-ds.com/v2/token
          scopes: 
            963f2cc6915e479fa0fcb73ec2ec90e7: OSDU Client ID
            openid: User information
    manual:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Manual JWT Bearer token.
  parameters:
    # === Reservoir DMS Parameters ===
    DataPartitionIdHeaderInternal: # Differentiated for Reservoir DMS part
      name: data-partition-id # Standardized case
      in: header
      description: Identifier of the data partition to operate on for Reservoir DMS.
      required: true # Assuming always required for these specific endpoints
      schema:
        type: string
        pattern: '[A-Za-z0-9]+(-[A-Za-z0-9]+)*' # From original
        example: "opendes-reservoir-tenant"
        maxLength: 1048
    DataspaceIdPathParam:
      name: dataspaceId
      in: path
      description: Name of the dataspace (e.g., 'demo/Volve').
      required: true
      schema:
        type: string
        pattern: ^[^\/]+\/[^\/]+$ # From original
        example: "demo/Volve"
        maxLength: 2048
    DataObjectTypePathParam:
      name: dataObjectType
      in: path
      description: Energistics type of the data object (e.g., 'resqml20.obj_ContinuousProperty').
      required: true
      schema:
        type: string
        pattern: ^(?<domainFamily>resqml|eml|witsml|prodml)(?<domainVersion>\d+).(?<dataType>(obj_)?\w+)$ # From original
        example: "resqml20.obj_ContinuousProperty"
        maxLength: 2048
    GuidPathParam:
      name: guid
      in: path
      description: Unique identifier (GUID) of the data object.
      required: true
      schema:
        type: string
        format: uuid # Standard format for GUID
        pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$ # From original
        example: "1615d8d2-2a2d-482c-885e-14225b89e90c"
        maxLength: 2048 # Length seems high for a standard GUID
    PathInResourcePathParam:
      name: pathInResource
      in: path
      description: Identifier of the array within its container resource (e.g., HDF5 path).
      required: true
      schema:
        type: string
        pattern: ^(\/?[\w-]+)+$ # From original
        example: "/RESQML/a3f31b20-c93a-4682-8f6c-71be087202a4/points_patch0"
        maxLength: 2048
    VersionQueryParam:
      name: version
      in: query
      description: Optional version string of the data object.
      required: false
      schema:
        type: string
        pattern: ^[^']*?(?:''[^']*?)*$ # From original
        example: "1.0"
        maxLength: 2048
    SkipQueryParam:
      name: $skip
      in: query
      description: "ODATA Pagination: Index of the first item to return (0-based)."
      required: false
      schema:
        type: number # Was number in original, usually integer
        format: integer
        minimum: 0
        maximum: 100000
        example: 0
    TopQueryParam:
      name: $top
      in: query
      description: "ODATA Pagination: Maximum number of items to return per page.""
      required: false
      schema:
        type: number # Was number, usually integer
        format: integer
        minimum: 1
        maximum: 10000
        example: 100
    FilterQueryParam:
      name: $filter
      in: query
      description: ODATA filter expression using XPath-like syntax to filter results.
      required: false
      schema:
        type: string
        pattern: ^(?:(_data)|[0-9a-zA-Z /(),.]+|'.*')+$ # From original
        example: "contains(name, 'Horizon')"
        maxLength: 2048
    StoreLastWriteFilterQueryParam:
      name: storeLastWriteFilter
      in: query
      description: If present, only objects modified after this timestamp will be listed.
      required: false
      schema:
        type: string
        format: date-time
        pattern: ^((?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:.\d+)?))(Z|[+-]\d{2}:\d{2})?)$ # From original
        example: "2023-01-01T00:00:00Z"
        maxLength: 2048
    DataObjectTypesQueryParam:
      name: dataObjectTypes
      in: query
      description: If present, only objects with these types will be listed (comma-separated).
      required: false
      schema:
        type: string
        pattern: ^((witsml|resqml|prodml|eml)[1-9]\d\.(obj_)?\w+,?)*$ # From original
        example: "resqml20.obj_HorizonInterpretation,resqml20.obj_FaultInterpretation"
        maxLength: 8192
    CountObjectsQueryParam:
      name: countObjects
      in: query
      description: If true, compute and include source and target counts for each resource.
      required: false
      schema:
        type: boolean
        default: false
    FormatQueryParam: # For array content
      name: $format
      in: query
      description: Expected return format for array data.
      required: false
      schema:
        type: string
        enum: [json, xml, base64] # Added base64 from /arrays/{pathInResource}
        default: json
    ArrayMetadataQueryParam:
      name: arrayMetadata
      in: query
      description: If true, includes metadata of arrays (size, type) when retrieving data object content.
      required: false
      schema:
        type: boolean
        default: false
    ArrayValuesQueryParam:
      name: arrayValues
      in: query
      description: If true, includes the content of arrays when retrieving data object content.
      required: false
      schema:
        type: boolean
        default: false
    ReferencedContentQueryParam:
      name: referencedContent
      in: query
      description: If true, includes the content of referenced objects when retrieving data object content.
      required: false
      schema:
        type: boolean
        default: true # Default from original
    DepthQueryParam:
      name: depth
      in: query
      description: Number of recursive levels for graph traversals (sources/targets).
      required: false
      schema:
        type: number # Was integer
        format: integer
        minimum: 1
        maximum: 1000
        example: 2
    StartsQueryParam:
      name: starts
      in: query
      description: When selecting a subarray, comma-separated list of start indices for each dimension.
      required: false
      schema:
        type: array
        items:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000000
        maxItems: 1000
        example: [0,0,10] # Example: start at index 10 of the 3rd dimension
      style: form
      explode: false # Comma-separated: starts=0,0,10
    CountsQueryParam:
      name: counts
      in: query
      description: When selecting a subarray, comma-separated list of item counts for each dimension.
      required: false
      schema:
        type: array
        items:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000000
        maxItems: 1000
        example: [10,20,5] # Example: get 10 items in 1st dim, 20 in 2nd, 5 in 3rd
      style: form
      explode: false # Comma-separated: counts=10,20,5
    IncludeSecondaryTargetsQueryParam:
      name: includeSecondaryTargets
      in: query
      description: If true, include secondary targets in graph traversals.
      required: false
      schema:
        type: boolean
        default: false
        example: false
    IncludeSecondarySourcesQueryParam:
      name: includeSecondarySources
      in: query
      description: If true, include secondary sources in graph traversals.
      required: false
      schema:
        type: boolean
        default: false
        example: false

    # === Petrel DMS Parameters (copied from previous file for its specific endpoints) ===
    DataPartitionIdHeaderPetrel:
      name: Data-Partition-Id # Case from original Petrel DMS file
      in: header
      description: This value should be the desired data partition id for Petrel DMS.
      required: true
      schema:
        type: string
        example: "opendes-petrel-tenant"
    AuthorizationHeaderPetrel:
      name: Authorization
      in: header
      description: The auth token for Petrel DMS.
      required: true
      schema:
        type: string
    ProjectIdPathParamPetrel:
      name: projectId
      in: path
      description: The requested project identifier for Petrel DMS.
      required: true
      schema:
        type: string
        example: "petrel_project_abc"
    VersionIdPathParamPetrel:
      name: versionId
      in: path
      description: The requested version identifier for Petrel DMS.
      required: true
      schema:
        type: string
        example: "1672531200000" # Example timestamp as version
    AttributeQueryParamPetrel:
      name: attribute
      in: query
      description: 'Filter attributes to restrict the returned fields of the Petrel project record. Usage: data.{record-data-field-name}.'
      required: false
      schema:
        type: string
        example: "data.ProjectName"
  responses:
    # === Reservoir DMS Responses ===
    UnauthorizedError:
      description: Unauthorized. Authentication is required or has failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorModel'
    ForbiddenError:
      description: Forbidden. The authenticated user does not have permission for this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorModel'
    NotFoundError:
      description: Not Found. The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorModel'
    NotAcceptableError:
      description: Not Acceptable. The server cannot produce a response matching the list of acceptable values defined in the request's headers.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorModel'
    TooManyRequestsError:
      description: Too Many Requests. The client has sent too many requests in a given amount of time.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorModel'
    InternalServerErrorRDM: # Differentiated for Reservoir DMS specific errors
      description: Internal Server Error. An unexpected condition was encountered.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorModel'
    DefaultErrorRDM: # Default error for Reservoir DMS
      description: An unexpected error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorModel'

    # === Petrel DMS Responses (copied for its specific endpoints) ===
    BadRequestPetrel:
      description: The request is invalid (Petrel DMS).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetails' # Uses Petrel's ErrorDetails
    ForbiddenPetrel:
      description: You don't have permission to this project (Petrel DMS).
      content:
        application/json: # Added content for consistency
          schema:
            $ref: '#/components/schemas/ErrorDetails'
    NotFoundPetrel:
      description: The project does not exist (Petrel DMS).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetails'