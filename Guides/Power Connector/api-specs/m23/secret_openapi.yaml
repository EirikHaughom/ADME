openapi: 3.0.3
info:
  title: Azure Data Manager for Energy - Secret Service API
  version: v1.0.0
  description: >-
    The Secret Service API for Azure Data Manager for Energy facilitates the
    secure storage and retrieval of various types of secrets. It allows secrets
    to be managed separately from infrastructure repository secrets, enabling
    interfacing applications to handle them easily.
  contact:
    name: Microsoft Support
    email: support@microsoft.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://contoso.energy.azure.com/api/secret/v1
    description: Azure Data Manager for Energy - Contoso Environment (Secret Service v1)
tags:
  - name: Secret
    description: Endpoints for managing secrets.
  - name: Health
    description: Health check related endpoints.
  - name: Information
    description: Service information endpoint.
components:
  schemas:
    AppError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: The HTTP error code.
          example: 400
        message:
          type: string
          description: A human-readable error message.
          example: "Invalid input provided."
        reason:
          type: string
          description: A more specific reason for the error.
          example: "Secret name cannot be empty."
    Secret:
      type: object
      description: Represents a secret stored in the service.
      properties:
        id:
          type: string
          description: >-
            A system-generated unique identifier for the secret, often a full
            URI or path. This is read-only.
          example: "https://contoso-kv.vault.azure.net/secrets/my-api-key/version-guid"
          readOnly: true
        key:
          type: string
          description: >-
            The user-defined name of the secret. This is used to identify the
            secret in API paths (as secret_name).
          example: "my-api-key"
        value:
          type: string
          description: The actual secret content. This is write-only during creation/update, and readable on GET.
          example: "s3cr3tV@lu3"
          # writeOnly: true # Consider this if value shouldn't be in request for update if not changing
        enabled:
          type: boolean
          description: Indicates if the secret is currently active and usable.
          example: true
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the secret was created. This is read-only.
          example: "2023-01-15T10:30:00Z"
          readOnly: true
      # 'key' and 'value' are required for creation.
      # For updates, 'value' and/or 'enabled' might be provided.
      # For GET responses, all fields (except possibly 'value' in a list summary) would be present.
    SecretCreationPayload:
      type: object
      description: Payload for creating a new secret.
      properties:
        key:
          type: string
          description: The user-defined name for the secret.
          example: "database-connection-string"
        value:
          type: string
          description: The actual secret content.
          example: "Server=tcp:myserver.database.windows.net;User ID=admin;Password=complexPassword123;"
        enabled:
          type: boolean
          description: Whether the secret should be enabled upon creation. Defaults to true.
          default: true
          example: true
      required:
        - key
        - value
    SecretUpdatePayload:
      type: object
      description: Payload for updating an existing secret. Only provided fields will be updated.
      properties:
        value:
          type: string
          description: The new secret content.
          example: "Server=tcp:myupdatedserver.database.windows.net;User ID=admin;Password=newComplexPassword456;"
        enabled:
          type: boolean
          description: The new enabled status for the secret.
          example: false
    SecretMetadata: # For list operations where full secret value is not desired
      type: object
      description: Metadata about a secret, excluding its value.
      properties:
        id:
          type: string
          description: System-generated unique identifier for the secret.
          example: "https://contoso-kv.vault.azure.net/secrets/my-api-key/version-guid"
        key:
          type: string
          description: The user-defined name of the secret.
          example: "my-api-key"
        enabled:
          type: boolean
          description: Indicates if the secret is currently active and usable.
          example: true
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the secret was created.
          example: "2023-01-15T10:30:00Z"
    ConnectedOuterService:
      type: object
      properties:
        name:
          type: string
          example: "Azure Key Vault"
        version:
          type: string
          example: "2019-09-01"
    VersionInfo:
      type: object
      properties:
        version:
          type: string
          example: "1.0.0"
        commitId:
          type: string
          example: "abcdef1234567890"
        buildTime:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        branch:
          type: string
          example: "main"
        commitMessage:
          type: string
          example: "Initial release of Secret Service v1"
        groupId:
          type: string
          example: "com.contoso.energy"
        artifactId:
          type: string
          example: "secret-service"
        connectedOuterServices:
          type: array
          items:
            $ref: '#/components/schemas/ConnectedOuterService'

  parameters:
    DataPartitionIdHeader:
      name: data-partition-id
      in: header
      description: >-
        The identifier of the data partition to identify the instance of the
        data store. Often a tenant or account ID.
      required: true
      schema:
        type: string
      example: 'contoso-opendes'
    SecretNamePathParameter:
      name: secret_name
      in: path
      description: The user-defined name of the secret (its 'key').
      required: true
      schema:
        type: string
      example: "my-service-api-key"

  responses:
    AppErrorResponse:
      description: An error occurred. Specific error code and message will be in the response body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    UnauthorizedError:
      description: Unauthorized. The client has not provided valid authentication credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    ForbiddenError:
      description: Forbidden. The client is authenticated but does not have permission to perform this action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    NotFoundError:
      description: Not Found. The requested secret could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    BadRequestError:
      description: Bad Request. The server cannot or will not process the request due to something that is perceived to be a client error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    InternalServerError:
      description: Internal Server Error. The server encountered an unexpected condition that prevented it from fulfilling the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    BadGatewayError:
      description: Bad Gateway. The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    ServiceUnavailableError:
      description: Service Unavailable. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    NoContentResponse:
      description: No Content. The operation was successful and there is no content to return.

  securitySchemes:
    oAuth2AuthCode:
      type: oauth2
      description: OAuth2 authentication using Authorization Code flow with Azure AD.
      flows:
        authorizationCode:
          authorizationUrl: https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/authorize
          tokenUrl: https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token
          scopes:
            'api://contoso.energy.azure.com/data.read': Read access to data, including secrets.
            'api://contoso.energy.azure.com/data.write': Write access to data, including creating/updating secrets.
            # 'api://contoso.energy.azure.com/Secrets.Read': More granular scope for reading secrets
            # 'api://contoso.energy.azure.com/Secrets.Write': More granular scope for writing secrets
security:
  - oAuth2AuthCode:
      - 'api://contoso.energy.azure.com/data.read' # Default to broader scopes
      - 'api://contoso.energy.azure.com/data.write'

paths:
  /health:
    get:
      tags:
        - Health
      summary: Get Service Liveness Status
      description: >-
        Provides a liveness check for the Secret service. Indicates if the
        service is running and responsive. This is a public endpoint and does not require authentication.
      operationId: GetHealthLiveness
      security: [] # Public endpoint
      responses:
        '200':
          description: Secret service is alive and responsive.
          content:
            text/plain:
              schema:
                type: string
                example: "Secret service is alive"
        default:
          description: Unexpected error during liveness check.
          content:
            text/plain:
              schema:
                type: string

  /info:
    get:
      tags:
        - Information
      summary: Get Service Version Information
      description: >-
        Provides build and git related information about the deployed service.
        This is a public endpoint and does not require authentication.
      operationId: GetInformation
      security: [] # Public endpoint
      responses:
        '200':
          description: Successfully retrieved version information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
        default:
          $ref: '#/components/responses/AppErrorResponse' # Assuming errors here could be JSON

  /secrets:
    get:
      tags:
        - Secret
      summary: List Metadata of All Secrets (Deprecated)
      description: >-
        **Warning: This operation is deprecated.** Retrieves a list of metadata
        for all secrets accessible by the caller. Does not return secret values.
        Consider alternative methods for discovering secrets if available.
      operationId: ListSecretsMetadata
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      responses:
        '200':
          description: A list of secret metadata.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecretMetadata'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        default:
          $ref: '#/components/responses/AppErrorResponse'
    post:
      tags:
        - Secret
      summary: Create a New Secret
      description: Creates a new secret in the repository.
      operationId: CreateSecret
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: The secret to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretCreationPayload'
      responses:
        '201':
          description: Secret created successfully. Returns the created secret (including server-generated fields like id and createdAt).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409': # Conflict if secret with the same key already exists
          description: Conflict. A secret with the specified key already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        default:
          $ref: '#/components/responses/AppErrorResponse'

  /secrets/{secret_name}:
    get:
      tags:
        - Secret
      summary: Get a Secret by Name
      description: Retrieves a specific secret, including its value, by its name.
      operationId: GetSecretByName
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/SecretNamePathParameter'
      responses:
        '200':
          description: Successfully retrieved the secret.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        default:
          $ref: '#/components/responses/AppErrorResponse'
    put:
      tags:
        - Secret
      summary: Update an Existing Secret
      description: Updates properties of an existing secret, such as its value or enabled status.
      operationId: UpdateSecretByName
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/SecretNamePathParameter'
      requestBody:
        description: The properties of the secret to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretUpdatePayload'
      responses:
        '200':
          description: Secret updated successfully. Returns the updated secret.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        default:
          $ref: '#/components/responses/AppErrorResponse'
    delete:
      tags:
        - Secret
      summary: Delete a Secret by Name
      description: Deletes a specific secret by its name. This might be a soft delete depending on service implementation.
      operationId: DeleteSecretByName
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/SecretNamePathParameter'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        default:
          $ref: '#/components/responses/AppErrorResponse'

  /secrets/deleted/{secret_name}:
    get:
      tags:
        - Secret
      summary: Get a Deleted Secret by Name
      description: Retrieves metadata of a secret that has been soft-deleted, if the service supports this feature.
      operationId: GetDeletedSecretByName
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/SecretNamePathParameter'
      responses:
        '200':
          description: Successfully retrieved the deleted secret's metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret' # Assuming it returns full secret representation
        '204': # More appropriate if secret is permanently deleted or not found in deleted items
           $ref: '#/components/responses/NoContentResponse' # Changed from AppError
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        default:
          $ref: '#/components/responses/AppErrorResponse'

  /secrets/recover/{secret_name}:
    post:
      tags:
        - Secret
      summary: Recover a Deleted Secret
      description: Recovers a soft-deleted secret by its name, making it active again if the service supports this.
      operationId: RecoverDeletedSecretByName
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
        - $ref: '#/components/parameters/SecretNamePathParameter'
      responses:
        '200':
          description: Secret recovered successfully. Returns the recovered secret.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError' # If secret not found or not in deleted state
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        default:
          $ref: '#/components/responses/AppErrorResponse'

  /secrets:retrieve: # Keeping OSDU-style action path
    post:
      tags:
        - Secret
      summary: Retrieve Multiple Secrets by Names
      description: Retrieves a batch of secrets, including their values, based on a list of secret names.
      operationId: RetrieveSecretsByNames
      parameters:
        - $ref: '#/components/parameters/DataPartitionIdHeader'
      requestBody:
        description: A list of secret names (keys) to retrieve.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              minItems: 1 # Assuming at least one name is required
              maxItems: 20 # As per original spec, adjust if needed
              example: ["my-api-key", "database-password"]
      responses:
        '200':
          description: Successfully retrieved the batch of secrets. Secrets not found or not accessible may be omitted or indicated.
          content:
            application/json:
              schema:
                type: array # Assuming it returns an array of found secrets
                items:
                  $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        default:
          $ref: '#/components/responses/AppErrorResponse'